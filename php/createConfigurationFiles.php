#!/usr/bin/php -q
<?php



$outputDir = $argv[1];
createConfgurationFiles($outputDir);



function createConfgurationFiles($outputDir)
{
  createParameterFiles($outputDir);
  createTableConfig($outputDir);
}



function createParameterFiles($outputDir)
{
  $idArray1 = createParameterFiles_grib1("/usr/share/grib_api/definitions/grib1",$outputDir);
  $idArray2 = createParameterFiles_grib2("/usr/share/grib_api/definitions/grib2",$outputDir);

  $outputParamFile = $outputDir . "/" . "grib_parameters.csv";
  $content = "";

  $header = "";
  $header .= "# This file is automatically generated by 'createConfigurationFiles.php'.\n";
  $header .= "# It defines parameter identifiers and common properties for the grid data.\n";
  $header .= "#\n";
  $header .= "# FIELDS:\n";
  $header .= "# [0]  parameterId\n";
  $header .= "# [1]  discipline\n";
  $header .= "# [2]  parameterCategory\n";
  $header .= "# [3]  parameterNumber\n";
  $header .= "# [4]  parameterName\n";
  $header .= "# [5]  parameterDescription\n";
  $header .= "# [6]  parameterUnit\n";
  $header .= "#\n";

  foreach ($idArray2 as $param)
  {
    $content .= $param;
  }

  foreach ($idArray1 as $key => $value)
  {
    if (!array_key_exists($key,$idArray2))
      $content .= $value;
  }

  file_put_contents($outputParamFile, $content);

  $data = file($outputParamFile);
  natsort($data);
  file_put_contents($outputParamFile, $header . implode($data));
}



function createParameterFiles_grib1($dir,$outputDir)
{
  $idArray = Array();
  $idFile_grib1 = $dir . "/paramId.def";
  $unitFile_grib1 = $dir . "/units.def";
  $shortNameFile_grib1 = $dir . "/shortName.def";

  $centre = "";
  $outputParamFile = $outputDir . "/" . "grib_parameter.csv";
  $outputParamFile_grib1 = $outputDir . "/" . "grib1_parameters.csv";

  $idArray = createParameterFile_grib1($idFile_grib1, $unitFile_grib1, $shortNameFile_grib1,$centre,$idArray);

  $content = "";

  $header  = "# This file is automatically generated by 'createConfigurationFiles.php'.\n";
  $header .= "# It defines GRIB1 properties that are used for finding unique parameter for\n";
  $header .= "# the grid data.\n";
  $header .= "#\n";
  $header .= "# FIELDS:\n";
  $header .= "# [0]  parameterId\n";
  $header .= "# [1]  table2Version\n";
  $header .= "# [2]  centre\n";
  $header .= "# [3]  indicatorOfParameter\n";
  $header .= "# [4]  indicatorOfTypeOfLevel\n";
  $header .= "# [5]  level\n";
  $header .= "# [6]  parameterUnits\n";
  $header .= "# [7]  parameterName\n";
  $header .= "# [8]  parameterDescription\n";
  $header .= "#\n";

  $content .= $idArray["content"];

  unset($idArray["content"]);


  $dir = opendir("/usr/share/grib_api/definitions/grib2/localConcepts");
  if ($dir !== false)
  {
    while (false !== ($file=readdir($dir)))
    {
      $fname = "/usr/share/grib_api/definitions/grib1/localConcepts/" . $file;
      if (is_dir($fname)  &&  $file != "."  &&   $file != "..")
      {
//        $content .= "#\n";
//        $content .= "###################################################################\n";
//        $content .= "# " . $fname . "\n";
//        $content .= "###################################################################\n";
//        $content .= "#\n";

        $centre = getCentre($fname);
//	print "CENTRE " . $fname . " " . $centre . "\n";

        $idFile_grib1 = $fname . "/paramId.def";
        $unitFile_grib1 = $fname . "/units.def";
        $shortNameFile_grib1 = $fname . "/shortName.def";
        $idArray = createParameterFile_grib1($idFile_grib1, $unitFile_grib1, $shortNameFile_grib1,$centre,$idArray);
        $tmpContent = $idArray["content"];
        unset($idArray["content"]);
        //$idArray =  array_merge($idArray,$tmpIdArray);
        $content .= $tmpContent;
      }
    }
  }

  file_put_contents($outputParamFile_grib1, $content);

  $data = file($outputParamFile_grib1);
  natsort($data);
  file_put_contents($outputParamFile_grib1, $header . implode($data));

  return $idArray;
}



function createParameterFiles_grib2($dir,$outputDir)
{
  $idArray = Array();
  $idFile_grib2 = $dir . "/paramId.def";
  $unitFile_grib2 = $dir . "/units.def";
  $shortNameFile_grib2 = $dir . "/shortName.def";

  $outputParamFile = $outputDir . "/" . "grib_parameter.csv";
  $outputParamFile_grib2 = $outputDir . "/" . "grib1_parameters.csv";
  $centre = "";

  $idArray = createParameterFile_grib2($idFile_grib2, $unitFile_grib2, $shortNameFile_grib2,$centre,$idArray);

  $content = "";

  $header  = "# This file is automatically generated by 'createConfigurationFiles.php'.\n";
  $header .= "# It defines GRIB2 properties that are used for finding unique parameter for\n";
  $header .= "# the grid data.\n";
  $header .= "#\n";
  $header .= "# FIELDS:\n";
  $header .= "# [0]  parameterId\n";
  $header .= "# [1]  discipline\n";
  $header .= "# [2]  centre\n";
  $header .= "# [3]  parameterCategory\n";
  $header .= "# [4]  parameterNumber\n";
  $header .= "# [5]  probabilityType\n";
  $header .= "# [6]  productDefinitionTemplateNumber\n";
  $header .= "# [7]  typeOfFirstFixedSurface\n";
  $header .= "# [8]  typeOfSecondFixedSurface\n";
  $header .= "# [9]  typeOfStatisticalProcessing\n";
  $header .= "# [10]  scaledValueOfLowerLimit\n";
  $header .= "# [11] scaledValueOfFirstFixedSurface\n";
  $header .= "# [12] scaledValueOfSecondFixedSurface\n";
  $header .= "# [13] scaleFactorOfLowerLimit\n";
  $header .= "# [14] scaleFactorOfFirstFixedSurface\n";
  $header .= "# [15] scaleFactorOfSecondFixedSurface\n";
  $header .= "# [16] is_tigge\n";
  $header .= "# [17] typeOfGeneratingProcess\n";
  $header .= "# [18] constituentType\n";
  $header .= "# [19] lengthOfTimeRange\n";
  $header .= "# [20] localTablesVersion\n";
  $header .= "# [21] aerosolType\n";
  $header .= "# [22] parameterUnits\n";
  $header .= "# [23] parameterName\n";
  $header .= "# [24] parameterDescription\n";
  $header .= "#\n";

  $content .= $idArray["content"];

  unset($idArray["content"]);


  $dir = opendir("/usr/share/grib_api/definitions/grib2/localConcepts");
  if ($dir !== false)
  {
    while (false !== ($file=readdir($dir)))
    {
      $fname = "/usr/share/grib_api/definitions/grib2/localConcepts/" . $file;
      if (is_dir($fname)  &&  $file != "."  &&   $file != "..")
      {
//        $content .= "#\n";
//        $content .= "###################################################################\n";
//        $content .= "# " . $fname . "\n";
//        $content .= "###################################################################\n";
//        $content .= "#\n";

        $centre = getCentre($fname);
        $idFile_grib2 = $fname . "/paramId.def";
        $unitFile_grib2 = $fname . "/units.def";
        $shortNameFile_grib2 = $fname . "/shortName.def";
        $idArray = createParameterFile_grib2($idFile_grib2, $unitFile_grib2, $shortNameFile_grib2,$centre,$idArray);
        $tmpContent = $idArray["content"];
        unset($idArray["content"]);
        //$idArray =  array_merge($idArray,$tmpIdArray);
        $content .= $tmpContent;
      }
    }
  }

  file_put_contents($outputParamFile_grib2, $content);

  $data = file($outputParamFile_grib2);
  natsort($data);
  file_put_contents($outputParamFile_grib2, $header . implode($data));

  return $idArray;
}




function createParameterFile_grib2($idFile_grib2, $unitFile_grib2, $shortNameFile_grib2,$centre,$totalIdArray)
{
  $unitRows = file($unitFile_grib2);
  $shortNameRows = file($shortNameFile_grib2);

  $rows = file($idFile_grib2);
  $parameterName = "";
  $prevParameterName = "";
  $grib2 = "";
  $parameterId = "";
  $discipline = "";
  $parameterCategory = "";
  $parameterNumber = "";
  $probabilityType = "";
  $productDefinitionTemplateNumber = "";
  $typeOfFirstFixedSurface = "";
  $typeOfSecondFixedSurface = "";
  $typeOfStatisticalProcessing = "";
  $scaledValueOfLowerLimit = "";
  $scaledValueOfFirstFixedSurface = "";
  $scaledValueOfSecondFixedSurface = "";
  $scaleFactorOfLowerLimit = "";
  $scaleFactorOfFirstFixedSurface = "";
  $scaleFactorOfSecondFixedSurface = "";
  $is_tigge = "";
  $typeOfGeneratingProcess = "";
  $constituentType = "";
  $lengthOfTimeRange = "";
  $localTablesVersion = "";
  $aerosolType = "";

  foreach ($rows as $row)
  {
    $line = trim($row);
    $line = str_replace("\n", "", $line);

    if (strpos($line, "#") !== false)
    {
      $pname = $line;
      $parameterName = str_replace("#", "", $pname);
    }
    else
    {
      $newline = str_replace("=", ":", $line);
      $newline = str_replace("'", "", $newline);
      $newline = str_replace("\t", " ", $newline);

      $p = array();
      $idx = 0;
      $pieces = explode(" ", $newline);
      foreach ($pieces as $piece)
      {
        if ($piece > " ")
        {
          $p[$idx] = $piece;
          //print "PIECE [" .$idx ."][" .$piece . "]\n";
          $idx ++;
        }
      }

      if ($idx == 3 && $p[1] == ":" && $p[2] == "{")
      {
        if ($parameterId > 0  &&  $prevParameterName > " "  &&  $discipline > " ")
        {
          print "- Name : " . $prevParameterName . "\n";

          $cLine = "";
          $cLine .= $parameterId . ";";
          $cLine .= $discipline . ";";
          $cLine .= $parameterCategory . ";";
          $cLine .= $parameterNumber . ";";
          $cLine .= $shortName . ";";
          $cLine .= $prevParameterName . ";";
          $cLine .= $units . ";\n";

          if (!array_key_exists($parameterId,$totalIdArray))
          {
            $totalIdArray[$parameterId] = $cLine;

            $grib2 .= $parameterId . ";";
            $grib2 .= $discipline . ";";
            $grib2 .= $centre . ";";
            $grib2 .= $parameterCategory . ";";
            $grib2 .= $parameterNumber . ";";
            $grib2 .= $probabilityType . ";";
            $grib2 .= $productDefinitionTemplateNumber . ";";
            $grib2 .= $typeOfFirstFixedSurface . ";";
            $grib2 .= $typeOfSecondFixedSurface . ";";
            $grib2 .= $typeOfStatisticalProcessing . ";";
            $grib2 .= $scaledValueOfLowerLimit . ";";
            $grib2 .= $scaledValueOfFirstFixedSurface . ";";
            $grib2 .= $scaledValueOfSecondFixedSurface . ";";
            $grib2 .= $scaleFactorOfLowerLimit . ";";
            $grib2 .= $scaleFactorOfFirstFixedSurface . ";";
            $grib2 .= $scaleFactorOfSecondFixedSurface . ";";
            $grib2 .= $is_tigge . ";";
            $grib2 .= $typeOfGeneratingProcess . ";";
            $grib2 .= $constituentType . ";";
            $grib2 .= $lengthOfTimeRange . ";";
            $grib2 .= $localTablesVersion . ";";
            $grib2 .= $aerosolType . ";";
            $grib2 .= $units . ";";
            $grib2 .= $shortName . ";";
            $grib2 .= $prevParameterName . ";\n";
          }
        }

        // New parameterId;

        $prevParameterName = $parameterName;
        $parameterId = $p[0];
        $units = getValueByParameterName($unitRows, $parameterName);
        $shortName = getValueByParameterName($shortNameRows, $parameterName);
        $discipline = "";
        $parameterCategory = "";
        $parameterNumber = "";
        $probabilityType = "";
        $productDefinitionTemplateNumber = "";
        $typeOfFirstFixedSurface = "";
        $typeOfSecondFixedSurface = "";
        $typeOfStatisticalProcessing = "";
        $scaledValueOfLowerLimit = "";
        $scaledValueOfFirstFixedSurface = "";
        $scaledValueOfSecondFixedSurface = "";
        $scaleFactorOfLowerLimit = "";
        $scaleFactorOfFirstFixedSurface = "";
        $scaleFactorOfSecondFixedSurface = "";
        $is_tigge = "";
        $typeOfGeneratingProcess = "";
        $constituentType = "";
        $lengthOfTimeRange = "";
        $localTablesVersion = "";
        $aerosolType = "";
      }

      if ($idx == 4)
      {
        $field = $p[0];
        $value = $p[2];
        //print "### " . $field . "=" . $value . "\n";

        if ($field == "discipline")
          $discipline = $value;

        if ($field == "parameterCategory")
          $parameterCategory = $value;

        if ($field == "parameterNumber")
          $parameterNumber = $value;

        if ($field == "probabilityType")
          $probabilityType = $value;

        if ($field == "productDefinitionTemplateNumber")
          $productDefinitionTemplateNumber = $value;

        if ($field == "typeOfFirstFixedSurface")
          $typeOfFirstFixedSurface = $value;

        if ($field == "typeOfSecondFixedSurface")
          $typeOfSecondFixedSurface = $value;

        if ($field == "typeOfStatisticalProcessing")
          $typeOfStatisticalProcessing = $value;

        if ($field == "scaledValueOfLowerLimit")
          $scaledValueOfLowerLimit = $value;

        if ($field == "scaledValueOfFirstFixedSurface")
          $scaledValueOfFirstFixedSurface = $value;

        if ($field == "scaledValueOfSecondFixedSurface")
          $scaledValueOfSecondFixedSurface = $value;

        if ($field == "scaleFactorOfLowerLimit")
          $scaleFactorOfLowerLimit = $value;

        if ($field == "scaleFactorOfFirstFixedSurface")
          $scaleFactorOfFirstFixedSurface = $value;

        if ($field == "scaleFactorOfSecondFixedSurface")
          $scaleFactorOfSecondFixedSurface = $value;

        if ($field == "is_tigge")
          $is_tigge = $value;

        if ($field == "typeOfGeneratingProcess")
          $typeOfGeneratingProcess = $value;

        if ($field == "constituentType" || $field == "atmosphericChemicalConsituentType")
          $constituentType = $value;

        if ($field == "lengthOfTimeRange")
          $lengthOfTimeRange = $value;

        if ($field == "localTablesVersion")
          $localTablesVersion = $value;

        if ($field == "aerosolType")
          $aerosolType = $value;
      }
    }
  }

  if ($parameterId > 0  &&  $parameterName > " "  &&  $discipline > " ")
  {
    print "- Name : " . $parameterName . "\n";

    $cLine = "";
    $cLine .= $parameterId . ";";
    $cLine .= $discipline . ";";
    $cLine .= $parameterCategory . ";";
    $cLine .= $parameterNumber . ";";
    $cLine .= $shortName . ";";
    $cLine .= $parameterName . ";";
    $cLine .= $units . ";\n";

    if (!array_key_exists($parameterId,$totalIdArray))
    {
      $totalIdArray[$parameterId] = $cLine;

      $grib2 .= $parameterId . ";";
      $grib2 .= $discipline . ";";
      $grib2 .= $centre . ";";
      $grib2 .= $parameterCategory . ";";
      $grib2 .= $parameterNumber . ";";
      $grib2 .= $probabilityType . ";";
      $grib2 .= $probabilityType . ";";
      $grib2 .= $productDefinitionTemplateNumber . ";";
      $grib2 .= $typeOfFirstFixedSurface . ";";
      $grib2 .= $typeOfSecondFixedSurface . ";";
      $grib2 .= $typeOfStatisticalProcessing . ";";
      $grib2 .= $scaledValueOfLowerLimit . ";";
      $grib2 .= $scaledValueOfFirstFixedSurface . ";";
      $grib2 .= $scaledValueOfSecondFixedSurface . ";";
      $grib2 .= $scaleFactorOfLowerLimit . ";";
      $grib2 .= $scaleFactorOfFirstFixedSurface . ";";
      $grib2 .= $scaleFactorOfSecondFixedSurface . ";";
      $grib2 .= $is_tigge . ";";
      $grib2 .= $typeOfGeneratingProcess . ";";
      $grib2 .= $constituentType . ";";
      $grib2 .= $lengthOfTimeRange . ";";
      $grib2 .= $localTablesVersion . ";";
      $grib2 .= $aerosolType . ";";
      $grib2 .= $units . ";";
      $grib2 .= $shortName . ";";
      $grib2 .= $parameterName . ";\n";
    }
  }

  $totalIdArray["content"] = $grib2;
  return $totalIdArray;
}




function createParameterFile_grib1($idFile_grib1, $unitFile_grib1, $shortNameFile_grib1,$centre,$totalIdArray)
{
  //$idArray = array();

  $unitRows = file($unitFile_grib1);
  $shortNameRows = file($shortNameFile_grib1);

  $rows = file($idFile_grib1);
  $parameterName = "";
  $prevParameterName = "";
  $grib1 = "";
  $parameterId = "";

  $indicatorOfParameter = "";
  $indicatorOfTypeOfLevel = "";
  $level = "";
  $table2Version = "";

  foreach ($rows as $row)
  {
    $line = trim($row);
    $line = str_replace("\n", "", $line);

    if (strpos($line, "#") !== false)
    {
      $pname = $line;
      $parameterName = str_replace("#", "", $pname);
    }
    else
    {
      $newline = str_replace("=", ":", $line);
      $newline = str_replace("'", "", $newline);
      $newline = str_replace("\t", " ", $newline);

      $p = array();
      $idx = 0;
      $pieces = explode(" ", $newline);
      foreach ($pieces as $piece)
      {
        if ($piece > " ")
        {
          $p[$idx] = $piece;
          //print "PIECE [" .$idx ."][" .$piece . "]\n";
          $idx ++;
        }
      }

      if ($idx == 3 && $p[1] == ":" && $p[2] == "{")
      {
        // New parameterId;

        if ($parameterId > 0  &&  $prevParameterName > " "  &&  $indicatorOfParameter > " ")
        {
          print "- Name : " . $prevParameterName . "\n";

          $cLine = "";
          $cLine .= $parameterId . ";";
          $cLine .= ";";  // Discipline
          $cLine .= ";";  // ParameterCategory
          $cLine .= ";";  // ParameterNumber
          $cLine .= $shortName . ";";
          $cLine .= $prevParameterName . ";";
          $cLine .= $units . ";\n";

          if (!array_key_exists($parameterId,$totalIdArray))
          {
            $totalIdArray[$parameterId] = $cLine;
          }

          $grib1 .= $parameterId . ";";
          $grib1 .= $table2Version . ";";
          $grib1 .= $centre . ";";
          $grib1 .= $indicatorOfParameter . ";";
          $grib1 .= $indicatorOfTypeOfLevel . ";";
          $grib1 .= $level . ";";
          $grib1 .= $units . ";";
          $grib1 .= $shortName . ";";
          $grib1 .= $prevParameterName . ";\n";
        }

        $prevParameterName = $parameterName;
        $parameterId = $p[0];
        $units = getValueByParameterName($unitRows, $parameterName);
        $shortName = getValueByParameterName($shortNameRows, $parameterName);

        $table2Version = "";
        $indicatorOfParameter = "";
        $indicatorOfTypeOfLevel = "";
        $level = "";
      }

      if ($idx == 4)
      {
        $field = $p[0];
        $value = $p[2];
        //print "### " . $field . "=" . $value . "\n";

        if ($field == "table2Version")
          $table2Version = $value;

        if ($field == "indicatorOfParameter")
          $indicatorOfParameter = $value;

        if ($field == "indicatorOfTypeOfLevel")
          $indicatorOfTypeOfLevel = $value;

        if ($field == "level")
          $level = $value;
      }
    }
  }

  if ($parameterId > 0  &&  $parameterName > " "  &&  $indicatorOfParameter > " ")
  {
    print "- Name : " . $parameterName . "\n";

    $cLine = "";
    $cLine .= $parameterId . ";";
    $cLine .= ";";  // Discipline
    $cLine .= ";";  // ParameterCategory
    $cLine .= ";";  // ParameterNumber
    $cLine .= $shortName . ";";
    $cLine .= $parameterName . ";";
    $cLine .= $units . ";\n";

    if (!array_key_exists($parameterId,$totalIdArray))
    {
      $totalIdArray[$parameterId] = $cLine;
    }

    $grib1 .= $parameterId . ";";
    $grib1 .= $table2Version . ";";
    $grib1 .= $centre . ";";
    $grib1 .= $indicatorOfParameter . ";";
    $grib1 .= $indicatorOfTypeOfLevel . ";";
    $grib1 .= $level . ";";
    $grib1 .= $units . ";";
    $grib1 .= $shortName . ";";
    $grib1 .= $parameterName . ";\n";
  }

  $totalIdArray["content"] = $grib1;

  return $totalIdArray;
}



function getValueByParameterName($rows, $paramName)
{
  $pname = "";

  foreach ($rows as $row)
  {
    $line = trim($row);
    $line = str_replace("\n", "", $line);

    if (strpos($line, "#") !== false)
    {
      $pname = str_replace("#", "", $line);
    }
    else
    {
      if ($pname == $paramName)
      {
        $pieces = explode("'", $line);
        foreach ($pieces as $piece)
        {
          if ($piece > " ")
          {
            return trim($piece);
          }
        }
      }
    }
  }
  return "";
}



function createTableConfig($outputDir)
{
  $tableConfigFile = $outputDir . "/grib_tables.csv";
  $content = "";


  $content .= "# This file is automatically generated by 'createAttributeListFiles.php'.\n";
  $content .= "# It defines table values used in grib1 and grib2\n";
  $content .= "#\n";
  $content .= "# FIELDS:\n";
  $content .= "# [0]  gribVersion (1 or 2)\n";
  $content .= "# [1]  tableVersion\n";
  $content .= "# [2]  table\n";
  $content .= "# [3]  number\n";
  $content .= "# [4]  name\n";
  $content .= "# [5]  value\n";
  $content .= "#\n";

  $tableDir1 = "/usr/share/grib_api/definitions/grib1/";
  $stringList1 = getTableInformation("0",$tableDir1);

  foreach ($stringList1 as $str)
  {
    $content .= "1;" . $str . "\n";
  }

  $tableDir2 = "/usr/share/grib_api/definitions/grib2/tables/";
  $stringList2 = getTableInformation("",$tableDir2);
  foreach ($stringList2 as $str)
  {
    $content .= "2;" . $str . "\n";
  }

  file_put_contents($tableConfigFile, $content);
}



function getTableInformation($prefix,$tableDir)
{
  $stringList = array();

  //print "#### " . $tableDir . "\n";
  $dir = opendir($tableDir);
  if ($dir !== false)
  {
    while (false !== ($file=readdir($dir)))
    {
      if (strpos($file, '.table') !== false)
      {
        //print $prefix . "-" . $file . "\n";

        $fname = $tableDir . "/" . $file;

        $table = str_replace(".table", "", $file);

        $lines = getTableContent($fname);
        foreach ($lines as $line)
        {
          //print $line . "\n";

          $idx = 0;
          $num = "";
          $nam = "";
          $val = "";
          $pieces = explode(" ", $line);
          foreach ($pieces as $piece)
          {
            if ($piece > " ")
            {
              //$p[$idx] = $piece;
              //print "PIECE [" .$idx ."][" .$piece . "]\n";
              if ($idx == 0)
                $num = $piece;
              else
              if ($idx == 1)
                $nam = $piece;
              else
              {
                if ($val > " ")
                  $val .= " " . $piece;
                else
                  $val .= $piece;
              }
              $idx++;
            }
          }
          if ($num > " "  &&  $nam > " "  &&  $val > " ")
          {
            $str = $prefix . ";" . $table . ";" . $num . ";" . $nam . ";" . $val;
            $stringList[] = $str;
            //print $str . ";\n";
          }
        }
      }
      else
      {
        if ($file != "."  &&   $file != ".."  &&  is_numeric($file))
        {
          if ($prefix > " ")
            $newPrefix = $prefix . "/" . $file;
          else
            $newPrefix = $file;

          $newDir = $tableDir . "/" . $file;
          //print "DIR " . $newDir . "\n";
          if (is_dir($newDir))
          {
            $newStringList =  getTableInformation($newPrefix,$newDir);
            $stringList =  array_merge($stringList,$newStringList);
          }
        }
      }
    }
  }
  return $stringList;
}



function getTableContent($filename)
{
  $lines = array();
  $rows = file($filename);

  foreach ($rows as $row)
  {
    $a = $row;
    if (substr($a,0,1) != "#")
    {
      $a = str_replace("\t", " ", $a);
      $a = str_replace("\n", "", $a);
      $a = str_replace("  ", " ", $a);
      $a = rtrim($a);
      //print "[" . $a . "]\n";
      $lines[] = $a;
    }
  }
  return $lines;
}


function getCentre($dir)
{
  if (strpos($dir, "/ammc") > 0) return "1";
  if (strpos($dir, "/rums") > 0) return "4";
  if (strpos($dir, "/kwbc") > 0) return "7";
  if (strpos($dir, "/fapr") > 0) return "24";
  if (strpos($dir, "/rjtd") > 0) return "34";
  if (strpos($dir, "/babj") > 0) return "38";
  if (strpos($dir, "/rksl") > 0) return "40";
  if (strpos($dir, "/sbsj") > 0) return "46";
  if (strpos($dir, "/cwao") > 0) return "54";
  if (strpos($dir, "/fnmo") > 0) return "58";
  if (strpos($dir, "/egrr") > 0) return "74";
  if (strpos($dir, "/edzw") > 0) return "78";
  if (strpos($dir, "/cnmc") > 0) return "80";
  if (strpos($dir, "/eswi") > 0) return "82";
  if (strpos($dir, "/lfpw") > 0) return "84";
  if (strpos($dir, "/enmi") > 0) return "88";
  if (strpos($dir, "/ekmi") > 0) return "94";
  if (strpos($dir, "/ecmf") > 0) return "98";
  if (strpos($dir, "/lemm") > 0) return "214";
  if (strpos($dir, "/lssw") > 0) return "215";
  if (strpos($dir, "/habp") > 0) return "218";
  if (strpos($dir, "/lowm") > 0) return "224";
  if (strpos($dir, "/ebum") > 0) return "227";
  if (strpos($dir, "/eidb") > 0) return "233";
  if (strpos($dir, "/ingv") > 0) return "235";
  if (strpos($dir, "/crfc") > 0) return "239";
  if (strpos($dir, "/vuwien") > 0) return "244";
  if (strpos($dir, "/knmi") > 0) return "245";
  if (strpos($dir, "/ifmk") > 0) return "246";
  if (strpos($dir, "/hadc") > 0) return "247";
  if (strpos($dir, "/cosmo") > 0) return "250";
  if (strpos($dir, "/eums") > 0) return "254";

  return "";
}


?>
