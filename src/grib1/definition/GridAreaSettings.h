// ***********************************************************************
//                      DO NOT EDIT THIS FILE !!!
// ***********************************************************************
//   This file is automatically generated from the grib_api templates. All
//   changes will be overridden. If you want to do permanent changes then
//   you should write them into the 'GridAreaSettingsImpl.*' files.
// ***********************************************************************

#pragma once
#include "../../common/AttributeList.h"
#include "../../common/DataWriter.h"
#include "../../common/MemoryReader.h"
#include "../../grid/Typedefs.h"
#include "ResolutionFlagsSettings.h"

namespace SmartMet {
namespace GRIB1 {
/*! \brief The class is automatically created from the template (grid_first_last_resandcomp).*/

class GridAreaSettings {
public:
  GridAreaSettings();
  virtual ~GridAreaSettings();

  virtual void getAttributeList(std::string prefix, T::AttributeList &attributeList) const;
  virtual void read(MemoryReader &memoryReader);
  virtual void write(DataWriter &dataWriter);
  virtual void print(std::ostream &stream, uint level, uint optionFlags) const;
  virtual T::Hash countHash();

  std::int24_t getLatitudeOfFirstGridPoint() const;
  void setLatitudeOfFirstGridPoint(std::int24_t latitudeOfFirstGridPoint);
  std::int24_t getLongitudeOfFirstGridPoint() const;
  void setLongitudeOfFirstGridPoint(std::int24_t longitudeOfFirstGridPoint);
  ResolutionFlagsSettings *getResolutionFlags() const;
  void setResolutionFlags(ResolutionFlagsSettings &resolutionFlags);
  std::int24_t getLatitudeOfLastGridPoint() const;
  void setLatitudeOfLastGridPoint(std::int24_t latitudeOfLastGridPoint);
  std::int24_t getLongitudeOfLastGridPoint() const;
  void setLongitudeOfLastGridPoint(std::int24_t longitudeOfLastGridPoint);

protected:
  // # Copyright 2005-2019 ECMWF.
  //
  // #  La1 - latitude of first grid point
  // signed[3] latitudeOfFirstGridPoint :  edition_specific;

  std::int24_t mLatitudeOfFirstGridPoint;

  // meta geography.latitudeOfFirstGridPointInDegrees scale(latitudeOfFirstGridPoint,oneConstant,grib1divider,truncateDegrees) :dump;
  // alias La1 = latitudeOfFirstGridPoint;
  //
  // #  Lo1 - longitude of first grid point
  // signed[3] longitudeOfFirstGridPoint  : edition_specific;

  std::int24_t mLongitudeOfFirstGridPoint;

  // meta geography.longitudeOfFirstGridPointInDegrees scale(longitudeOfFirstGridPoint,oneConstant,grib1divider,truncateDegrees) : dump;
  // alias Lo1 = longitudeOfFirstGridPoint;
  //
  // include "grib1/resolution_flags.def";

  mutable ResolutionFlagsSettings mResolutionFlags;

  //
  // #  La2 - latitude of last grid point
  // signed[3] latitudeOfLastGridPoint :  edition_specific;

  std::int24_t mLatitudeOfLastGridPoint;

  // meta geography.latitudeOfLastGridPointInDegrees scale(latitudeOfLastGridPoint,oneConstant,grib1divider,truncateDegrees) : dump;
  // alias La2 = latitudeOfLastGridPoint;
  //
  // #  Lo2 - longitude of last grid point
  // signed[3] longitudeOfLastGridPoint :  edition_specific;

  std::int24_t mLongitudeOfLastGridPoint;

  // meta geography.longitudeOfLastGridPointInDegrees scale(longitudeOfLastGridPoint,oneConstant,grib1divider,truncateDegrees) : dump;
  // alias Lo2 = longitudeOfLastGridPoint;
  //
  // # for change_scanning_direction
  // alias yFirst=latitudeOfFirstGridPointInDegrees;
  // alias yLast=latitudeOfLastGridPointInDegrees;
  // alias xFirst=longitudeOfFirstGridPointInDegrees;
  // alias xLast=longitudeOfLastGridPointInDegrees;
  //
  // alias latitudeFirstInDegrees  = latitudeOfFirstGridPointInDegrees;
  // alias longitudeFirstInDegrees = longitudeOfFirstGridPointInDegrees;
  // alias latitudeLastInDegrees   = latitudeOfLastGridPointInDegrees;
  // alias longitudeLastInDegrees  = longitudeOfLastGridPointInDegrees;
  //
};

} // namespace GRIB1
} // namespace SmartMet
