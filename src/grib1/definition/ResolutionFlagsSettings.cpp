// ***********************************************************************
//                      DO NOT EDIT THIS FILE !!!
// ***********************************************************************
//   This file is automatically generated from the grib_api templates. All
//   changes will be overridden. If you want to do permanent changes then
//   you should write them into the 'ResolutionFlagsSettingsImpl.*' files.
// ***********************************************************************

#include "ResolutionFlagsSettings.h"
#include "../../common/Exception.h"
#include "../../common/GeneralDefinitions.h"
#include "../../common/GeneralFunctions.h"
#include <boost/functional/hash.hpp>
#include <iostream>

namespace SmartMet {
namespace GRIB1 {

/*! \brief The constructor of the class. */

ResolutionFlagsSettings::ResolutionFlagsSettings() {
  try {
    mResolutionAndComponentFlags = 0;
  } catch (...) {
    throw SmartMet::Spine::Exception(BCP, exception_operation_failed, NULL);
  }
}

/*! \brief The copy constructor of the class. */

ResolutionFlagsSettings::ResolutionFlagsSettings(const ResolutionFlagsSettings &other) {
  try {
    mResolutionAndComponentFlags = other.mResolutionAndComponentFlags;
  } catch (...) {
    throw SmartMet::Spine::Exception(BCP, exception_operation_failed, NULL);
  }
}

/*! \brief The destructor of the class. */

ResolutionFlagsSettings::~ResolutionFlagsSettings() {
}

/*! \brief The method reads and initializes all data related to the current section object.

        \param memoryReader  This object controls the access to the memory mapped file.
*/

void ResolutionFlagsSettings::read(MemoryReader &memoryReader) {
  try {
    mResolutionAndComponentFlags = memoryReader.read_uint8();
  } catch (...) {
    throw SmartMet::Spine::Exception(BCP, exception_operation_failed, NULL);
  }
}

/*! \brief The method writes all data related to the current section object.

        \param dataWriter  This object controls the write stream.
*/

void ResolutionFlagsSettings::write(DataWriter &dataWriter) {
  try {
    dataWriter << mResolutionAndComponentFlags;
  } catch (...) {
    throw SmartMet::Spine::Exception(BCP, exception_operation_failed, NULL);
  }
}

/*! \brief The method is used for collecting the current class attributeList.

    \param prefix         The prefix of the each attributeList parameter.
    \param attributeList  The attributeList storage.
*/

void ResolutionFlagsSettings::getAttributeList(std::string prefix, T::AttributeList &attributeList) const {
  try {
    char name[300];
    sprintf(name, "%sResolutionFlagsSettings.ResolutionAndComponentFlags", prefix.c_str());
    attributeList.addAttribute(name, toString(mResolutionAndComponentFlags));
  } catch (...) {
    throw SmartMet::Spine::Exception(BCP, exception_operation_failed, NULL);
  }
}

/*! \brief The method prints the content of the current object into the given stream.

    \param ostream      The output stream.
    \param level        The print level (used when printing multi-level structures).
    \param optionFlags  The printing options expressed in flag-bits.
*/

void ResolutionFlagsSettings::print(std::ostream &stream, uint level, uint optionFlags) const {
  try {
    stream << space(level) << "ResolutionFlagsSettings\n";
    stream << space(level) << "- ResolutionAndComponentFlags = " << toString(mResolutionAndComponentFlags) << "\n";
  } catch (...) {
    throw SmartMet::Spine::Exception(BCP, exception_operation_failed, NULL);
  }
}

/*! \brief The method counts the hash value of the current object. */

T::Hash ResolutionFlagsSettings::countHash() {
  try {
    std::size_t seed = 0;
    boost::hash_combine(seed, mResolutionAndComponentFlags);
    return seed;
  } catch (...) {
    throw SmartMet::Spine::Exception(BCP, exception_operation_failed, NULL);
  }
}

/*! \brief The method returns the value of the {@link mResolutionAndComponentFlags} attribute. */

std::uint8_t ResolutionFlagsSettings::getResolutionAndComponentFlags() const {
  try {
    return mResolutionAndComponentFlags;
  } catch (...) {
    throw SmartMet::Spine::Exception(BCP, exception_operation_failed, NULL);
  }
}

void ResolutionFlagsSettings::setResolutionAndComponentFlags(std::uint8_t resolutionAndComponentFlags) {
  try {
    mResolutionAndComponentFlags = resolutionAndComponentFlags;
  } catch (...) {
    throw SmartMet::Spine::Exception(BCP, exception_operation_failed, NULL);
  }
}

} // namespace GRIB1
} // namespace SmartMet
