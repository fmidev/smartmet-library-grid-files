// ***********************************************************************
//                      DO NOT EDIT THIS FILE !!!
// ***********************************************************************
//   This file is automatically generated from the grib_api templates. All
//   changes will be overridden. If you want to do permanent changes then
//   you should write them into the 'RotatedSphericalHarmonicImpl.*' files.
// ***********************************************************************

#include "RotatedSphericalHarmonic.h"
#include "../../common/Exception.h"
#include "../../common/GeneralDefinitions.h"
#include "../../common/GeneralFunctions.h"
#include <boost/functional/hash.hpp>
#include <iostream>

namespace SmartMet {
namespace GRIB1 {

/*! \brief The constructor of the class. */

RotatedSphericalHarmonic::RotatedSphericalHarmonic() {
  try {
    mJ = 0;
    mK = 0;
    mM = 0;
    mRepresentationType = 0;
    mRepresentationMode = 0;
  } catch (...) {
    throw SmartMet::Spine::Exception(BCP, exception_operation_failed, nullptr);
  }
}

/*! \brief The copy constructor of the class. */

RotatedSphericalHarmonic::RotatedSphericalHarmonic(const RotatedSphericalHarmonic &other) : GridDefinition(other) {
  try {
    mJ = other.mJ;
    mK = other.mK;
    mM = other.mM;
    mRepresentationType = other.mRepresentationType;
    mRepresentationMode = other.mRepresentationMode;
    mRotation = other.mRotation;
  } catch (...) {
    throw SmartMet::Spine::Exception(BCP, exception_operation_failed, nullptr);
  }
}

/*! \brief The destructor of the class. */

RotatedSphericalHarmonic::~RotatedSphericalHarmonic() {
}

/*! \brief The method reads and initializes all data related to the current section object.

        \param memoryReader  This object controls the access to the memory mapped file.
*/

void RotatedSphericalHarmonic::read(MemoryReader &memoryReader) {
  try {
    mJ = memoryReader.read_uint16();
    mK = memoryReader.read_uint16();
    mM = memoryReader.read_uint16();
    mRepresentationType = memoryReader.read_uint8();
    mRepresentationMode = memoryReader.read_uint8();
    mRotation.read(memoryReader);
  } catch (...) {
    throw SmartMet::Spine::Exception(BCP, exception_operation_failed, nullptr);
  }
}

/*! \brief The method writes all data related to the current section object.

        \param dataWriter  This object controls the write stream.
*/

void RotatedSphericalHarmonic::write(DataWriter &dataWriter) {
  try {
    dataWriter << mJ;
    dataWriter << mK;
    dataWriter << mM;
    dataWriter << mRepresentationType;
    dataWriter << mRepresentationMode;
    mRotation.write(dataWriter);
  } catch (...) {
    throw SmartMet::Spine::Exception(BCP, exception_operation_failed, nullptr);
  }
}

/*! \brief The method is used for collecting the current class attributeList.

    \param prefix         The prefix of the each attributeList parameter.
    \param attributeList  The attributeList storage.
*/

void RotatedSphericalHarmonic::getAttributeList(std::string prefix, T::AttributeList &attributeList) const {
  try {
    char name[300];
    sprintf(name, "%sRotatedSphericalHarmonic.J", prefix.c_str());
    attributeList.addAttribute(name, toString(mJ));
    sprintf(name, "%sRotatedSphericalHarmonic.K", prefix.c_str());
    attributeList.addAttribute(name, toString(mK));
    sprintf(name, "%sRotatedSphericalHarmonic.M", prefix.c_str());
    attributeList.addAttribute(name, toString(mM));
    sprintf(name, "%sRotatedSphericalHarmonic.RepresentationType", prefix.c_str());
    attributeList.addAttribute(name, toString(mRepresentationType));
    sprintf(name, "%sRotatedSphericalHarmonic.RepresentationMode", prefix.c_str());
    attributeList.addAttribute(name, toString(mRepresentationMode));
    sprintf(name, "%sRotatedSphericalHarmonic.", prefix.c_str());
    mRotation.getAttributeList(name, attributeList);
  } catch (...) {
    throw SmartMet::Spine::Exception(BCP, exception_operation_failed, nullptr);
  }
}

/*! \brief The method prints the content of the current object into the given stream.

    \param ostream      The output stream.
    \param level        The print level (used when printing multi-level structures).
    \param optionFlags  The printing options expressed in flag-bits.
*/

void RotatedSphericalHarmonic::print(std::ostream &stream, uint level, uint optionFlags) const {
  try {
    stream << space(level) << "RotatedSphericalHarmonic\n";
    stream << space(level) << "- J = " << toString(mJ) << "\n";
    stream << space(level) << "- K = " << toString(mK) << "\n";
    stream << space(level) << "- M = " << toString(mM) << "\n";
    stream << space(level) << "- RepresentationType = " << toString(mRepresentationType) << "\n";
    stream << space(level) << "- RepresentationMode = " << toString(mRepresentationMode) << "\n";
    mRotation.print(stream, level + 1, optionFlags);
  } catch (...) {
    throw SmartMet::Spine::Exception(BCP, exception_operation_failed, nullptr);
  }
}

/*! \brief The method counts the hash value of the current object. */

T::Hash RotatedSphericalHarmonic::countHash() {
  try {
    std::size_t seed = 0;
    boost::hash_combine(seed, mJ);
    boost::hash_combine(seed, mK);
    boost::hash_combine(seed, mM);
    boost::hash_combine(seed, mRepresentationType);
    boost::hash_combine(seed, mRepresentationMode);
    boost::hash_combine(seed, mRotation.countHash());
    return seed;
  } catch (...) {
    throw SmartMet::Spine::Exception(BCP, exception_operation_failed, nullptr);
  }
}

/*! \brief The method return the template number of the current class. */

uint RotatedSphericalHarmonic::getTemplateNumber() const {
  return 60;
}

GridDefinition *RotatedSphericalHarmonic::createGridDefinition() const {
  try {
    return static_cast<GridDefinition *>(new RotatedSphericalHarmonic(*this));
  } catch (...) {
    throw SmartMet::Spine::Exception(BCP, exception_operation_failed, nullptr);
  }
}

/*! \brief The method returns the value of the {@link mJ} attribute. */

std::uint16_t RotatedSphericalHarmonic::getJ() const {
  try {
    return mJ;
  } catch (...) {
    throw SmartMet::Spine::Exception(BCP, exception_operation_failed, nullptr);
  }
}

/*! \brief The method returns the value of the {@link mK} attribute. */

std::uint16_t RotatedSphericalHarmonic::getK() const {
  try {
    return mK;
  } catch (...) {
    throw SmartMet::Spine::Exception(BCP, exception_operation_failed, nullptr);
  }
}

/*! \brief The method returns the value of the {@link mM} attribute. */

std::uint16_t RotatedSphericalHarmonic::getM() const {
  try {
    return mM;
  } catch (...) {
    throw SmartMet::Spine::Exception(BCP, exception_operation_failed, nullptr);
  }
}

/*! \brief The method returns the value of the {@link mRepresentationType} attribute. */

std::uint8_t RotatedSphericalHarmonic::getRepresentationType() const {
  try {
    return mRepresentationType;
  } catch (...) {
    throw SmartMet::Spine::Exception(BCP, exception_operation_failed, nullptr);
  }
}

/*! \brief The method returns the value of the {@link mRepresentationMode} attribute. */

std::uint8_t RotatedSphericalHarmonic::getRepresentationMode() const {
  try {
    return mRepresentationMode;
  } catch (...) {
    throw SmartMet::Spine::Exception(BCP, exception_operation_failed, nullptr);
  }
}

/*! \brief The method returns the pointer to the {@link mRotation} attribute. */

RotationSettings *RotatedSphericalHarmonic::getRotation() const {
  try {
    return static_cast<RotationSettings *>(&mRotation);
  } catch (...) {
    throw SmartMet::Spine::Exception(BCP, exception_operation_failed, nullptr);
  }
}

void RotatedSphericalHarmonic::setJ(std::uint16_t j) {
  try {
    mJ = j;
  } catch (...) {
    throw SmartMet::Spine::Exception(BCP, exception_operation_failed, nullptr);
  }
}

void RotatedSphericalHarmonic::setK(std::uint16_t k) {
  try {
    mK = k;
  } catch (...) {
    throw SmartMet::Spine::Exception(BCP, exception_operation_failed, nullptr);
  }
}

void RotatedSphericalHarmonic::setM(std::uint16_t m) {
  try {
    mM = m;
  } catch (...) {
    throw SmartMet::Spine::Exception(BCP, exception_operation_failed, nullptr);
  }
}

void RotatedSphericalHarmonic::setRepresentationType(std::uint8_t representationType) {
  try {
    mRepresentationType = representationType;
  } catch (...) {
    throw SmartMet::Spine::Exception(BCP, exception_operation_failed, nullptr);
  }
}

void RotatedSphericalHarmonic::setRepresentationMode(std::uint8_t representationMode) {
  try {
    mRepresentationMode = representationMode;
  } catch (...) {
    throw SmartMet::Spine::Exception(BCP, exception_operation_failed, nullptr);
  }
}

void RotatedSphericalHarmonic::setRotation(RotationSettings &rotation) {
  try {
    mRotation = rotation;
  } catch (...) {
    throw SmartMet::Spine::Exception(BCP, exception_operation_failed, nullptr);
  }
}

} // namespace GRIB1
} // namespace SmartMet
