// ***********************************************************************
//                      DO NOT EDIT THIS FILE !!!
// ***********************************************************************
//   This file is automatically generated from the grib_api templates. All
//   changes will be overridden. If you want to do permanent changes then
//   you should write them into the 'AerosolOpticalPropertiesProductImpl.*' files.
// ***********************************************************************

#include "AerosolOpticalPropertiesProduct.h"
#include "../../common/Exception.h"
#include "../../common/GeneralDefinitions.h"
#include "../../common/GeneralFunctions.h"
#include <boost/functional/hash.hpp>
#include <iostream>

namespace SmartMet {
namespace GRIB2 {

/*! \brief The constructor of the class. */

AerosolOpticalPropertiesProduct::AerosolOpticalPropertiesProduct() {
  try {
  } catch (...) {
    throw SmartMet::Spine::Exception(BCP, exception_operation_failed, NULL);
  }
}

/*! \brief The copy constructor of the class. */

AerosolOpticalPropertiesProduct::AerosolOpticalPropertiesProduct(const AerosolOpticalPropertiesProduct &other) : ProductDefinition(other) {
  try {
    mParameterAerosolOptical = other.mParameterAerosolOptical;
    mPointInTime = other.mPointInTime;
    mHorizontal = other.mHorizontal;
  } catch (...) {
    throw SmartMet::Spine::Exception(BCP, exception_operation_failed, NULL);
  }
}

/*! \brief The destructor of the class. */

AerosolOpticalPropertiesProduct::~AerosolOpticalPropertiesProduct() {
}

/*! \brief The method reads and initializes all data related to the current object.

        \param memoryReader  This object controls the access to the memory mapped file.
*/

void AerosolOpticalPropertiesProduct::read(MemoryReader &memoryReader) {
  try {
    mParameterAerosolOptical.read(memoryReader);
    mPointInTime.read(memoryReader);
    mHorizontal.read(memoryReader);
  } catch (...) {
    throw SmartMet::Spine::Exception(BCP, exception_operation_failed, NULL);
  }
}

/*! \brief The method writes all data related to the current object.

        \param dataWriter  This object is used for writing the object data.
*/

void AerosolOpticalPropertiesProduct::write(DataWriter &dataWriter) {
  try {
    mParameterAerosolOptical.write(dataWriter);
    mPointInTime.write(dataWriter);
    mHorizontal.write(dataWriter);
  } catch (...) {
    throw SmartMet::Spine::Exception(BCP, exception_operation_failed, NULL);
  }
}

/*! \brief The method is used for collecting the current class attributeList.

    \param prefix         The prefix of the each attributeList parameter.
    \param attributeList  The attributeList storage.
*/

void AerosolOpticalPropertiesProduct::getAttributeList(std::string prefix, T::AttributeList &attributeList) const {
  try {
    char name[300];
    sprintf(name, "%sAerosolOpticalPropertiesProduct.", prefix.c_str());
    mParameterAerosolOptical.getAttributeList(name, attributeList);
    sprintf(name, "%sAerosolOpticalPropertiesProduct.", prefix.c_str());
    mPointInTime.getAttributeList(name, attributeList);
    sprintf(name, "%sAerosolOpticalPropertiesProduct.", prefix.c_str());
    mHorizontal.getAttributeList(name, attributeList);
  } catch (...) {
    throw SmartMet::Spine::Exception(BCP, exception_operation_failed, NULL);
  }
}

/*! \brief The method prints the content of the current object into the given stream.

    \param ostream      The output stream.
    \param level        The print level (used when printing multi-level structures).
    \param optionFlags  The printing options expressed in flag-bits.
*/

void AerosolOpticalPropertiesProduct::print(std::ostream &stream, uint level, uint optionFlags) const {
  try {
    stream << space(level) << "AerosolOpticalPropertiesProduct\n";
    mParameterAerosolOptical.print(stream, level + 1, optionFlags);
    mPointInTime.print(stream, level + 1, optionFlags);
    mHorizontal.print(stream, level + 1, optionFlags);
  } catch (...) {
    throw SmartMet::Spine::Exception(BCP, exception_operation_failed, NULL);
  }
}

/*! \brief The method counts the hash value of the current object. */

T::Hash AerosolOpticalPropertiesProduct::countHash() {
  try {
    std::size_t seed = 0;
    boost::hash_combine(seed, mParameterAerosolOptical.countHash());
    boost::hash_combine(seed, mPointInTime.countHash());
    boost::hash_combine(seed, mHorizontal.countHash());
    return seed;
  } catch (...) {
    throw SmartMet::Spine::Exception(BCP, exception_operation_failed, NULL);
  }
}

/*! \brief The method return the template number of the current class. */

uint AerosolOpticalPropertiesProduct::getTemplateNumber() const {
  return 48;
}

ProductDefinition *AerosolOpticalPropertiesProduct::createProductDefinition() const {
  try {
    return static_cast<ProductDefinition *>(new AerosolOpticalPropertiesProduct(*this));
  } catch (...) {
    throw SmartMet::Spine::Exception(BCP, exception_operation_failed, NULL);
  }
}

/*! \brief The method returns the pointer to the {@link mParameterAerosolOptical} attribute. */

ParameterAerosolOpticalSettings *AerosolOpticalPropertiesProduct::getParameterAerosolOptical() const {
  try {
    return static_cast<ParameterAerosolOpticalSettings *>(&mParameterAerosolOptical);
  } catch (...) {
    throw SmartMet::Spine::Exception(BCP, exception_operation_failed, NULL);
  }
}

/*! \brief The method returns the pointer to the {@link mPointInTime} attribute. */

PointInTimeSettings *AerosolOpticalPropertiesProduct::getPointInTime() const {
  try {
    return static_cast<PointInTimeSettings *>(&mPointInTime);
  } catch (...) {
    throw SmartMet::Spine::Exception(BCP, exception_operation_failed, NULL);
  }
}

/*! \brief The method returns the pointer to the {@link mHorizontal} attribute. */

HorizontalSettings *AerosolOpticalPropertiesProduct::getHorizontal() const {
  try {
    return static_cast<HorizontalSettings *>(&mHorizontal);
  } catch (...) {
    throw SmartMet::Spine::Exception(BCP, exception_operation_failed, NULL);
  }
}

void AerosolOpticalPropertiesProduct::setParameterAerosolOptical(ParameterAerosolOpticalSettings &parameterAerosolOptical) {
  try {
    mParameterAerosolOptical = parameterAerosolOptical;
  } catch (...) {
    throw SmartMet::Spine::Exception(BCP, exception_operation_failed, NULL);
  }
}

void AerosolOpticalPropertiesProduct::setPointInTime(PointInTimeSettings &pointInTime) {
  try {
    mPointInTime = pointInTime;
  } catch (...) {
    throw SmartMet::Spine::Exception(BCP, exception_operation_failed, NULL);
  }
}

void AerosolOpticalPropertiesProduct::setHorizontal(HorizontalSettings &horizontal) {
  try {
    mHorizontal = horizontal;
  } catch (...) {
    throw SmartMet::Spine::Exception(BCP, exception_operation_failed, NULL);
  }
}

} // namespace GRIB2
} // namespace SmartMet
