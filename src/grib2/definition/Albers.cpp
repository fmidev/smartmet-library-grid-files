// ***********************************************************************
//                      DO NOT EDIT THIS FILE !!!
// ***********************************************************************
//   This file is automatically generated from the grib_api templates. All
//   changes will be overridden. If you want to do permanent changes then
//   you should write them into the 'AlbersImpl.*' files.
// ***********************************************************************

#include "Albers.h"
#include "../../common/GeneralDefinitions.h"
#include "../../common/GeneralFunctions.h"
#include <macgyver/Hash.h>
#include <iostream>
#include <macgyver/Exception.h>

namespace SmartMet {
namespace GRIB2 {

/*! \brief The constructor of the class. */

Albers::Albers() {
  try {
    mProjectionCentreFlag = 0;
  } catch (...) {
    throw Fmi::Exception(BCP, "Operation failed", nullptr);
  }
}

/*! \brief The destructor of the class. */

Albers::~Albers() {
}

/*! \brief The method reads and initializes all data related to the current object.

        \param memoryReader  This object controls the access to the memory mapped file.
*/

void Albers::read(MemoryReader &memoryReader) {
  try {
    mEarthShape.read(memoryReader);
    mNx = memoryReader.read_UInt32_opt();
    mNy = memoryReader.read_UInt32_opt();
    mLatitudeOfFirstGridPoint = memoryReader.read_Int32_opt();
    mLongitudeOfFirstGridPoint = memoryReader.read_UInt32_opt();
    mResolution.read(memoryReader);
    mLaD = memoryReader.read_Int32_opt();
    mLoV = memoryReader.read_UInt32_opt();
    mXDirectionGridLength = memoryReader.read_UInt32_opt();
    mYDirectionGridLength = memoryReader.read_UInt32_opt();
    mProjectionCentreFlag = memoryReader.read_uint8();
    mScanningMode.read(memoryReader);
    mLatin1 = memoryReader.read_Int32_opt();
    mLatin2 = memoryReader.read_UInt32_opt();
    mLatitudeOfTheSouthernPoleOfProjection = memoryReader.read_Int32_opt();
    mLongitudeOfTheSouthernPoleOfProjection = memoryReader.read_UInt32_opt();
  } catch (...) {
    throw Fmi::Exception(BCP, "Operation failed", nullptr);
  }
}

/*! \brief The method writes all data related to the current object.

        \param dataWriter  This object is used for writing the object data.
*/

void Albers::write(DataWriter &dataWriter) {
  try {
    mEarthShape.write(dataWriter);
    dataWriter << mNx;
    dataWriter << mNy;
    dataWriter << mLatitudeOfFirstGridPoint;
    dataWriter << mLongitudeOfFirstGridPoint;
    mResolution.write(dataWriter);
    dataWriter << mLaD;
    dataWriter << mLoV;
    dataWriter << mXDirectionGridLength;
    dataWriter << mYDirectionGridLength;
    dataWriter << mProjectionCentreFlag;
    mScanningMode.write(dataWriter);
    dataWriter << mLatin1;
    dataWriter << mLatin2;
    dataWriter << mLatitudeOfTheSouthernPoleOfProjection;
    dataWriter << mLongitudeOfTheSouthernPoleOfProjection;
  } catch (...) {
    throw Fmi::Exception(BCP, "Operation failed", nullptr);
  }
}

/*! \brief The method is used for collecting the current class attributeList.

    \param prefix         The prefix of the each attributeList parameter.
    \param attributeList  The attributeList storage.
*/

void Albers::getAttributeList(const std::string &prefix, T::AttributeList &attributeList) const {
  try {
    char name[300];
    sprintf(name, "%sAlbers.", prefix.c_str());
    mEarthShape.getAttributeList(name, attributeList);
    sprintf(name, "%sAlbers.Nx", prefix.c_str());
    attributeList.addAttribute(name, toString(mNx));
    sprintf(name, "%sAlbers.Ny", prefix.c_str());
    attributeList.addAttribute(name, toString(mNy));
    sprintf(name, "%sAlbers.LatitudeOfFirstGridPoint", prefix.c_str());
    attributeList.addAttribute(name, toString(mLatitudeOfFirstGridPoint));
    sprintf(name, "%sAlbers.LongitudeOfFirstGridPoint", prefix.c_str());
    attributeList.addAttribute(name, toString(mLongitudeOfFirstGridPoint));
    sprintf(name, "%sAlbers.", prefix.c_str());
    mResolution.getAttributeList(name, attributeList);
    sprintf(name, "%sAlbers.LaD", prefix.c_str());
    attributeList.addAttribute(name, toString(mLaD));
    sprintf(name, "%sAlbers.LoV", prefix.c_str());
    attributeList.addAttribute(name, toString(mLoV));
    sprintf(name, "%sAlbers.XDirectionGridLength", prefix.c_str());
    attributeList.addAttribute(name, toString(mXDirectionGridLength));
    sprintf(name, "%sAlbers.YDirectionGridLength", prefix.c_str());
    attributeList.addAttribute(name, toString(mYDirectionGridLength));
    sprintf(name, "%sAlbers.ProjectionCentreFlag", prefix.c_str());
    attributeList.addAttribute(name, toString(mProjectionCentreFlag));
    sprintf(name, "%sAlbers.", prefix.c_str());
    mScanningMode.getAttributeList(name, attributeList);
    sprintf(name, "%sAlbers.Latin1", prefix.c_str());
    attributeList.addAttribute(name, toString(mLatin1));
    sprintf(name, "%sAlbers.Latin2", prefix.c_str());
    attributeList.addAttribute(name, toString(mLatin2));
    sprintf(name, "%sAlbers.LatitudeOfTheSouthernPoleOfProjection", prefix.c_str());
    attributeList.addAttribute(name, toString(mLatitudeOfTheSouthernPoleOfProjection));
    sprintf(name, "%sAlbers.LongitudeOfTheSouthernPoleOfProjection", prefix.c_str());
    attributeList.addAttribute(name, toString(mLongitudeOfTheSouthernPoleOfProjection));
  } catch (...) {
    throw Fmi::Exception(BCP, "Operation failed", nullptr);
  }
}

/*! \brief The method is used for getting attribute values by their names.

    \param attributeName  The name of the attribute.
    \param attributeValue The value of the attribute (string).
*/

bool Albers::getAttributeValue(const char *attributeName, std::string &attributeValue) const {
  try {
    if (attributeName == nullptr)
      return false;
    if (mEarthShape.getAttributeValue(attributeName, attributeValue))
      return true;
    if (strcasecmp(attributeName, "Nx") == 0) {
      attributeValue = toString(mNx);
      return true;
    }
    if (strcasecmp(attributeName, "Ny") == 0) {
      attributeValue = toString(mNy);
      return true;
    }
    if (strcasecmp(attributeName, "LatitudeOfFirstGridPoint") == 0) {
      attributeValue = toString(mLatitudeOfFirstGridPoint);
      return true;
    }
    if (strcasecmp(attributeName, "LongitudeOfFirstGridPoint") == 0) {
      attributeValue = toString(mLongitudeOfFirstGridPoint);
      return true;
    }
    if (mResolution.getAttributeValue(attributeName, attributeValue))
      return true;
    if (strcasecmp(attributeName, "LaD") == 0) {
      attributeValue = toString(mLaD);
      return true;
    }
    if (strcasecmp(attributeName, "LoV") == 0) {
      attributeValue = toString(mLoV);
      return true;
    }
    if (strcasecmp(attributeName, "XDirectionGridLength") == 0) {
      attributeValue = toString(mXDirectionGridLength);
      return true;
    }
    if (strcasecmp(attributeName, "YDirectionGridLength") == 0) {
      attributeValue = toString(mYDirectionGridLength);
      return true;
    }
    if (strcasecmp(attributeName, "ProjectionCentreFlag") == 0) {
      attributeValue = toString(mProjectionCentreFlag);
      return true;
    }
    if (mScanningMode.getAttributeValue(attributeName, attributeValue))
      return true;
    if (strcasecmp(attributeName, "Latin1") == 0) {
      attributeValue = toString(mLatin1);
      return true;
    }
    if (strcasecmp(attributeName, "Latin2") == 0) {
      attributeValue = toString(mLatin2);
      return true;
    }
    if (strcasecmp(attributeName, "LatitudeOfTheSouthernPoleOfProjection") == 0) {
      attributeValue = toString(mLatitudeOfTheSouthernPoleOfProjection);
      return true;
    }
    if (strcasecmp(attributeName, "LongitudeOfTheSouthernPoleOfProjection") == 0) {
      attributeValue = toString(mLongitudeOfTheSouthernPoleOfProjection);
      return true;
    }
    return false;
  } catch (...) {
    throw Fmi::Exception(BCP, "Operation failed", nullptr);
  }
}

/*! \brief The method is used for checking if the attribute value matches to the given value.

    \param attributeName  The name of the attribute.
    \param attributeValue The value of the attribute (string).
*/

bool Albers::hasAttributeValue(const char *attributeName, const char *attributeValue) const {
  try {
    if (attributeName == nullptr || attributeValue == nullptr)
      return false;
    if (mEarthShape.hasAttributeValue(attributeName, attributeValue))
      return true;
    if (strcasecmp(attributeName, "Nx") == 0 && strcasecmp(attributeValue, toString(mNx).c_str()) == 0)
      return true;
    if (strcasecmp(attributeName, "Ny") == 0 && strcasecmp(attributeValue, toString(mNy).c_str()) == 0)
      return true;
    if (strcasecmp(attributeName, "LatitudeOfFirstGridPoint") == 0 && strcasecmp(attributeValue, toString(mLatitudeOfFirstGridPoint).c_str()) == 0)
      return true;
    if (strcasecmp(attributeName, "LongitudeOfFirstGridPoint") == 0 && strcasecmp(attributeValue, toString(mLongitudeOfFirstGridPoint).c_str()) == 0)
      return true;
    if (mResolution.hasAttributeValue(attributeName, attributeValue))
      return true;
    if (strcasecmp(attributeName, "LaD") == 0 && strcasecmp(attributeValue, toString(mLaD).c_str()) == 0)
      return true;
    if (strcasecmp(attributeName, "LoV") == 0 && strcasecmp(attributeValue, toString(mLoV).c_str()) == 0)
      return true;
    if (strcasecmp(attributeName, "XDirectionGridLength") == 0 && strcasecmp(attributeValue, toString(mXDirectionGridLength).c_str()) == 0)
      return true;
    if (strcasecmp(attributeName, "YDirectionGridLength") == 0 && strcasecmp(attributeValue, toString(mYDirectionGridLength).c_str()) == 0)
      return true;
    if (strcasecmp(attributeName, "ProjectionCentreFlag") == 0 && strcasecmp(attributeValue, toString(mProjectionCentreFlag).c_str()) == 0)
      return true;
    if (mScanningMode.hasAttributeValue(attributeName, attributeValue))
      return true;
    if (strcasecmp(attributeName, "Latin1") == 0 && strcasecmp(attributeValue, toString(mLatin1).c_str()) == 0)
      return true;
    if (strcasecmp(attributeName, "Latin2") == 0 && strcasecmp(attributeValue, toString(mLatin2).c_str()) == 0)
      return true;
    if (strcasecmp(attributeName, "LatitudeOfTheSouthernPoleOfProjection") == 0 && strcasecmp(attributeValue, toString(mLatitudeOfTheSouthernPoleOfProjection).c_str()) == 0)
      return true;
    if (strcasecmp(attributeName, "LongitudeOfTheSouthernPoleOfProjection") == 0 && strcasecmp(attributeValue, toString(mLongitudeOfTheSouthernPoleOfProjection).c_str()) == 0)
      return true;
    return false;
  } catch (...) {
    throw Fmi::Exception(BCP, "Operation failed", nullptr);
  }
}

/*! \brief The method prints the content of the current object into the given stream.

    \param ostream      The output stream.
    \param level        The print level (used when printing multi-level structures).
    \param optionFlags  The printing options expressed in flag-bits.
*/

void Albers::print(std::ostream &stream, uint level, uint optionFlags) const {
  try {
    stream << space(level) << "Albers\n";
    mEarthShape.print(stream, level + 1, optionFlags);
    stream << space(level) << "- Nx = " << toString(mNx) << "\n";
    stream << space(level) << "- Ny = " << toString(mNy) << "\n";
    stream << space(level) << "- LatitudeOfFirstGridPoint = " << toString(mLatitudeOfFirstGridPoint) << "\n";
    stream << space(level) << "- LongitudeOfFirstGridPoint = " << toString(mLongitudeOfFirstGridPoint) << "\n";
    mResolution.print(stream, level + 1, optionFlags);
    stream << space(level) << "- LaD = " << toString(mLaD) << "\n";
    stream << space(level) << "- LoV = " << toString(mLoV) << "\n";
    stream << space(level) << "- XDirectionGridLength = " << toString(mXDirectionGridLength) << "\n";
    stream << space(level) << "- YDirectionGridLength = " << toString(mYDirectionGridLength) << "\n";
    stream << space(level) << "- ProjectionCentreFlag = " << toString(mProjectionCentreFlag) << "\n";
    mScanningMode.print(stream, level + 1, optionFlags);
    stream << space(level) << "- Latin1 = " << toString(mLatin1) << "\n";
    stream << space(level) << "- Latin2 = " << toString(mLatin2) << "\n";
    stream << space(level) << "- LatitudeOfTheSouthernPoleOfProjection = " << toString(mLatitudeOfTheSouthernPoleOfProjection) << "\n";
    stream << space(level) << "- LongitudeOfTheSouthernPoleOfProjection = " << toString(mLongitudeOfTheSouthernPoleOfProjection) << "\n";
  } catch (...) {
    throw Fmi::Exception(BCP, "Operation failed", nullptr);
  }
}

/*! \brief The method counts the hash value of the current object. */

T::Hash Albers::countHash() const {
  try {
    std::size_t seed = 0;
    if (mNx)
      Fmi::hash_merge(seed, *mNx);
    if (mNy)
      Fmi::hash_merge(seed, *mNy);
    if (mLatitudeOfFirstGridPoint)
      Fmi::hash_merge(seed, *mLatitudeOfFirstGridPoint);
    if (mLongitudeOfFirstGridPoint)
      Fmi::hash_merge(seed, *mLongitudeOfFirstGridPoint);
    if (mLaD)
      Fmi::hash_merge(seed, *mLaD);
    if (mLoV)
      Fmi::hash_merge(seed, *mLoV);
    if (mXDirectionGridLength)
      Fmi::hash_merge(seed, *mXDirectionGridLength);
    if (mYDirectionGridLength)
      Fmi::hash_merge(seed, *mYDirectionGridLength);
    Fmi::hash_merge(seed, mProjectionCentreFlag);
    if (mLatin1)
      Fmi::hash_merge(seed, *mLatin1);
    if (mLatin2)
      Fmi::hash_merge(seed, *mLatin2);
    if (mLatitudeOfTheSouthernPoleOfProjection)
      Fmi::hash_merge(seed, *mLatitudeOfTheSouthernPoleOfProjection);
    if (mLongitudeOfTheSouthernPoleOfProjection)
      Fmi::hash_merge(seed, *mLongitudeOfTheSouthernPoleOfProjection);
    return seed;
  } catch (...) {
    throw Fmi::Exception(BCP, "Operation failed", nullptr);
  }
}

/*! \brief The method return the template number of the current class. */

uint Albers::getTemplateNumber() const {
  return 31;
}

GridDefinition *Albers::createGridDefinition() const {
  try {
    return static_cast<GridDefinition *>(new Albers(*this));
  } catch (...) {
    throw Fmi::Exception(BCP, "Operation failed", nullptr);
  }
}

/*! \brief The method returns the pointer to the {@link mEarthShape} attribute. */

EarthShapeSettings *Albers::getEarthShape() const {
  try {
    return static_cast<EarthShapeSettings *>(&mEarthShape);
  } catch (...) {
    throw Fmi::Exception(BCP, "Operation failed", nullptr);
  }
}

/*! \brief The method returns the value of the {@link mNx} attribute. */

const T::UInt32_opt &Albers::getNx() const {
  try {
    return mNx;
  } catch (...) {
    throw Fmi::Exception(BCP, "Operation failed", nullptr);
  }
}

/*! \brief The method returns the value of the {@link mNy} attribute. */

const T::UInt32_opt &Albers::getNy() const {
  try {
    return mNy;
  } catch (...) {
    throw Fmi::Exception(BCP, "Operation failed", nullptr);
  }
}

/*! \brief The method returns the value of the {@link mLatitudeOfFirstGridPoint} attribute. */

const T::Int32_opt &Albers::getLatitudeOfFirstGridPoint() const {
  try {
    return mLatitudeOfFirstGridPoint;
  } catch (...) {
    throw Fmi::Exception(BCP, "Operation failed", nullptr);
  }
}

/*! \brief The method returns the value of the {@link mLongitudeOfFirstGridPoint} attribute. */

const T::UInt32_opt &Albers::getLongitudeOfFirstGridPoint() const {
  try {
    return mLongitudeOfFirstGridPoint;
  } catch (...) {
    throw Fmi::Exception(BCP, "Operation failed", nullptr);
  }
}

/*! \brief The method returns the pointer to the {@link mResolution} attribute. */

ResolutionSettings *Albers::getResolution() const {
  try {
    return static_cast<ResolutionSettings *>(&mResolution);
  } catch (...) {
    throw Fmi::Exception(BCP, "Operation failed", nullptr);
  }
}

/*! \brief The method returns the value of the {@link mLaD} attribute. */

const T::Int32_opt &Albers::getLaD() const {
  try {
    return mLaD;
  } catch (...) {
    throw Fmi::Exception(BCP, "Operation failed", nullptr);
  }
}

/*! \brief The method returns the value of the {@link mLoV} attribute. */

const T::UInt32_opt &Albers::getLoV() const {
  try {
    return mLoV;
  } catch (...) {
    throw Fmi::Exception(BCP, "Operation failed", nullptr);
  }
}

/*! \brief The method returns the value of the {@link mXDirectionGridLength} attribute. */

const T::UInt32_opt &Albers::getXDirectionGridLength() const {
  try {
    return mXDirectionGridLength;
  } catch (...) {
    throw Fmi::Exception(BCP, "Operation failed", nullptr);
  }
}

/*! \brief The method returns the value of the {@link mYDirectionGridLength} attribute. */

const T::UInt32_opt &Albers::getYDirectionGridLength() const {
  try {
    return mYDirectionGridLength;
  } catch (...) {
    throw Fmi::Exception(BCP, "Operation failed", nullptr);
  }
}

/*! \brief The method returns the value of the {@link mProjectionCentreFlag} attribute. */

std::uint8_t Albers::getProjectionCentreFlag() const {
  try {
    return mProjectionCentreFlag;
  } catch (...) {
    throw Fmi::Exception(BCP, "Operation failed", nullptr);
  }
}

/*! \brief The method returns the pointer to the {@link mScanningMode} attribute. */

ScanningModeSettings *Albers::getScanningMode() const {
  try {
    return static_cast<ScanningModeSettings *>(&mScanningMode);
  } catch (...) {
    throw Fmi::Exception(BCP, "Operation failed", nullptr);
  }
}

/*! \brief The method returns the value of the {@link mLatin1} attribute. */

const T::Int32_opt &Albers::getLatin1() const {
  try {
    return mLatin1;
  } catch (...) {
    throw Fmi::Exception(BCP, "Operation failed", nullptr);
  }
}

/*! \brief The method returns the value of the {@link mLatin2} attribute. */

const T::UInt32_opt &Albers::getLatin2() const {
  try {
    return mLatin2;
  } catch (...) {
    throw Fmi::Exception(BCP, "Operation failed", nullptr);
  }
}

/*! \brief The method returns the value of the {@link mLatitudeOfTheSouthernPoleOfProjection} attribute. */

const T::Int32_opt &Albers::getLatitudeOfTheSouthernPoleOfProjection() const {
  try {
    return mLatitudeOfTheSouthernPoleOfProjection;
  } catch (...) {
    throw Fmi::Exception(BCP, "Operation failed", nullptr);
  }
}

/*! \brief The method returns the value of the {@link mLongitudeOfTheSouthernPoleOfProjection} attribute. */

const T::UInt32_opt &Albers::getLongitudeOfTheSouthernPoleOfProjection() const {
  try {
    return mLongitudeOfTheSouthernPoleOfProjection;
  } catch (...) {
    throw Fmi::Exception(BCP, "Operation failed", nullptr);
  }
}

void Albers::setEarthShape(EarthShapeSettings &earthShape) {
  try {
    mEarthShape = earthShape;
  } catch (...) {
    throw Fmi::Exception(BCP, "Operation failed", nullptr);
  }
}

void Albers::setNx(T::UInt32_opt nx) {
  try {
    mNx = nx;
  } catch (...) {
    throw Fmi::Exception(BCP, "Operation failed", nullptr);
  }
}

void Albers::setNy(T::UInt32_opt ny) {
  try {
    mNy = ny;
  } catch (...) {
    throw Fmi::Exception(BCP, "Operation failed", nullptr);
  }
}

void Albers::setLatitudeOfFirstGridPoint(T::Int32_opt latitudeOfFirstGridPoint) {
  try {
    mLatitudeOfFirstGridPoint = latitudeOfFirstGridPoint;
  } catch (...) {
    throw Fmi::Exception(BCP, "Operation failed", nullptr);
  }
}

void Albers::setLongitudeOfFirstGridPoint(T::UInt32_opt longitudeOfFirstGridPoint) {
  try {
    mLongitudeOfFirstGridPoint = longitudeOfFirstGridPoint;
  } catch (...) {
    throw Fmi::Exception(BCP, "Operation failed", nullptr);
  }
}

void Albers::setResolution(ResolutionSettings &resolution) {
  try {
    mResolution = resolution;
  } catch (...) {
    throw Fmi::Exception(BCP, "Operation failed", nullptr);
  }
}

void Albers::setLaD(T::Int32_opt laD) {
  try {
    mLaD = laD;
  } catch (...) {
    throw Fmi::Exception(BCP, "Operation failed", nullptr);
  }
}

void Albers::setLoV(T::UInt32_opt loV) {
  try {
    mLoV = loV;
  } catch (...) {
    throw Fmi::Exception(BCP, "Operation failed", nullptr);
  }
}

void Albers::setXDirectionGridLength(T::UInt32_opt xDirectionGridLength) {
  try {
    mXDirectionGridLength = xDirectionGridLength;
  } catch (...) {
    throw Fmi::Exception(BCP, "Operation failed", nullptr);
  }
}

void Albers::setYDirectionGridLength(T::UInt32_opt yDirectionGridLength) {
  try {
    mYDirectionGridLength = yDirectionGridLength;
  } catch (...) {
    throw Fmi::Exception(BCP, "Operation failed", nullptr);
  }
}

void Albers::setProjectionCentreFlag(std::uint8_t projectionCentreFlag) {
  try {
    mProjectionCentreFlag = projectionCentreFlag;
  } catch (...) {
    throw Fmi::Exception(BCP, "Operation failed", nullptr);
  }
}

void Albers::setScanningMode(ScanningModeSettings &scanningMode) {
  try {
    mScanningMode = scanningMode;
  } catch (...) {
    throw Fmi::Exception(BCP, "Operation failed", nullptr);
  }
}

void Albers::setLatin1(T::Int32_opt latin1) {
  try {
    mLatin1 = latin1;
  } catch (...) {
    throw Fmi::Exception(BCP, "Operation failed", nullptr);
  }
}

void Albers::setLatin2(T::UInt32_opt latin2) {
  try {
    mLatin2 = latin2;
  } catch (...) {
    throw Fmi::Exception(BCP, "Operation failed", nullptr);
  }
}

void Albers::setLatitudeOfTheSouthernPoleOfProjection(T::Int32_opt latitudeOfTheSouthernPoleOfProjection) {
  try {
    mLatitudeOfTheSouthernPoleOfProjection = latitudeOfTheSouthernPoleOfProjection;
  } catch (...) {
    throw Fmi::Exception(BCP, "Operation failed", nullptr);
  }
}

void Albers::setLongitudeOfTheSouthernPoleOfProjection(T::UInt32_opt longitudeOfTheSouthernPoleOfProjection) {
  try {
    mLongitudeOfTheSouthernPoleOfProjection = longitudeOfTheSouthernPoleOfProjection;
  } catch (...) {
    throw Fmi::Exception(BCP, "Operation failed", nullptr);
  }
}

} // namespace GRIB2
} // namespace SmartMet
