// ***********************************************************************
//                      DO NOT EDIT THIS FILE !!!
// ***********************************************************************
//   This file is automatically generated from the grib_api templates. All
//   changes will be overridden. If you want to do permanent changes then
//   you should write them into the
//   'ComplexDifferenceGridDataRepresentationImpl.*' files.
// ***********************************************************************

#pragma once
#include "common/AttributeList.h"
#include "common/MemoryReader.h"
#include "grib2/RepresentationDefinition.h"
#include "grib2/definition/OriginalValuesSettings.h"
#include "grib2/definition/PackingSettings.h"
#include "grid/Typedefs.h"

namespace SmartMet {
namespace GRIB2 {
/*! \brief The class is automatically created from the template (5.3).*/

class ComplexDifferenceGridDataRepresentation
    : public RepresentationDefinition {
public:
  ComplexDifferenceGridDataRepresentation();
  virtual ~ComplexDifferenceGridDataRepresentation();

  virtual void read(MemoryReader &memoryReader);
  virtual void getAttributeList(std::string prefix,
                                T::AttributeList &attributeList) const;
  virtual void print(std::ostream &stream, uint level, uint optionFlags) const;
  virtual T::Hash countHash();

  const PackingSettings *getPacking() const;
  const OriginalValuesSettings *getOriginalValues() const;
  const T::UInt8_opt &getGroupSplittingMethodUsed() const;
  const T::UInt8_opt &getMissingValueManagementUsed() const;
  const T::UInt32_opt &getPrimaryMissingValueSubstitute() const;
  const T::UInt32_opt &getSecondaryMissingValueSubstitute() const;
  const T::UInt32_opt &getNumberOfGroupsOfDataValues() const;
  const T::UInt8_opt &getReferenceForGroupWidths() const;
  const T::UInt8_opt &getNumberOfBitsUsedForTheGroupWidths() const;
  const T::UInt32_opt &getReferenceForGroupLengths() const;
  const T::UInt8_opt &getLengthIncrementForTheGroupLengths() const;
  const T::UInt32_opt &getTrueLengthOfLastGroup() const;
  const T::UInt8_opt &getNumberOfBitsForScaledGroupLengths() const;
  const T::UInt8_opt &getOrderOfSpatialDifferencing() const;
  const T::UInt8_opt &getNumberOfOctetsExtraDescriptors() const;

protected:
  // # Copyright 2005-2015 ECMWF.
  // #
  // # This software is licensed under the terms of the Apache Licence Version
  // 2.0
  // # which can be obtained at http://www.apache.org/licenses/LICENSE-2.0.
  // #
  // # In applying this licence, ECMWF does not waive the privileges and
  // immunities granted to it by
  // # virtue of its status as an intergovernmental organisation nor does it
  // submit to any jurisdiction.
  // #
  //
  //
  // # START 2/template.5.3
  // ----------------------------------------------------------------------
  // # TEMPLATE 5.3, Grid point data - complex packing and spatial differencing
  //
  // include "template.5.packing.def";

  PackingSettings mPacking;

  // include "template.5.original_values.def";

  OriginalValuesSettings mOriginalValues;

  //
  //
  // #  Group splitting method used
  // codetable[1] groupSplittingMethodUsed ('5.4.table',masterDir,localDir);

  T::UInt8_opt mGroupSplittingMethodUsed;

  //
  // #  Missing value management used
  // codetable[1] missingValueManagementUsed ('5.5.table',masterDir,localDir);

  T::UInt8_opt mMissingValueManagementUsed;

  //
  // #  Primary missing value substitute
  // unsigned[4] primaryMissingValueSubstitute ;

  T::UInt32_opt mPrimaryMissingValueSubstitute;

  //
  // #  Secondary missing value substitute
  // unsigned[4] secondaryMissingValueSubstitute ;

  T::UInt32_opt mSecondaryMissingValueSubstitute;

  //
  // #  NG - Number of groups of data values into which field is split
  // unsigned[4] numberOfGroupsOfDataValues ;

  T::UInt32_opt mNumberOfGroupsOfDataValues;

  //
  // alias NG =  numberOfGroupsOfDataValues;
  // #  Reference for group widths
  // # NOTE 12 NOT FOUND
  // unsigned[1] referenceForGroupWidths ;

  T::UInt8_opt mReferenceForGroupWidths;

  //
  // #  Number of bits used for the group widths
  // # (after the reference value in octet 36 has been removed)
  // unsigned[1] numberOfBitsUsedForTheGroupWidths ;

  T::UInt8_opt mNumberOfBitsUsedForTheGroupWidths;

  //
  // #  Reference for group lengths
  // # NOTE 13 NOT FOUND
  // unsigned[4] referenceForGroupLengths ;

  T::UInt32_opt mReferenceForGroupLengths;

  //
  // #  Length increment for the group lengths
  // # NOTE 14 NOT FOUND
  // unsigned[1] lengthIncrementForTheGroupLengths ;

  T::UInt8_opt mLengthIncrementForTheGroupLengths;

  //
  // #  True length of last group
  // unsigned[4] trueLengthOfLastGroup ;

  T::UInt32_opt mTrueLengthOfLastGroup;

  //
  // #  Number of bits used for the scaled group lengths
  // # (after subtraction of the reference value given in octets 38-41 and
  // division
  // # by the length increment given in octet 42)
  // unsigned[1] numberOfBitsForScaledGroupLengths ;

  T::UInt8_opt mNumberOfBitsForScaledGroupLengths;

  // alias
  // numberOfBitsUsedForTheScaledGroupLengths=numberOfBitsForScaledGroupLengths;
  //
  // #  Order of spatial differencing
  // codetable[1] orderOfSpatialDifferencing ('5.6.table',masterDir,localDir);

  T::UInt8_opt mOrderOfSpatialDifferencing;

  //
  // #  Number of octets required in the Data Section to specify extra
  // descriptors needed for spatial differencing
  // # (octets 6-ww in Data Template 7.3)
  // unsigned[1] numberOfOctetsExtraDescriptors ;

  T::UInt8_opt mNumberOfOctetsExtraDescriptors;

  //
  //
  // # END   2/template.5.3
  // ----------------------------------------------------------------------
};

} // namespace GRIB2
} // namespace SmartMet
