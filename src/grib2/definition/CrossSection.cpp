// ***********************************************************************
//                      DO NOT EDIT THIS FILE !!!
// ***********************************************************************
//   This file is automatically generated from the grib_api templates. All
//   changes will be overridden. If you want to do permanent changes then
//   you should write them into the 'CrossSectionImpl.*' files.
// ***********************************************************************

#include "grib2/definition/CrossSection.h"
#include "common/Exception.h"
#include "common/GeneralFunctions.h"
#include "common/GeneralDefinitions.h"
#include <iostream>
#include <boost/functional/hash.hpp>

namespace SmartMet {
namespace GRIB2 {

/*! \brief The constructor of the class. */

CrossSection::CrossSection() {
  try {
  } catch (...) {
    throw SmartMet::Spine::Exception(BCP, "Operation failed!", NULL);
  }
}

/*! \brief The destructor of the class. */

CrossSection::~CrossSection() {
  try {
  } catch (...) {
    throw SmartMet::Spine::Exception(BCP, "Operation failed!", NULL);
  }
}

/*! \brief The method reads and initializes all data related to the current
   object.

        \param memoryReader  This object controls the access to the memory
   mapped file.
*/

void CrossSection::read(MemoryReader &memoryReader) {
  try {
    mEarthShape.read(memoryReader);
    mNumberOfHorizontalPoints = memoryReader.read_UInt32_opt();
    mBasicAngleOfTheInitialProductionDomain = memoryReader.read_UInt32_opt();
    mSubdivisionsOfBasicAngle = memoryReader.read_UInt32_opt();
    mLatitudeOfFirstGridPoint = memoryReader.read_Int32_opt();
    mLongitudeOfFirstGridPoint = memoryReader.read_UInt32_opt();
    mScanningMode.read(memoryReader);
    mLatitudeOfLastGridPoint = memoryReader.read_Int32_opt();
    mLongitudeOfLastGridPoint = memoryReader.read_UInt32_opt();
    mTypeOfHorizontalLine = memoryReader.read_UInt8_opt();
    mNumberOfVerticalPoints = memoryReader.read_UInt16_opt();
    mMeaningOfVerticalCoordinate = memoryReader.read_UInt8_opt();
    mVerticalCoordinate = memoryReader.read_UInt8_opt();
    mNC = memoryReader.read_UInt16_opt();
  } catch (...) {
    throw SmartMet::Spine::Exception(BCP, "Operation failed!", NULL);
  }
}

/*! \brief The method is used for collecting the current class attributeList.

    \param prefix         The prefix of the each attributeList parameter.
    \param attributeList  The attributeList storage.
*/

void CrossSection::getAttributeList(std::string prefix,
                                    T::AttributeList &attributeList) const {
  try {
    char name[300];
    sprintf(name, "%sCrossSection.", prefix.c_str());
    mEarthShape.getAttributeList(name, attributeList);
    sprintf(name, "%sCrossSection.NumberOfHorizontalPoints", prefix.c_str());
    attributeList.addAttribute(name, toString(mNumberOfHorizontalPoints));
    sprintf(name, "%sCrossSection.BasicAngleOfTheInitialProductionDomain",
            prefix.c_str());
    attributeList.addAttribute(
        name, toString(mBasicAngleOfTheInitialProductionDomain));
    sprintf(name, "%sCrossSection.SubdivisionsOfBasicAngle", prefix.c_str());
    attributeList.addAttribute(name, toString(mSubdivisionsOfBasicAngle));
    sprintf(name, "%sCrossSection.LatitudeOfFirstGridPoint", prefix.c_str());
    attributeList.addAttribute(name, toString(mLatitudeOfFirstGridPoint));
    sprintf(name, "%sCrossSection.LongitudeOfFirstGridPoint", prefix.c_str());
    attributeList.addAttribute(name, toString(mLongitudeOfFirstGridPoint));
    sprintf(name, "%sCrossSection.", prefix.c_str());
    mScanningMode.getAttributeList(name, attributeList);
    sprintf(name, "%sCrossSection.LatitudeOfLastGridPoint", prefix.c_str());
    attributeList.addAttribute(name, toString(mLatitudeOfLastGridPoint));
    sprintf(name, "%sCrossSection.LongitudeOfLastGridPoint", prefix.c_str());
    attributeList.addAttribute(name, toString(mLongitudeOfLastGridPoint));
    sprintf(name, "%sCrossSection.TypeOfHorizontalLine", prefix.c_str());
    attributeList.addAttribute(name, toString(mTypeOfHorizontalLine));
    sprintf(name, "%sCrossSection.NumberOfVerticalPoints", prefix.c_str());
    attributeList.addAttribute(name, toString(mNumberOfVerticalPoints));
    sprintf(name, "%sCrossSection.MeaningOfVerticalCoordinate", prefix.c_str());
    attributeList.addAttribute(name, toString(mMeaningOfVerticalCoordinate));
    sprintf(name, "%sCrossSection.VerticalCoordinate", prefix.c_str());
    attributeList.addAttribute(name, toString(mVerticalCoordinate));
    sprintf(name, "%sCrossSection.NC", prefix.c_str());
    attributeList.addAttribute(name, toString(mNC));
  } catch (...) {
    throw SmartMet::Spine::Exception(BCP, "Operation failed!", NULL);
  }
}

/*! \brief The method prints the content of the current object into the given
   stream.

    \param ostream      The output stream.
    \param level        The print level (used when printing multi-level
   structures).
    \param optionFlags  The printing options expressed in flag-bits.
*/

void CrossSection::print(std::ostream &stream, uint level,
                         uint optionFlags) const {
  try {
    stream << space(level) << "CrossSection\n";
    mEarthShape.print(stream, level + 1, optionFlags);
    stream << space(level) << "- NumberOfHorizontalPoints = "
           << toString(mNumberOfHorizontalPoints) << "\n";
    stream << space(level) << "- BasicAngleOfTheInitialProductionDomain = "
           << toString(mBasicAngleOfTheInitialProductionDomain) << "\n";
    stream << space(level) << "- SubdivisionsOfBasicAngle = "
           << toString(mSubdivisionsOfBasicAngle) << "\n";
    stream << space(level) << "- LatitudeOfFirstGridPoint = "
           << toString(mLatitudeOfFirstGridPoint) << "\n";
    stream << space(level) << "- LongitudeOfFirstGridPoint = "
           << toString(mLongitudeOfFirstGridPoint) << "\n";
    mScanningMode.print(stream, level + 1, optionFlags);
    stream << space(level) << "- LatitudeOfLastGridPoint = "
           << toString(mLatitudeOfLastGridPoint) << "\n";
    stream << space(level) << "- LongitudeOfLastGridPoint = "
           << toString(mLongitudeOfLastGridPoint) << "\n";
    stream << space(level)
           << "- TypeOfHorizontalLine = " << toString(mTypeOfHorizontalLine)
           << "\n";
    stream << space(level)
           << "- NumberOfVerticalPoints = " << toString(mNumberOfVerticalPoints)
           << "\n";
    stream << space(level) << "- MeaningOfVerticalCoordinate = "
           << toString(mMeaningOfVerticalCoordinate) << "\n";
    stream << space(level)
           << "- VerticalCoordinate = " << toString(mVerticalCoordinate)
           << "\n";
    stream << space(level) << "- NC = " << toString(mNC) << "\n";
  } catch (...) {
    throw SmartMet::Spine::Exception(BCP, "Operation failed!", NULL);
  }
}

/*! \brief The method counts the hash value of the current object. */

T::Hash CrossSection::countHash() {
  try {
    std::size_t seed = 0;
    if (mNumberOfHorizontalPoints)
      boost::hash_combine(seed, *mNumberOfHorizontalPoints);
    if (mBasicAngleOfTheInitialProductionDomain)
      boost::hash_combine(seed, *mBasicAngleOfTheInitialProductionDomain);
    if (mSubdivisionsOfBasicAngle)
      boost::hash_combine(seed, *mSubdivisionsOfBasicAngle);
    if (mLatitudeOfFirstGridPoint)
      boost::hash_combine(seed, *mLatitudeOfFirstGridPoint);
    if (mLongitudeOfFirstGridPoint)
      boost::hash_combine(seed, *mLongitudeOfFirstGridPoint);
    if (mLatitudeOfLastGridPoint)
      boost::hash_combine(seed, *mLatitudeOfLastGridPoint);
    if (mLongitudeOfLastGridPoint)
      boost::hash_combine(seed, *mLongitudeOfLastGridPoint);
    if (mTypeOfHorizontalLine)
      boost::hash_combine(seed, *mTypeOfHorizontalLine);
    if (mNumberOfVerticalPoints)
      boost::hash_combine(seed, *mNumberOfVerticalPoints);
    if (mMeaningOfVerticalCoordinate)
      boost::hash_combine(seed, *mMeaningOfVerticalCoordinate);
    if (mVerticalCoordinate)
      boost::hash_combine(seed, *mVerticalCoordinate);
    if (mNC)
      boost::hash_combine(seed, *mNC);
    boost::hash_combine(seed, mEarthShape.countHash());
    boost::hash_combine(seed, mScanningMode.countHash());
    return seed;
  } catch (...) {
    throw SmartMet::Spine::Exception(BCP, "Operation failed!", NULL);
  }
}

/*! \brief The method returns the pointer to the {@link mEarthShape} attribute.
 */

const EarthShapeSettings *CrossSection::getEarthShape() const {
  try {
    return &mEarthShape;
  } catch (...) {
    throw SmartMet::Spine::Exception(BCP, "Operation failed!", NULL);
  }
}

/*! \brief The method returns the value of the {@link mNumberOfHorizontalPoints}
 * attribute. */

const T::UInt32_opt &CrossSection::getNumberOfHorizontalPoints() const {
  try {
    return mNumberOfHorizontalPoints;
  } catch (...) {
    throw SmartMet::Spine::Exception(BCP, "Operation failed!", NULL);
  }
}

/*! \brief The method returns the value of the {@link
 * mBasicAngleOfTheInitialProductionDomain} attribute. */

const T::UInt32_opt &
CrossSection::getBasicAngleOfTheInitialProductionDomain() const {
  try {
    return mBasicAngleOfTheInitialProductionDomain;
  } catch (...) {
    throw SmartMet::Spine::Exception(BCP, "Operation failed!", NULL);
  }
}

/*! \brief The method returns the value of the {@link mSubdivisionsOfBasicAngle}
 * attribute. */

const T::UInt32_opt &CrossSection::getSubdivisionsOfBasicAngle() const {
  try {
    return mSubdivisionsOfBasicAngle;
  } catch (...) {
    throw SmartMet::Spine::Exception(BCP, "Operation failed!", NULL);
  }
}

/*! \brief The method returns the value of the {@link mLatitudeOfFirstGridPoint}
 * attribute. */

const T::Int32_opt &CrossSection::getLatitudeOfFirstGridPoint() const {
  try {
    return mLatitudeOfFirstGridPoint;
  } catch (...) {
    throw SmartMet::Spine::Exception(BCP, "Operation failed!", NULL);
  }
}

/*! \brief The method returns the value of the {@link
 * mLongitudeOfFirstGridPoint} attribute. */

const T::UInt32_opt &CrossSection::getLongitudeOfFirstGridPoint() const {
  try {
    return mLongitudeOfFirstGridPoint;
  } catch (...) {
    throw SmartMet::Spine::Exception(BCP, "Operation failed!", NULL);
  }
}

/*! \brief The method returns the pointer to the {@link mScanningMode}
 * attribute. */

const ScanningModeSettings *CrossSection::getScanningMode() const {
  try {
    return &mScanningMode;
  } catch (...) {
    throw SmartMet::Spine::Exception(BCP, "Operation failed!", NULL);
  }
}

/*! \brief The method returns the value of the {@link mLatitudeOfLastGridPoint}
 * attribute. */

const T::Int32_opt &CrossSection::getLatitudeOfLastGridPoint() const {
  try {
    return mLatitudeOfLastGridPoint;
  } catch (...) {
    throw SmartMet::Spine::Exception(BCP, "Operation failed!", NULL);
  }
}

/*! \brief The method returns the value of the {@link mLongitudeOfLastGridPoint}
 * attribute. */

const T::UInt32_opt &CrossSection::getLongitudeOfLastGridPoint() const {
  try {
    return mLongitudeOfLastGridPoint;
  } catch (...) {
    throw SmartMet::Spine::Exception(BCP, "Operation failed!", NULL);
  }
}

/*! \brief The method returns the value of the {@link mTypeOfHorizontalLine}
 * attribute. */

const T::UInt8_opt &CrossSection::getTypeOfHorizontalLine() const {
  try {
    return mTypeOfHorizontalLine;
  } catch (...) {
    throw SmartMet::Spine::Exception(BCP, "Operation failed!", NULL);
  }
}

/*! \brief The method returns the value of the {@link mNumberOfVerticalPoints}
 * attribute. */

const T::UInt16_opt &CrossSection::getNumberOfVerticalPoints() const {
  try {
    return mNumberOfVerticalPoints;
  } catch (...) {
    throw SmartMet::Spine::Exception(BCP, "Operation failed!", NULL);
  }
}

/*! \brief The method returns the value of the {@link
 * mMeaningOfVerticalCoordinate} attribute. */

const T::UInt8_opt &CrossSection::getMeaningOfVerticalCoordinate() const {
  try {
    return mMeaningOfVerticalCoordinate;
  } catch (...) {
    throw SmartMet::Spine::Exception(BCP, "Operation failed!", NULL);
  }
}

/*! \brief The method returns the value of the {@link mVerticalCoordinate}
 * attribute. */

const T::UInt8_opt &CrossSection::getVerticalCoordinate() const {
  try {
    return mVerticalCoordinate;
  } catch (...) {
    throw SmartMet::Spine::Exception(BCP, "Operation failed!", NULL);
  }
}

/*! \brief The method returns the value of the {@link mNC} attribute. */

const T::UInt16_opt &CrossSection::getNC() const {
  try {
    return mNC;
  } catch (...) {
    throw SmartMet::Spine::Exception(BCP, "Operation failed!", NULL);
  }
}

} // namespace GRIB2
} // namespace SmartMet
