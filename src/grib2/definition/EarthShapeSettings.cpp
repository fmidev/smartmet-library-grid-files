// ***********************************************************************
//                      DO NOT EDIT THIS FILE !!!
// ***********************************************************************
//   This file is automatically generated from the grib_api templates. All
//   changes will be overridden. If you want to do permanent changes then
//   you should write them into the 'EarthShapeSettingsImpl.*' files.
// ***********************************************************************

#include "EarthShapeSettings.h"
#include "../../common/GeneralDefinitions.h"
#include "../../common/GeneralFunctions.h"
#include <macgyver/Hash.h>
#include <iostream>
#include <macgyver/Exception.h>

namespace SmartMet {
namespace GRIB2 {

/*! \brief The constructor of the class. */

EarthShapeSettings::EarthShapeSettings() {
  try {
  } catch (...) {
    throw Fmi::Exception(BCP, "Operation failed", nullptr);
  }
}

/*! \brief The destructor of the class. */

EarthShapeSettings::~EarthShapeSettings() {
}

/*! \brief The method reads and initializes all data related to the current object.

        \param memoryReader  This object controls the access to the memory mapped file.
*/

void EarthShapeSettings::read(MemoryReader &memoryReader) {
  try {
    mShapeOfTheEarth = memoryReader.read_UInt8_opt();
    mScaleFactorOfRadiusOfSphericalEarth = memoryReader.read_UInt8_opt();
    mScaledValueOfRadiusOfSphericalEarth = memoryReader.read_UInt32_opt();
    mScaleFactorOfEarthMajorAxis = memoryReader.read_UInt8_opt();
    mScaledValueOfEarthMajorAxis = memoryReader.read_UInt32_opt();
    mScaleFactorOfEarthMinorAxis = memoryReader.read_UInt8_opt();
    mScaledValueOfEarthMinorAxis = memoryReader.read_UInt32_opt();
  } catch (...) {
    throw Fmi::Exception(BCP, "Operation failed", nullptr);
  }
}

/*! \brief The method writes all data related to the current object.

        \param dataWriter  This object is used for writing the object data.
*/

void EarthShapeSettings::write(DataWriter &dataWriter) {
  try {
    dataWriter << mShapeOfTheEarth;
    dataWriter << mScaleFactorOfRadiusOfSphericalEarth;
    dataWriter << mScaledValueOfRadiusOfSphericalEarth;
    dataWriter << mScaleFactorOfEarthMajorAxis;
    dataWriter << mScaledValueOfEarthMajorAxis;
    dataWriter << mScaleFactorOfEarthMinorAxis;
    dataWriter << mScaledValueOfEarthMinorAxis;
  } catch (...) {
    throw Fmi::Exception(BCP, "Operation failed", nullptr);
  }
}

/*! \brief The method is used for collecting the current class attributeList.

    \param prefix         The prefix of the each attributeList parameter.
    \param attributeList  The attributeList storage.
*/

void EarthShapeSettings::getAttributeList(const std::string &prefix, T::AttributeList &attributeList) const {
  try {
    char name[300];
    sprintf(name, "%sEarthShapeSettings.ShapeOfTheEarth", prefix.c_str());
    attributeList.addAttribute(name, toString(mShapeOfTheEarth));
    sprintf(name, "%sEarthShapeSettings.ScaleFactorOfRadiusOfSphericalEarth", prefix.c_str());
    attributeList.addAttribute(name, toString(mScaleFactorOfRadiusOfSphericalEarth));
    sprintf(name, "%sEarthShapeSettings.ScaledValueOfRadiusOfSphericalEarth", prefix.c_str());
    attributeList.addAttribute(name, toString(mScaledValueOfRadiusOfSphericalEarth));
    sprintf(name, "%sEarthShapeSettings.ScaleFactorOfEarthMajorAxis", prefix.c_str());
    attributeList.addAttribute(name, toString(mScaleFactorOfEarthMajorAxis));
    sprintf(name, "%sEarthShapeSettings.ScaledValueOfEarthMajorAxis", prefix.c_str());
    attributeList.addAttribute(name, toString(mScaledValueOfEarthMajorAxis));
    sprintf(name, "%sEarthShapeSettings.ScaleFactorOfEarthMinorAxis", prefix.c_str());
    attributeList.addAttribute(name, toString(mScaleFactorOfEarthMinorAxis));
    sprintf(name, "%sEarthShapeSettings.ScaledValueOfEarthMinorAxis", prefix.c_str());
    attributeList.addAttribute(name, toString(mScaledValueOfEarthMinorAxis));
  } catch (...) {
    throw Fmi::Exception(BCP, "Operation failed", nullptr);
  }
}

/*! \brief The method is used for getting attribute values by their names.

    \param attributeName  The name of the attribute.
    \param attributeValue The value of the attribute (string).
*/

bool EarthShapeSettings::getAttributeValue(const char *attributeName, std::string &attributeValue) const {
  try {
    if (attributeName == nullptr)
      return false;
    if (strcasecmp(attributeName, "ShapeOfTheEarth") == 0) {
      attributeValue = toString(mShapeOfTheEarth);
      return true;
    }
    if (strcasecmp(attributeName, "ScaleFactorOfRadiusOfSphericalEarth") == 0) {
      attributeValue = toString(mScaleFactorOfRadiusOfSphericalEarth);
      return true;
    }
    if (strcasecmp(attributeName, "ScaledValueOfRadiusOfSphericalEarth") == 0) {
      attributeValue = toString(mScaledValueOfRadiusOfSphericalEarth);
      return true;
    }
    if (strcasecmp(attributeName, "ScaleFactorOfEarthMajorAxis") == 0) {
      attributeValue = toString(mScaleFactorOfEarthMajorAxis);
      return true;
    }
    if (strcasecmp(attributeName, "ScaledValueOfEarthMajorAxis") == 0) {
      attributeValue = toString(mScaledValueOfEarthMajorAxis);
      return true;
    }
    if (strcasecmp(attributeName, "ScaleFactorOfEarthMinorAxis") == 0) {
      attributeValue = toString(mScaleFactorOfEarthMinorAxis);
      return true;
    }
    if (strcasecmp(attributeName, "ScaledValueOfEarthMinorAxis") == 0) {
      attributeValue = toString(mScaledValueOfEarthMinorAxis);
      return true;
    }
    return false;
  } catch (...) {
    throw Fmi::Exception(BCP, "Operation failed", nullptr);
  }
}

/*! \brief The method is used for checking if the attribute value matches to the given value.

    \param attributeName  The name of the attribute.
    \param attributeValue The value of the attribute (string).
*/

bool EarthShapeSettings::hasAttributeValue(const char *attributeName, const char *attributeValue) const {
  try {
    if (attributeName == nullptr || attributeValue == nullptr)
      return false;
    if (strcasecmp(attributeName, "ShapeOfTheEarth") == 0 && strcasecmp(attributeValue, toString(mShapeOfTheEarth).c_str()) == 0)
      return true;
    if (strcasecmp(attributeName, "ScaleFactorOfRadiusOfSphericalEarth") == 0 && strcasecmp(attributeValue, toString(mScaleFactorOfRadiusOfSphericalEarth).c_str()) == 0)
      return true;
    if (strcasecmp(attributeName, "ScaledValueOfRadiusOfSphericalEarth") == 0 && strcasecmp(attributeValue, toString(mScaledValueOfRadiusOfSphericalEarth).c_str()) == 0)
      return true;
    if (strcasecmp(attributeName, "ScaleFactorOfEarthMajorAxis") == 0 && strcasecmp(attributeValue, toString(mScaleFactorOfEarthMajorAxis).c_str()) == 0)
      return true;
    if (strcasecmp(attributeName, "ScaledValueOfEarthMajorAxis") == 0 && strcasecmp(attributeValue, toString(mScaledValueOfEarthMajorAxis).c_str()) == 0)
      return true;
    if (strcasecmp(attributeName, "ScaleFactorOfEarthMinorAxis") == 0 && strcasecmp(attributeValue, toString(mScaleFactorOfEarthMinorAxis).c_str()) == 0)
      return true;
    if (strcasecmp(attributeName, "ScaledValueOfEarthMinorAxis") == 0 && strcasecmp(attributeValue, toString(mScaledValueOfEarthMinorAxis).c_str()) == 0)
      return true;
    return false;
  } catch (...) {
    throw Fmi::Exception(BCP, "Operation failed", nullptr);
  }
}

/*! \brief The method prints the content of the current object into the given stream.

    \param ostream      The output stream.
    \param level        The print level (used when printing multi-level structures).
    \param optionFlags  The printing options expressed in flag-bits.
*/

void EarthShapeSettings::print(std::ostream &stream, uint level, uint optionFlags) const {
  try {
    stream << space(level) << "EarthShapeSettings\n";
    stream << space(level) << "- ShapeOfTheEarth = " << toString(mShapeOfTheEarth) << "\n";
    stream << space(level) << "- ScaleFactorOfRadiusOfSphericalEarth = " << toString(mScaleFactorOfRadiusOfSphericalEarth) << "\n";
    stream << space(level) << "- ScaledValueOfRadiusOfSphericalEarth = " << toString(mScaledValueOfRadiusOfSphericalEarth) << "\n";
    stream << space(level) << "- ScaleFactorOfEarthMajorAxis = " << toString(mScaleFactorOfEarthMajorAxis) << "\n";
    stream << space(level) << "- ScaledValueOfEarthMajorAxis = " << toString(mScaledValueOfEarthMajorAxis) << "\n";
    stream << space(level) << "- ScaleFactorOfEarthMinorAxis = " << toString(mScaleFactorOfEarthMinorAxis) << "\n";
    stream << space(level) << "- ScaledValueOfEarthMinorAxis = " << toString(mScaledValueOfEarthMinorAxis) << "\n";
  } catch (...) {
    throw Fmi::Exception(BCP, "Operation failed", nullptr);
  }
}

/*! \brief The method counts the hash value of the current object. */

T::Hash EarthShapeSettings::countHash() const {
  try {
    std::size_t seed = 0;
    if (mShapeOfTheEarth)
      Fmi::hash_merge(seed, *mShapeOfTheEarth);
    if (mScaleFactorOfRadiusOfSphericalEarth)
      Fmi::hash_merge(seed, *mScaleFactorOfRadiusOfSphericalEarth);
    if (mScaledValueOfRadiusOfSphericalEarth)
      Fmi::hash_merge(seed, *mScaledValueOfRadiusOfSphericalEarth);
    if (mScaleFactorOfEarthMajorAxis)
      Fmi::hash_merge(seed, *mScaleFactorOfEarthMajorAxis);
    if (mScaledValueOfEarthMajorAxis)
      Fmi::hash_merge(seed, *mScaledValueOfEarthMajorAxis);
    if (mScaleFactorOfEarthMinorAxis)
      Fmi::hash_merge(seed, *mScaleFactorOfEarthMinorAxis);
    if (mScaledValueOfEarthMinorAxis)
      Fmi::hash_merge(seed, *mScaledValueOfEarthMinorAxis);
    return seed;
  } catch (...) {
    throw Fmi::Exception(BCP, "Operation failed", nullptr);
  }
}

/*! \brief The method returns the value of the {@link mShapeOfTheEarth} attribute. */

const T::UInt8_opt &EarthShapeSettings::getShapeOfTheEarth() const {
  try {
    return mShapeOfTheEarth;
  } catch (...) {
    throw Fmi::Exception(BCP, "Operation failed", nullptr);
  }
}

/*! \brief The method returns the value of the {@link mScaleFactorOfRadiusOfSphericalEarth} attribute. */

const T::UInt8_opt &EarthShapeSettings::getScaleFactorOfRadiusOfSphericalEarth() const {
  try {
    return mScaleFactorOfRadiusOfSphericalEarth;
  } catch (...) {
    throw Fmi::Exception(BCP, "Operation failed", nullptr);
  }
}

/*! \brief The method returns the value of the {@link mScaledValueOfRadiusOfSphericalEarth} attribute. */

const T::UInt32_opt &EarthShapeSettings::getScaledValueOfRadiusOfSphericalEarth() const {
  try {
    return mScaledValueOfRadiusOfSphericalEarth;
  } catch (...) {
    throw Fmi::Exception(BCP, "Operation failed", nullptr);
  }
}

/*! \brief The method returns the value of the {@link mScaleFactorOfEarthMajorAxis} attribute. */

const T::UInt8_opt &EarthShapeSettings::getScaleFactorOfEarthMajorAxis() const {
  try {
    return mScaleFactorOfEarthMajorAxis;
  } catch (...) {
    throw Fmi::Exception(BCP, "Operation failed", nullptr);
  }
}

/*! \brief The method returns the value of the {@link mScaledValueOfEarthMajorAxis} attribute. */

const T::UInt32_opt &EarthShapeSettings::getScaledValueOfEarthMajorAxis() const {
  try {
    return mScaledValueOfEarthMajorAxis;
  } catch (...) {
    throw Fmi::Exception(BCP, "Operation failed", nullptr);
  }
}

/*! \brief The method returns the value of the {@link mScaleFactorOfEarthMinorAxis} attribute. */

const T::UInt8_opt &EarthShapeSettings::getScaleFactorOfEarthMinorAxis() const {
  try {
    return mScaleFactorOfEarthMinorAxis;
  } catch (...) {
    throw Fmi::Exception(BCP, "Operation failed", nullptr);
  }
}

/*! \brief The method returns the value of the {@link mScaledValueOfEarthMinorAxis} attribute. */

const T::UInt32_opt &EarthShapeSettings::getScaledValueOfEarthMinorAxis() const {
  try {
    return mScaledValueOfEarthMinorAxis;
  } catch (...) {
    throw Fmi::Exception(BCP, "Operation failed", nullptr);
  }
}

void EarthShapeSettings::setShapeOfTheEarth(T::UInt8_opt shapeOfTheEarth) {
  try {
    mShapeOfTheEarth = shapeOfTheEarth;
  } catch (...) {
    throw Fmi::Exception(BCP, "Operation failed", nullptr);
  }
}

void EarthShapeSettings::setScaleFactorOfRadiusOfSphericalEarth(T::UInt8_opt scaleFactorOfRadiusOfSphericalEarth) {
  try {
    mScaleFactorOfRadiusOfSphericalEarth = scaleFactorOfRadiusOfSphericalEarth;
  } catch (...) {
    throw Fmi::Exception(BCP, "Operation failed", nullptr);
  }
}

void EarthShapeSettings::setScaledValueOfRadiusOfSphericalEarth(T::UInt32_opt scaledValueOfRadiusOfSphericalEarth) {
  try {
    mScaledValueOfRadiusOfSphericalEarth = scaledValueOfRadiusOfSphericalEarth;
  } catch (...) {
    throw Fmi::Exception(BCP, "Operation failed", nullptr);
  }
}

void EarthShapeSettings::setScaleFactorOfEarthMajorAxis(T::UInt8_opt scaleFactorOfEarthMajorAxis) {
  try {
    mScaleFactorOfEarthMajorAxis = scaleFactorOfEarthMajorAxis;
  } catch (...) {
    throw Fmi::Exception(BCP, "Operation failed", nullptr);
  }
}

void EarthShapeSettings::setScaledValueOfEarthMajorAxis(T::UInt32_opt scaledValueOfEarthMajorAxis) {
  try {
    mScaledValueOfEarthMajorAxis = scaledValueOfEarthMajorAxis;
  } catch (...) {
    throw Fmi::Exception(BCP, "Operation failed", nullptr);
  }
}

void EarthShapeSettings::setScaleFactorOfEarthMinorAxis(T::UInt8_opt scaleFactorOfEarthMinorAxis) {
  try {
    mScaleFactorOfEarthMinorAxis = scaleFactorOfEarthMinorAxis;
  } catch (...) {
    throw Fmi::Exception(BCP, "Operation failed", nullptr);
  }
}

void EarthShapeSettings::setScaledValueOfEarthMinorAxis(T::UInt32_opt scaledValueOfEarthMinorAxis) {
  try {
    mScaledValueOfEarthMinorAxis = scaledValueOfEarthMinorAxis;
  } catch (...) {
    throw Fmi::Exception(BCP, "Operation failed", nullptr);
  }
}

} // namespace GRIB2
} // namespace SmartMet
