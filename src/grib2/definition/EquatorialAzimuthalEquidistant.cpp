// ***********************************************************************
//                      DO NOT EDIT THIS FILE !!!
// ***********************************************************************
//   This file is automatically generated from the grib_api templates. All
//   changes will be overridden. If you want to do permanent changes then
//   you should write them into the 'EquatorialAzimuthalEquidistantImpl.*' files.
// ***********************************************************************

#include "EquatorialAzimuthalEquidistant.h"
#include "../../common/GeneralDefinitions.h"
#include "../../common/GeneralFunctions.h"
#include <boost/functional/hash.hpp>
#include <iostream>
#include <macgyver/Exception.h>

namespace SmartMet {
namespace GRIB2 {

/*! \brief The constructor of the class. */

EquatorialAzimuthalEquidistant::EquatorialAzimuthalEquidistant() {
  try {
    mResolutionAndComponentFlags = 0;
  } catch (...) {
    throw Fmi::Exception(BCP, "Operation failed", nullptr);
  }
}

/*! \brief The destructor of the class. */

EquatorialAzimuthalEquidistant::~EquatorialAzimuthalEquidistant() {
}

/*! \brief The method reads and initializes all data related to the current object.

        \param memoryReader  This object controls the access to the memory mapped file.
*/

void EquatorialAzimuthalEquidistant::read(MemoryReader &memoryReader) {
  try {
    mEarthShape.read(memoryReader);
    mNumberOfPointsAlongXAxis = memoryReader.read_UInt32_opt();
    mNumberOfPointsAlongYAxis = memoryReader.read_UInt32_opt();
    mLatitudeOfTangencyPoint = memoryReader.read_Int32_opt();
    mLongitudeOfTangencyPoint = memoryReader.read_UInt32_opt();
    mResolutionAndComponentFlags = memoryReader.read_uint8();
    mDx = memoryReader.read_UInt32_opt();
    mDy = memoryReader.read_UInt32_opt();
    mProjectionCenterFlag = memoryReader.read_UInt8_opt();
    mScanningMode.read(memoryReader);
  } catch (...) {
    throw Fmi::Exception(BCP, "Operation failed", nullptr);
  }
}

/*! \brief The method writes all data related to the current object.

        \param dataWriter  This object is used for writing the object data.
*/

void EquatorialAzimuthalEquidistant::write(DataWriter &dataWriter) {
  try {
    mEarthShape.write(dataWriter);
    dataWriter << mNumberOfPointsAlongXAxis;
    dataWriter << mNumberOfPointsAlongYAxis;
    dataWriter << mLatitudeOfTangencyPoint;
    dataWriter << mLongitudeOfTangencyPoint;
    dataWriter << mResolutionAndComponentFlags;
    dataWriter << mDx;
    dataWriter << mDy;
    dataWriter << mProjectionCenterFlag;
    mScanningMode.write(dataWriter);
  } catch (...) {
    throw Fmi::Exception(BCP, "Operation failed", nullptr);
  }
}

/*! \brief The method is used for collecting the current class attributeList.

    \param prefix         The prefix of the each attributeList parameter.
    \param attributeList  The attributeList storage.
*/

void EquatorialAzimuthalEquidistant::getAttributeList(const std::string &prefix, T::AttributeList &attributeList) const {
  try {
    char name[300];
    sprintf(name, "%sEquatorialAzimuthalEquidistant.", prefix.c_str());
    mEarthShape.getAttributeList(name, attributeList);
    sprintf(name, "%sEquatorialAzimuthalEquidistant.NumberOfPointsAlongXAxis", prefix.c_str());
    attributeList.addAttribute(name, toString(mNumberOfPointsAlongXAxis));
    sprintf(name, "%sEquatorialAzimuthalEquidistant.NumberOfPointsAlongYAxis", prefix.c_str());
    attributeList.addAttribute(name, toString(mNumberOfPointsAlongYAxis));
    sprintf(name, "%sEquatorialAzimuthalEquidistant.LatitudeOfTangencyPoint", prefix.c_str());
    attributeList.addAttribute(name, toString(mLatitudeOfTangencyPoint));
    sprintf(name, "%sEquatorialAzimuthalEquidistant.LongitudeOfTangencyPoint", prefix.c_str());
    attributeList.addAttribute(name, toString(mLongitudeOfTangencyPoint));
    sprintf(name, "%sEquatorialAzimuthalEquidistant.ResolutionAndComponentFlags", prefix.c_str());
    attributeList.addAttribute(name, toString(mResolutionAndComponentFlags));
    sprintf(name, "%sEquatorialAzimuthalEquidistant.Dx", prefix.c_str());
    attributeList.addAttribute(name, toString(mDx));
    sprintf(name, "%sEquatorialAzimuthalEquidistant.Dy", prefix.c_str());
    attributeList.addAttribute(name, toString(mDy));
    sprintf(name, "%sEquatorialAzimuthalEquidistant.ProjectionCenterFlag", prefix.c_str());
    attributeList.addAttribute(name, toString(mProjectionCenterFlag));
    sprintf(name, "%sEquatorialAzimuthalEquidistant.", prefix.c_str());
    mScanningMode.getAttributeList(name, attributeList);
  } catch (...) {
    throw Fmi::Exception(BCP, "Operation failed", nullptr);
  }
}

/*! \brief The method is used for getting attribute values by their names.

    \param attributeName  The name of the attribute.
    \param attributeValue The value of the attribute (string).
*/

bool EquatorialAzimuthalEquidistant::getAttributeValue(const char *attributeName, std::string &attributeValue) const {
  try {
    if (attributeName == nullptr)
      return false;
    if (mEarthShape.getAttributeValue(attributeName, attributeValue))
      return true;
    if (strcasecmp(attributeName, "NumberOfPointsAlongXAxis") == 0) {
      attributeValue = toString(mNumberOfPointsAlongXAxis);
      return true;
    }
    if (strcasecmp(attributeName, "NumberOfPointsAlongYAxis") == 0) {
      attributeValue = toString(mNumberOfPointsAlongYAxis);
      return true;
    }
    if (strcasecmp(attributeName, "LatitudeOfTangencyPoint") == 0) {
      attributeValue = toString(mLatitudeOfTangencyPoint);
      return true;
    }
    if (strcasecmp(attributeName, "LongitudeOfTangencyPoint") == 0) {
      attributeValue = toString(mLongitudeOfTangencyPoint);
      return true;
    }
    if (strcasecmp(attributeName, "ResolutionAndComponentFlags") == 0) {
      attributeValue = toString(mResolutionAndComponentFlags);
      return true;
    }
    if (strcasecmp(attributeName, "Dx") == 0) {
      attributeValue = toString(mDx);
      return true;
    }
    if (strcasecmp(attributeName, "Dy") == 0) {
      attributeValue = toString(mDy);
      return true;
    }
    if (strcasecmp(attributeName, "ProjectionCenterFlag") == 0) {
      attributeValue = toString(mProjectionCenterFlag);
      return true;
    }
    if (mScanningMode.getAttributeValue(attributeName, attributeValue))
      return true;
    return false;
  } catch (...) {
    throw Fmi::Exception(BCP, "Operation failed", nullptr);
  }
}

/*! \brief The method is used for checking if the attribute value matches to the given value.

    \param attributeName  The name of the attribute.
    \param attributeValue The value of the attribute (string).
*/

bool EquatorialAzimuthalEquidistant::hasAttributeValue(const char *attributeName, const char *attributeValue) const {
  try {
    if (attributeName == nullptr || attributeValue == nullptr)
      return false;
    if (mEarthShape.hasAttributeValue(attributeName, attributeValue))
      return true;
    if (strcasecmp(attributeName, "NumberOfPointsAlongXAxis") == 0 && strcasecmp(attributeValue, toString(mNumberOfPointsAlongXAxis).c_str()) == 0)
      return true;
    if (strcasecmp(attributeName, "NumberOfPointsAlongYAxis") == 0 && strcasecmp(attributeValue, toString(mNumberOfPointsAlongYAxis).c_str()) == 0)
      return true;
    if (strcasecmp(attributeName, "LatitudeOfTangencyPoint") == 0 && strcasecmp(attributeValue, toString(mLatitudeOfTangencyPoint).c_str()) == 0)
      return true;
    if (strcasecmp(attributeName, "LongitudeOfTangencyPoint") == 0 && strcasecmp(attributeValue, toString(mLongitudeOfTangencyPoint).c_str()) == 0)
      return true;
    if (strcasecmp(attributeName, "ResolutionAndComponentFlags") == 0 && strcasecmp(attributeValue, toString(mResolutionAndComponentFlags).c_str()) == 0)
      return true;
    if (strcasecmp(attributeName, "Dx") == 0 && strcasecmp(attributeValue, toString(mDx).c_str()) == 0)
      return true;
    if (strcasecmp(attributeName, "Dy") == 0 && strcasecmp(attributeValue, toString(mDy).c_str()) == 0)
      return true;
    if (strcasecmp(attributeName, "ProjectionCenterFlag") == 0 && strcasecmp(attributeValue, toString(mProjectionCenterFlag).c_str()) == 0)
      return true;
    if (mScanningMode.hasAttributeValue(attributeName, attributeValue))
      return true;
    return false;
  } catch (...) {
    throw Fmi::Exception(BCP, "Operation failed", nullptr);
  }
}

/*! \brief The method prints the content of the current object into the given stream.

    \param ostream      The output stream.
    \param level        The print level (used when printing multi-level structures).
    \param optionFlags  The printing options expressed in flag-bits.
*/

void EquatorialAzimuthalEquidistant::print(std::ostream &stream, uint level, uint optionFlags) const {
  try {
    stream << space(level) << "EquatorialAzimuthalEquidistant\n";
    mEarthShape.print(stream, level + 1, optionFlags);
    stream << space(level) << "- NumberOfPointsAlongXAxis = " << toString(mNumberOfPointsAlongXAxis) << "\n";
    stream << space(level) << "- NumberOfPointsAlongYAxis = " << toString(mNumberOfPointsAlongYAxis) << "\n";
    stream << space(level) << "- LatitudeOfTangencyPoint = " << toString(mLatitudeOfTangencyPoint) << "\n";
    stream << space(level) << "- LongitudeOfTangencyPoint = " << toString(mLongitudeOfTangencyPoint) << "\n";
    stream << space(level) << "- ResolutionAndComponentFlags = " << toString(mResolutionAndComponentFlags) << "\n";
    stream << space(level) << "- Dx = " << toString(mDx) << "\n";
    stream << space(level) << "- Dy = " << toString(mDy) << "\n";
    stream << space(level) << "- ProjectionCenterFlag = " << toString(mProjectionCenterFlag) << "\n";
    mScanningMode.print(stream, level + 1, optionFlags);
  } catch (...) {
    throw Fmi::Exception(BCP, "Operation failed", nullptr);
  }
}

/*! \brief The method counts the hash value of the current object. */

T::Hash EquatorialAzimuthalEquidistant::countHash() const {
  try {
    std::size_t seed = 0;
    if (mNumberOfPointsAlongXAxis)
      boost::hash_combine(seed, *mNumberOfPointsAlongXAxis);
    if (mNumberOfPointsAlongYAxis)
      boost::hash_combine(seed, *mNumberOfPointsAlongYAxis);
    if (mLatitudeOfTangencyPoint)
      boost::hash_combine(seed, *mLatitudeOfTangencyPoint);
    if (mLongitudeOfTangencyPoint)
      boost::hash_combine(seed, *mLongitudeOfTangencyPoint);
    boost::hash_combine(seed, mResolutionAndComponentFlags);
    if (mDx)
      boost::hash_combine(seed, *mDx);
    if (mDy)
      boost::hash_combine(seed, *mDy);
    if (mProjectionCenterFlag)
      boost::hash_combine(seed, *mProjectionCenterFlag);
    return seed;
  } catch (...) {
    throw Fmi::Exception(BCP, "Operation failed", nullptr);
  }
}

/*! \brief The method return the template number of the current class. */

uint EquatorialAzimuthalEquidistant::getTemplateNumber() const {
  return 110;
}

GridDefinition *EquatorialAzimuthalEquidistant::createGridDefinition() const {
  try {
    return static_cast<GridDefinition *>(new EquatorialAzimuthalEquidistant(*this));
  } catch (...) {
    throw Fmi::Exception(BCP, "Operation failed", nullptr);
  }
}

/*! \brief The method returns the pointer to the {@link mEarthShape} attribute. */

EarthShapeSettings *EquatorialAzimuthalEquidistant::getEarthShape() const {
  try {
    return static_cast<EarthShapeSettings *>(&mEarthShape);
  } catch (...) {
    throw Fmi::Exception(BCP, "Operation failed", nullptr);
  }
}

/*! \brief The method returns the value of the {@link mNumberOfPointsAlongXAxis} attribute. */

const T::UInt32_opt &EquatorialAzimuthalEquidistant::getNumberOfPointsAlongXAxis() const {
  try {
    return mNumberOfPointsAlongXAxis;
  } catch (...) {
    throw Fmi::Exception(BCP, "Operation failed", nullptr);
  }
}

/*! \brief The method returns the value of the {@link mNumberOfPointsAlongYAxis} attribute. */

const T::UInt32_opt &EquatorialAzimuthalEquidistant::getNumberOfPointsAlongYAxis() const {
  try {
    return mNumberOfPointsAlongYAxis;
  } catch (...) {
    throw Fmi::Exception(BCP, "Operation failed", nullptr);
  }
}

/*! \brief The method returns the value of the {@link mLatitudeOfTangencyPoint} attribute. */

const T::Int32_opt &EquatorialAzimuthalEquidistant::getLatitudeOfTangencyPoint() const {
  try {
    return mLatitudeOfTangencyPoint;
  } catch (...) {
    throw Fmi::Exception(BCP, "Operation failed", nullptr);
  }
}

/*! \brief The method returns the value of the {@link mLongitudeOfTangencyPoint} attribute. */

const T::UInt32_opt &EquatorialAzimuthalEquidistant::getLongitudeOfTangencyPoint() const {
  try {
    return mLongitudeOfTangencyPoint;
  } catch (...) {
    throw Fmi::Exception(BCP, "Operation failed", nullptr);
  }
}

/*! \brief The method returns the value of the {@link mResolutionAndComponentFlags} attribute. */

std::uint8_t EquatorialAzimuthalEquidistant::getResolutionAndComponentFlags() const {
  try {
    return mResolutionAndComponentFlags;
  } catch (...) {
    throw Fmi::Exception(BCP, "Operation failed", nullptr);
  }
}

/*! \brief The method returns the value of the {@link mDx} attribute. */

const T::UInt32_opt &EquatorialAzimuthalEquidistant::getDx() const {
  try {
    return mDx;
  } catch (...) {
    throw Fmi::Exception(BCP, "Operation failed", nullptr);
  }
}

/*! \brief The method returns the value of the {@link mDy} attribute. */

const T::UInt32_opt &EquatorialAzimuthalEquidistant::getDy() const {
  try {
    return mDy;
  } catch (...) {
    throw Fmi::Exception(BCP, "Operation failed", nullptr);
  }
}

/*! \brief The method returns the value of the {@link mProjectionCenterFlag} attribute. */

const T::UInt8_opt &EquatorialAzimuthalEquidistant::getProjectionCenterFlag() const {
  try {
    return mProjectionCenterFlag;
  } catch (...) {
    throw Fmi::Exception(BCP, "Operation failed", nullptr);
  }
}

/*! \brief The method returns the pointer to the {@link mScanningMode} attribute. */

ScanningModeSettings *EquatorialAzimuthalEquidistant::getScanningMode() const {
  try {
    return static_cast<ScanningModeSettings *>(&mScanningMode);
  } catch (...) {
    throw Fmi::Exception(BCP, "Operation failed", nullptr);
  }
}

void EquatorialAzimuthalEquidistant::setEarthShape(EarthShapeSettings &earthShape) {
  try {
    mEarthShape = earthShape;
  } catch (...) {
    throw Fmi::Exception(BCP, "Operation failed", nullptr);
  }
}

void EquatorialAzimuthalEquidistant::setNumberOfPointsAlongXAxis(T::UInt32_opt numberOfPointsAlongXAxis) {
  try {
    mNumberOfPointsAlongXAxis = numberOfPointsAlongXAxis;
  } catch (...) {
    throw Fmi::Exception(BCP, "Operation failed", nullptr);
  }
}

void EquatorialAzimuthalEquidistant::setNumberOfPointsAlongYAxis(T::UInt32_opt numberOfPointsAlongYAxis) {
  try {
    mNumberOfPointsAlongYAxis = numberOfPointsAlongYAxis;
  } catch (...) {
    throw Fmi::Exception(BCP, "Operation failed", nullptr);
  }
}

void EquatorialAzimuthalEquidistant::setLatitudeOfTangencyPoint(T::Int32_opt latitudeOfTangencyPoint) {
  try {
    mLatitudeOfTangencyPoint = latitudeOfTangencyPoint;
  } catch (...) {
    throw Fmi::Exception(BCP, "Operation failed", nullptr);
  }
}

void EquatorialAzimuthalEquidistant::setLongitudeOfTangencyPoint(T::UInt32_opt longitudeOfTangencyPoint) {
  try {
    mLongitudeOfTangencyPoint = longitudeOfTangencyPoint;
  } catch (...) {
    throw Fmi::Exception(BCP, "Operation failed", nullptr);
  }
}

void EquatorialAzimuthalEquidistant::setResolutionAndComponentFlags(std::uint8_t resolutionAndComponentFlags) {
  try {
    mResolutionAndComponentFlags = resolutionAndComponentFlags;
  } catch (...) {
    throw Fmi::Exception(BCP, "Operation failed", nullptr);
  }
}

void EquatorialAzimuthalEquidistant::setDx(T::UInt32_opt dx) {
  try {
    mDx = dx;
  } catch (...) {
    throw Fmi::Exception(BCP, "Operation failed", nullptr);
  }
}

void EquatorialAzimuthalEquidistant::setDy(T::UInt32_opt dy) {
  try {
    mDy = dy;
  } catch (...) {
    throw Fmi::Exception(BCP, "Operation failed", nullptr);
  }
}

void EquatorialAzimuthalEquidistant::setProjectionCenterFlag(T::UInt8_opt projectionCenterFlag) {
  try {
    mProjectionCenterFlag = projectionCenterFlag;
  } catch (...) {
    throw Fmi::Exception(BCP, "Operation failed", nullptr);
  }
}

void EquatorialAzimuthalEquidistant::setScanningMode(ScanningModeSettings &scanningMode) {
  try {
    mScanningMode = scanningMode;
  } catch (...) {
    throw Fmi::Exception(BCP, "Operation failed", nullptr);
  }
}

} // namespace GRIB2
} // namespace SmartMet
