// ***********************************************************************
//                      DO NOT EDIT THIS FILE !!!
// ***********************************************************************
//   This file is automatically generated from the grib_api templates. All
//   changes will be overridden. If you want to do permanent changes then
//   you should write them into the 'HovmollerImpl.*' files.
// ***********************************************************************

#pragma once
#include "../../common/AttributeList.h"
#include "../../common/DataWriter.h"
#include "../../common/MemoryReader.h"
#include "../../grid/Typedefs.h"
#include "../GridDefinition.h"
#include "EarthShapeSettings.h"
#include "ScanningModeSettings.h"

namespace SmartMet {
namespace GRIB2 {
/*! \brief The class is automatically created from the template (3.1100).*/

class Hovmoller : public GridDefinition {
public:
  Hovmoller();
  virtual ~Hovmoller();

  virtual uint getTemplateNumber() const;
  virtual GridDefinition *createGridDefinition() const;
  virtual void read(MemoryReader &memoryReader);
  virtual void write(DataWriter &dataWriter);
  virtual void getAttributeList(const std::string &prefix, T::AttributeList &attributeList) const;
  virtual bool getAttributeValue(const char *attributeName, std::string &attributeValue) const;
  virtual bool hasAttributeValue(const char *attributeName, const char *attributeValue) const;
  virtual void print(std::ostream &stream, uint level, uint optionFlags) const;
  virtual T::Hash countHash();

  EarthShapeSettings *getEarthShape() const;
  void setEarthShape(EarthShapeSettings &earthShape);
  const T::UInt32_opt &getBasicAngleOfTheInitialProductionDomain() const;
  void setBasicAngleOfTheInitialProductionDomain(T::UInt32_opt basicAngleOfTheInitialProductionDomain);
  const T::UInt32_opt &getSubdivisionsOfBasicAngle() const;
  void setSubdivisionsOfBasicAngle(T::UInt32_opt subdivisionsOfBasicAngle);
  const T::Int32_opt &getLatitudeOfFirstGridPoint() const;
  void setLatitudeOfFirstGridPoint(T::Int32_opt latitudeOfFirstGridPoint);
  const T::UInt32_opt &getLongitudeOfFirstGridPoint() const;
  void setLongitudeOfFirstGridPoint(T::UInt32_opt longitudeOfFirstGridPoint);
  ScanningModeSettings *getScanningMode() const;
  void setScanningMode(ScanningModeSettings &scanningMode);
  const T::Int32_opt &getLatitudeOfLastGridPoint() const;
  void setLatitudeOfLastGridPoint(T::Int32_opt latitudeOfLastGridPoint);
  const T::UInt32_opt &getLongitudeOfLastGridPoint() const;
  void setLongitudeOfLastGridPoint(T::UInt32_opt longitudeOfLastGridPoint);
  const T::UInt8_opt &getTypeOfHorizontalLine() const;
  void setTypeOfHorizontalLine(T::UInt8_opt typeOfHorizontalLine);
  const T::UInt32_opt &getNumberOfTimeSteps() const;
  void setNumberOfTimeSteps(T::UInt32_opt numberOfTimeSteps);
  const T::UInt8_opt &getUnitOfOffsetFromReferenceTime() const;
  void setUnitOfOffsetFromReferenceTime(T::UInt8_opt unitOfOffsetFromReferenceTime);
  const T::UInt32_opt &getOffsetFromReferenceOfFirstTime() const;
  void setOffsetFromReferenceOfFirstTime(T::UInt32_opt offsetFromReferenceOfFirstTime);
  const T::UInt8_opt &getTypeOfTimeIncrement() const;
  void setTypeOfTimeIncrement(T::UInt8_opt typeOfTimeIncrement);
  const T::UInt8_opt &getUnitOfTimeIncrement() const;
  void setUnitOfTimeIncrement(T::UInt8_opt unitOfTimeIncrement);
  const T::UInt32_opt &getTimeIncrement() const;
  void setTimeIncrement(T::UInt32_opt timeIncrement);
  const T::UInt16_opt &getYear() const;
  void setYear(T::UInt16_opt year);
  const T::UInt8_opt &getMonth() const;
  void setMonth(T::UInt8_opt month);
  const T::UInt8_opt &getDay() const;
  void setDay(T::UInt8_opt day);
  const T::UInt8_opt &getHour() const;
  void setHour(T::UInt8_opt hour);
  const T::UInt8_opt &getMinute() const;
  void setMinute(T::UInt8_opt minute);
  const T::UInt8_opt &getSecond() const;
  void setSecond(T::UInt8_opt second);

protected:
  // # Copyright 2005-2019 ECMWF.
  //
  // # TEMPLATE 3.1100, Hovmoller diagram grid with points equally spaced on the horizontal
  // include "grib2/template.3.shape_of_the_earth.def";

  mutable EarthShapeSettings mEarthShape;

  //
  // #  Number of horizontal points
  // unsigned[5] numberOfHorizontalPoints : dump ;
  //
  // #  Basic angle of the initial production domain
  // unsigned[4] basicAngleOfTheInitialProductionDomain = 0 : dump ;

  T::UInt32_opt mBasicAngleOfTheInitialProductionDomain;

  //
  // #  Subdivisions of basic angle used to define extreme longitudes and latitudes
  // unsigned[4] subdivisionsOfBasicAngle = missing() : can_be_missing,dump;

  T::UInt32_opt mSubdivisionsOfBasicAngle;

  //
  // #  La1 - latitude of first grid point
  // signed[4] latitudeOfFirstGridPoint : edition_specific,dump;

  T::Int32_opt mLatitudeOfFirstGridPoint;

  //
  // alias La1  =latitudeOfFirstGridPoint;
  // #  Lo1 - longitude of first grid point
  // unsigned[4] longitudeOfFirstGridPoint : edition_specific,dump;

  T::UInt32_opt mLongitudeOfFirstGridPoint;

  //
  // alias Lo1  =longitudeOfFirstGridPoint;
  //
  // include "grib2/template.3.scanning_mode.def";

  mutable ScanningModeSettings mScanningMode;

  //
  // #  La2 - latitude of last grid point
  // signed[4] latitudeOfLastGridPoint : edition_specific,dump;

  T::Int32_opt mLatitudeOfLastGridPoint;

  //
  // alias La2  = latitudeOfLastGridPoint;
  // #  Lo2 - longitude of last grid point
  // unsigned[4] longitudeOfLastGridPoint : edition_specific,dump ;

  T::UInt32_opt mLongitudeOfLastGridPoint;

  //
  // alias Lo2  = longitudeOfLastGridPoint;
  // #  Type of horizontal line
  // codetable[1] typeOfHorizontalLine ('3.20.table',masterDir,localDir) : dump;

  T::UInt8_opt mTypeOfHorizontalLine;

  //
  // #  NT - Number of time steps
  // unsigned[4] numberOfTimeSteps : dump;

  T::UInt32_opt mNumberOfTimeSteps;

  //
  // alias NT =  numberOfTimeSteps;
  // #  Unit of offset from reference time
  // codetable[1] unitOfOffsetFromReferenceTime ('4.4.table',masterDir,localDir) : dump;

  T::UInt8_opt mUnitOfOffsetFromReferenceTime;

  //
  // #  Offset from reference of first time
  // # (negative value when first bit set)
  // unsigned[4] offsetFromReferenceOfFirstTime ;

  T::UInt32_opt mOffsetFromReferenceOfFirstTime;

  //
  // #  Type of time increment
  // codetable[1] typeOfTimeIncrement ('4.11.table',masterDir,localDir) : dump;

  T::UInt8_opt mTypeOfTimeIncrement;

  //
  // #  Unit of time increment
  // codetable[1] unitOfTimeIncrement ('4.4.table',masterDir,localDir) : dump;

  T::UInt8_opt mUnitOfTimeIncrement;

  //
  // #  Time increment
  // # (negative value when first bit set)
  // unsigned[4] timeIncrement : dump ;

  T::UInt32_opt mTimeIncrement;

  //
  // #  Year
  // unsigned[2] year  : dump;

  T::UInt16_opt mYear;

  //
  // #  Month
  // unsigned[1] month  : dump;

  T::UInt8_opt mMonth;

  //
  // #  Day
  // unsigned[1] day  : dump;

  T::UInt8_opt mDay;

  //
  // #  Hour
  // unsigned[1] hour  : dump;

  T::UInt8_opt mHour;

  //
  // #  Minute
  // unsigned[1] minute  : dump;

  T::UInt8_opt mMinute;

  //
  // #  Second
  // unsigned[1] second  : dump;

  T::UInt8_opt mSecond;

  //
};

} // namespace GRIB2
} // namespace SmartMet
