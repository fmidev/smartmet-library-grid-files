// ***********************************************************************
//                      DO NOT EDIT THIS FILE !!!
// ***********************************************************************
//   This file is automatically generated from the grib_api templates. All
//   changes will be overridden. If you want to do permanent changes then
//   you should write them into the 'LambertConformalImpl.*' files.
// ***********************************************************************

#include "LambertConformal.h"
#include "../../common/Exception.h"
#include "../../common/GeneralDefinitions.h"
#include "../../common/GeneralFunctions.h"
#include <boost/functional/hash.hpp>
#include <iostream>

namespace SmartMet {
namespace GRIB2 {

/*! \brief The constructor of the class. */

LambertConformal::LambertConformal() {
  try {
    mProjectionCentreFlag = 0;
  } catch (...) {
    throw SmartMet::Spine::Exception(BCP, exception_operation_failed, nullptr);
  }
}

/*! \brief The copy constructor of the class. */

LambertConformal::LambertConformal(const LambertConformal &other) : GridDefinition(other) {
  try {
    mEarthShape = other.mEarthShape;
    mNx = other.mNx;
    mNy = other.mNy;
    mLatitudeOfFirstGridPoint = other.mLatitudeOfFirstGridPoint;
    mLongitudeOfFirstGridPoint = other.mLongitudeOfFirstGridPoint;
    mResolution = other.mResolution;
    mLaD = other.mLaD;
    mLoV = other.mLoV;
    mDx = other.mDx;
    mDy = other.mDy;
    mProjectionCentreFlag = other.mProjectionCentreFlag;
    mScanningMode = other.mScanningMode;
    mLatin1 = other.mLatin1;
    mLatin2 = other.mLatin2;
    mLatitudeOfSouthernPole = other.mLatitudeOfSouthernPole;
    mLongitudeOfSouthernPole = other.mLongitudeOfSouthernPole;
  } catch (...) {
    throw SmartMet::Spine::Exception(BCP, exception_operation_failed, nullptr);
  }
}

/*! \brief The destructor of the class. */

LambertConformal::~LambertConformal() {
}

/*! \brief The method reads and initializes all data related to the current object.

        \param memoryReader  This object controls the access to the memory mapped file.
*/

void LambertConformal::read(MemoryReader &memoryReader) {
  try {
    mEarthShape.read(memoryReader);
    mNx = memoryReader.read_UInt32_opt();
    mNy = memoryReader.read_UInt32_opt();
    mLatitudeOfFirstGridPoint = memoryReader.read_Int32_opt();
    mLongitudeOfFirstGridPoint = memoryReader.read_UInt32_opt();
    mResolution.read(memoryReader);
    mLaD = memoryReader.read_Int32_opt();
    mLoV = memoryReader.read_UInt32_opt();
    mDx = memoryReader.read_UInt32_opt();
    mDy = memoryReader.read_UInt32_opt();
    mProjectionCentreFlag = memoryReader.read_uint8();
    mScanningMode.read(memoryReader);
    mLatin1 = memoryReader.read_Int32_opt();
    mLatin2 = memoryReader.read_Int32_opt();
    mLatitudeOfSouthernPole = memoryReader.read_Int32_opt();
    mLongitudeOfSouthernPole = memoryReader.read_UInt32_opt();
  } catch (...) {
    throw SmartMet::Spine::Exception(BCP, exception_operation_failed, nullptr);
  }
}

/*! \brief The method writes all data related to the current object.

        \param dataWriter  This object is used for writing the object data.
*/

void LambertConformal::write(DataWriter &dataWriter) {
  try {
    mEarthShape.write(dataWriter);
    dataWriter << mNx;
    dataWriter << mNy;
    dataWriter << mLatitudeOfFirstGridPoint;
    dataWriter << mLongitudeOfFirstGridPoint;
    mResolution.write(dataWriter);
    dataWriter << mLaD;
    dataWriter << mLoV;
    dataWriter << mDx;
    dataWriter << mDy;
    dataWriter << mProjectionCentreFlag;
    mScanningMode.write(dataWriter);
    dataWriter << mLatin1;
    dataWriter << mLatin2;
    dataWriter << mLatitudeOfSouthernPole;
    dataWriter << mLongitudeOfSouthernPole;
  } catch (...) {
    throw SmartMet::Spine::Exception(BCP, exception_operation_failed, nullptr);
  }
}

/*! \brief The method is used for collecting the current class attributeList.

    \param prefix         The prefix of the each attributeList parameter.
    \param attributeList  The attributeList storage.
*/

void LambertConformal::getAttributeList(std::string prefix, T::AttributeList &attributeList) const {
  try {
    char name[300];
    sprintf(name, "%sLambertConformal.", prefix.c_str());
    mEarthShape.getAttributeList(name, attributeList);
    sprintf(name, "%sLambertConformal.Nx", prefix.c_str());
    attributeList.addAttribute(name, toString(mNx));
    sprintf(name, "%sLambertConformal.Ny", prefix.c_str());
    attributeList.addAttribute(name, toString(mNy));
    sprintf(name, "%sLambertConformal.LatitudeOfFirstGridPoint", prefix.c_str());
    attributeList.addAttribute(name, toString(mLatitudeOfFirstGridPoint));
    sprintf(name, "%sLambertConformal.LongitudeOfFirstGridPoint", prefix.c_str());
    attributeList.addAttribute(name, toString(mLongitudeOfFirstGridPoint));
    sprintf(name, "%sLambertConformal.", prefix.c_str());
    mResolution.getAttributeList(name, attributeList);
    sprintf(name, "%sLambertConformal.LaD", prefix.c_str());
    attributeList.addAttribute(name, toString(mLaD));
    sprintf(name, "%sLambertConformal.LoV", prefix.c_str());
    attributeList.addAttribute(name, toString(mLoV));
    sprintf(name, "%sLambertConformal.Dx", prefix.c_str());
    attributeList.addAttribute(name, toString(mDx));
    sprintf(name, "%sLambertConformal.Dy", prefix.c_str());
    attributeList.addAttribute(name, toString(mDy));
    sprintf(name, "%sLambertConformal.ProjectionCentreFlag", prefix.c_str());
    attributeList.addAttribute(name, toString(mProjectionCentreFlag));
    sprintf(name, "%sLambertConformal.", prefix.c_str());
    mScanningMode.getAttributeList(name, attributeList);
    sprintf(name, "%sLambertConformal.Latin1", prefix.c_str());
    attributeList.addAttribute(name, toString(mLatin1));
    sprintf(name, "%sLambertConformal.Latin2", prefix.c_str());
    attributeList.addAttribute(name, toString(mLatin2));
    sprintf(name, "%sLambertConformal.LatitudeOfSouthernPole", prefix.c_str());
    attributeList.addAttribute(name, toString(mLatitudeOfSouthernPole));
    sprintf(name, "%sLambertConformal.LongitudeOfSouthernPole", prefix.c_str());
    attributeList.addAttribute(name, toString(mLongitudeOfSouthernPole));
  } catch (...) {
    throw SmartMet::Spine::Exception(BCP, exception_operation_failed, nullptr);
  }
}

/*! \brief The method prints the content of the current object into the given stream.

    \param ostream      The output stream.
    \param level        The print level (used when printing multi-level structures).
    \param optionFlags  The printing options expressed in flag-bits.
*/

void LambertConformal::print(std::ostream &stream, uint level, uint optionFlags) const {
  try {
    stream << space(level) << "LambertConformal\n";
    mEarthShape.print(stream, level + 1, optionFlags);
    stream << space(level) << "- Nx = " << toString(mNx) << "\n";
    stream << space(level) << "- Ny = " << toString(mNy) << "\n";
    stream << space(level) << "- LatitudeOfFirstGridPoint = " << toString(mLatitudeOfFirstGridPoint) << "\n";
    stream << space(level) << "- LongitudeOfFirstGridPoint = " << toString(mLongitudeOfFirstGridPoint) << "\n";
    mResolution.print(stream, level + 1, optionFlags);
    stream << space(level) << "- LaD = " << toString(mLaD) << "\n";
    stream << space(level) << "- LoV = " << toString(mLoV) << "\n";
    stream << space(level) << "- Dx = " << toString(mDx) << "\n";
    stream << space(level) << "- Dy = " << toString(mDy) << "\n";
    stream << space(level) << "- ProjectionCentreFlag = " << toString(mProjectionCentreFlag) << "\n";
    mScanningMode.print(stream, level + 1, optionFlags);
    stream << space(level) << "- Latin1 = " << toString(mLatin1) << "\n";
    stream << space(level) << "- Latin2 = " << toString(mLatin2) << "\n";
    stream << space(level) << "- LatitudeOfSouthernPole = " << toString(mLatitudeOfSouthernPole) << "\n";
    stream << space(level) << "- LongitudeOfSouthernPole = " << toString(mLongitudeOfSouthernPole) << "\n";
  } catch (...) {
    throw SmartMet::Spine::Exception(BCP, exception_operation_failed, nullptr);
  }
}

/*! \brief The method counts the hash value of the current object. */

T::Hash LambertConformal::countHash() {
  try {
    std::size_t seed = 0;
    if (mNx)
      boost::hash_combine(seed, *mNx);
    if (mNy)
      boost::hash_combine(seed, *mNy);
    if (mLatitudeOfFirstGridPoint)
      boost::hash_combine(seed, *mLatitudeOfFirstGridPoint);
    if (mLongitudeOfFirstGridPoint)
      boost::hash_combine(seed, *mLongitudeOfFirstGridPoint);
    if (mLaD)
      boost::hash_combine(seed, *mLaD);
    if (mLoV)
      boost::hash_combine(seed, *mLoV);
    if (mDx)
      boost::hash_combine(seed, *mDx);
    if (mDy)
      boost::hash_combine(seed, *mDy);
    boost::hash_combine(seed, mProjectionCentreFlag);
    if (mLatin1)
      boost::hash_combine(seed, *mLatin1);
    if (mLatin2)
      boost::hash_combine(seed, *mLatin2);
    if (mLatitudeOfSouthernPole)
      boost::hash_combine(seed, *mLatitudeOfSouthernPole);
    if (mLongitudeOfSouthernPole)
      boost::hash_combine(seed, *mLongitudeOfSouthernPole);
    // boost::hash_combine(seed,mEarthShape.countHash());
    // boost::hash_combine(seed,mResolution.countHash());
    boost::hash_combine(seed, mScanningMode.countHash());
    return seed;
  } catch (...) {
    throw SmartMet::Spine::Exception(BCP, exception_operation_failed, nullptr);
  }
}

/*! \brief The method return the template number of the current class. */

uint LambertConformal::getTemplateNumber() const {
  return 30;
}

GridDefinition *LambertConformal::createGridDefinition() const {
  try {
    return (GridDefinition *)new LambertConformal(*this);
  } catch (...) {
    throw SmartMet::Spine::Exception(BCP, exception_operation_failed, nullptr);
  }
}

/*! \brief The method returns the pointer to the {@link mEarthShape} attribute. */

EarthShapeSettings *LambertConformal::getEarthShape() const {
  try {
    return (EarthShapeSettings *)&mEarthShape;
  } catch (...) {
    throw SmartMet::Spine::Exception(BCP, exception_operation_failed, nullptr);
  }
}

/*! \brief The method returns the value of the {@link mNx} attribute. */

const T::UInt32_opt &LambertConformal::getNx() const {
  try {
    return mNx;
  } catch (...) {
    throw SmartMet::Spine::Exception(BCP, exception_operation_failed, nullptr);
  }
}

/*! \brief The method returns the value of the {@link mNy} attribute. */

const T::UInt32_opt &LambertConformal::getNy() const {
  try {
    return mNy;
  } catch (...) {
    throw SmartMet::Spine::Exception(BCP, exception_operation_failed, nullptr);
  }
}

/*! \brief The method returns the value of the {@link mLatitudeOfFirstGridPoint} attribute. */

const T::Int32_opt &LambertConformal::getLatitudeOfFirstGridPoint() const {
  try {
    return mLatitudeOfFirstGridPoint;
  } catch (...) {
    throw SmartMet::Spine::Exception(BCP, exception_operation_failed, nullptr);
  }
}

/*! \brief The method returns the value of the {@link mLongitudeOfFirstGridPoint} attribute. */

const T::UInt32_opt &LambertConformal::getLongitudeOfFirstGridPoint() const {
  try {
    return mLongitudeOfFirstGridPoint;
  } catch (...) {
    throw SmartMet::Spine::Exception(BCP, exception_operation_failed, nullptr);
  }
}

/*! \brief The method returns the pointer to the {@link mResolution} attribute. */

ResolutionSettings *LambertConformal::getResolution() const {
  try {
    return (ResolutionSettings *)&mResolution;
  } catch (...) {
    throw SmartMet::Spine::Exception(BCP, exception_operation_failed, nullptr);
  }
}

/*! \brief The method returns the value of the {@link mLaD} attribute. */

const T::Int32_opt &LambertConformal::getLaD() const {
  try {
    return mLaD;
  } catch (...) {
    throw SmartMet::Spine::Exception(BCP, exception_operation_failed, nullptr);
  }
}

/*! \brief The method returns the value of the {@link mLoV} attribute. */

const T::UInt32_opt &LambertConformal::getLoV() const {
  try {
    return mLoV;
  } catch (...) {
    throw SmartMet::Spine::Exception(BCP, exception_operation_failed, nullptr);
  }
}

/*! \brief The method returns the value of the {@link mDx} attribute. */

const T::UInt32_opt &LambertConformal::getDx() const {
  try {
    return mDx;
  } catch (...) {
    throw SmartMet::Spine::Exception(BCP, exception_operation_failed, nullptr);
  }
}

/*! \brief The method returns the value of the {@link mDy} attribute. */

const T::UInt32_opt &LambertConformal::getDy() const {
  try {
    return mDy;
  } catch (...) {
    throw SmartMet::Spine::Exception(BCP, exception_operation_failed, nullptr);
  }
}

/*! \brief The method returns the value of the {@link mProjectionCentreFlag} attribute. */

std::uint8_t LambertConformal::getProjectionCentreFlag() const {
  try {
    return mProjectionCentreFlag;
  } catch (...) {
    throw SmartMet::Spine::Exception(BCP, exception_operation_failed, nullptr);
  }
}

/*! \brief The method returns the pointer to the {@link mScanningMode} attribute. */

ScanningModeSettings *LambertConformal::getScanningMode() const {
  try {
    return (ScanningModeSettings *)&mScanningMode;
  } catch (...) {
    throw SmartMet::Spine::Exception(BCP, exception_operation_failed, nullptr);
  }
}

/*! \brief The method returns the value of the {@link mLatin1} attribute. */

const T::Int32_opt &LambertConformal::getLatin1() const {
  try {
    return mLatin1;
  } catch (...) {
    throw SmartMet::Spine::Exception(BCP, exception_operation_failed, nullptr);
  }
}

/*! \brief The method returns the value of the {@link mLatin2} attribute. */

const T::Int32_opt &LambertConformal::getLatin2() const {
  try {
    return mLatin2;
  } catch (...) {
    throw SmartMet::Spine::Exception(BCP, exception_operation_failed, nullptr);
  }
}

/*! \brief The method returns the value of the {@link mLatitudeOfSouthernPole} attribute. */

const T::Int32_opt &LambertConformal::getLatitudeOfSouthernPole() const {
  try {
    return mLatitudeOfSouthernPole;
  } catch (...) {
    throw SmartMet::Spine::Exception(BCP, exception_operation_failed, nullptr);
  }
}

/*! \brief The method returns the value of the {@link mLongitudeOfSouthernPole} attribute. */

const T::UInt32_opt &LambertConformal::getLongitudeOfSouthernPole() const {
  try {
    return mLongitudeOfSouthernPole;
  } catch (...) {
    throw SmartMet::Spine::Exception(BCP, exception_operation_failed, nullptr);
  }
}

void LambertConformal::setEarthShape(EarthShapeSettings &earthShape) {
  try {
    mEarthShape = earthShape;
  } catch (...) {
    throw SmartMet::Spine::Exception(BCP, exception_operation_failed, nullptr);
  }
}

void LambertConformal::setNx(T::UInt32_opt nx) {
  try {
    mNx = nx;
  } catch (...) {
    throw SmartMet::Spine::Exception(BCP, exception_operation_failed, nullptr);
  }
}

void LambertConformal::setNy(T::UInt32_opt ny) {
  try {
    mNy = ny;
  } catch (...) {
    throw SmartMet::Spine::Exception(BCP, exception_operation_failed, nullptr);
  }
}

void LambertConformal::setLatitudeOfFirstGridPoint(T::Int32_opt latitudeOfFirstGridPoint) {
  try {
    mLatitudeOfFirstGridPoint = latitudeOfFirstGridPoint;
  } catch (...) {
    throw SmartMet::Spine::Exception(BCP, exception_operation_failed, nullptr);
  }
}

void LambertConformal::setLongitudeOfFirstGridPoint(T::UInt32_opt longitudeOfFirstGridPoint) {
  try {
    mLongitudeOfFirstGridPoint = longitudeOfFirstGridPoint;
  } catch (...) {
    throw SmartMet::Spine::Exception(BCP, exception_operation_failed, nullptr);
  }
}

void LambertConformal::setResolution(ResolutionSettings &resolution) {
  try {
    mResolution = resolution;
  } catch (...) {
    throw SmartMet::Spine::Exception(BCP, exception_operation_failed, nullptr);
  }
}

void LambertConformal::setLaD(T::Int32_opt laD) {
  try {
    mLaD = laD;
  } catch (...) {
    throw SmartMet::Spine::Exception(BCP, exception_operation_failed, nullptr);
  }
}

void LambertConformal::setLoV(T::UInt32_opt loV) {
  try {
    mLoV = loV;
  } catch (...) {
    throw SmartMet::Spine::Exception(BCP, exception_operation_failed, nullptr);
  }
}

void LambertConformal::setDx(T::UInt32_opt dx) {
  try {
    mDx = dx;
  } catch (...) {
    throw SmartMet::Spine::Exception(BCP, exception_operation_failed, nullptr);
  }
}

void LambertConformal::setDy(T::UInt32_opt dy) {
  try {
    mDy = dy;
  } catch (...) {
    throw SmartMet::Spine::Exception(BCP, exception_operation_failed, nullptr);
  }
}

void LambertConformal::setProjectionCentreFlag(std::uint8_t projectionCentreFlag) {
  try {
    mProjectionCentreFlag = projectionCentreFlag;
  } catch (...) {
    throw SmartMet::Spine::Exception(BCP, exception_operation_failed, nullptr);
  }
}

void LambertConformal::setScanningMode(ScanningModeSettings &scanningMode) {
  try {
    mScanningMode = scanningMode;
  } catch (...) {
    throw SmartMet::Spine::Exception(BCP, exception_operation_failed, nullptr);
  }
}

void LambertConformal::setLatin1(T::Int32_opt latin1) {
  try {
    mLatin1 = latin1;
  } catch (...) {
    throw SmartMet::Spine::Exception(BCP, exception_operation_failed, nullptr);
  }
}

void LambertConformal::setLatin2(T::Int32_opt latin2) {
  try {
    mLatin2 = latin2;
  } catch (...) {
    throw SmartMet::Spine::Exception(BCP, exception_operation_failed, nullptr);
  }
}

void LambertConformal::setLatitudeOfSouthernPole(T::Int32_opt latitudeOfSouthernPole) {
  try {
    mLatitudeOfSouthernPole = latitudeOfSouthernPole;
  } catch (...) {
    throw SmartMet::Spine::Exception(BCP, exception_operation_failed, nullptr);
  }
}

void LambertConformal::setLongitudeOfSouthernPole(T::UInt32_opt longitudeOfSouthernPole) {
  try {
    mLongitudeOfSouthernPole = longitudeOfSouthernPole;
  } catch (...) {
    throw SmartMet::Spine::Exception(BCP, exception_operation_failed, nullptr);
  }
}

} // namespace GRIB2
} // namespace SmartMet
