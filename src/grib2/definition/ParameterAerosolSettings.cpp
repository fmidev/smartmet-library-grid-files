// ***********************************************************************
//                      DO NOT EDIT THIS FILE !!!
// ***********************************************************************
//   This file is automatically generated from the grib_api templates. All
//   changes will be overridden. If you want to do permanent changes then
//   you should write them into the 'ParameterAerosolSettingsImpl.*' files.
// ***********************************************************************

#include "ParameterAerosolSettings.h"
#include "../../common/Exception.h"
#include "../../common/GeneralDefinitions.h"
#include "../../common/GeneralFunctions.h"
#include <boost/functional/hash.hpp>
#include <iostream>

namespace SmartMet {
namespace GRIB2 {

/*! \brief The constructor of the class. */

ParameterAerosolSettings::ParameterAerosolSettings() {
  try {
  } catch (...) {
    throw SmartMet::Spine::Exception(BCP, exception_operation_failed, nullptr);
  }
}

/*! \brief The copy constructor of the class. */

ParameterAerosolSettings::ParameterAerosolSettings(const ParameterAerosolSettings &other) {
  try {
    mParameterCategory = other.mParameterCategory;
    mParameterNumber = other.mParameterNumber;
    mAerosolType = other.mAerosolType;
    mTypeOfSizeInterval = other.mTypeOfSizeInterval;
    mScaleFactorOfFirstSize = other.mScaleFactorOfFirstSize;
    mScaledValueOfFirstSize = other.mScaledValueOfFirstSize;
    mScaleFactorOfSecondSize = other.mScaleFactorOfSecondSize;
    mScaledValueOfSecondSize = other.mScaledValueOfSecondSize;
    mTypeOfGeneratingProcess = other.mTypeOfGeneratingProcess;
    mBackgroundProcess = other.mBackgroundProcess;
    mGeneratingProcessIdentifier = other.mGeneratingProcessIdentifier;
    mHoursAfterDataCutoff = other.mHoursAfterDataCutoff;
    mMinutesAfterDataCutoff = other.mMinutesAfterDataCutoff;
    mIndicatorOfUnitOfTimeRange = other.mIndicatorOfUnitOfTimeRange;
    mForecastTime = other.mForecastTime;
  } catch (...) {
    throw SmartMet::Spine::Exception(BCP, exception_operation_failed, nullptr);
  }
}

/*! \brief The destructor of the class. */

ParameterAerosolSettings::~ParameterAerosolSettings() {
}

/*! \brief The method reads and initializes all data related to the current object.

        \param memoryReader  This object controls the access to the memory mapped file.
*/

void ParameterAerosolSettings::read(MemoryReader &memoryReader) {
  try {
    mParameterCategory = memoryReader.read_UInt8_opt();
    mParameterNumber = memoryReader.read_UInt8_opt();
    mAerosolType = memoryReader.read_UInt16_opt();
    mTypeOfSizeInterval = memoryReader.read_UInt8_opt();
    mScaleFactorOfFirstSize = memoryReader.read_Int8_opt();
    mScaledValueOfFirstSize = memoryReader.read_Int32_opt();
    mScaleFactorOfSecondSize = memoryReader.read_Int8_opt();
    mScaledValueOfSecondSize = memoryReader.read_Int32_opt();
    mTypeOfGeneratingProcess = memoryReader.read_UInt8_opt();
    mBackgroundProcess = memoryReader.read_UInt8_opt();
    mGeneratingProcessIdentifier = memoryReader.read_UInt8_opt();
    mHoursAfterDataCutoff = memoryReader.read_UInt16_opt();
    mMinutesAfterDataCutoff = memoryReader.read_UInt8_opt();
    mIndicatorOfUnitOfTimeRange = memoryReader.read_UInt8_opt();
    mForecastTime = memoryReader.read_UInt32_opt();
  } catch (...) {
    throw SmartMet::Spine::Exception(BCP, exception_operation_failed, nullptr);
  }
}

/*! \brief The method writes all data related to the current object.

        \param dataWriter  This object is used for writing the object data.
*/

void ParameterAerosolSettings::write(DataWriter &dataWriter) {
  try {
    dataWriter << mParameterCategory;
    dataWriter << mParameterNumber;
    dataWriter << mAerosolType;
    dataWriter << mTypeOfSizeInterval;
    dataWriter << mScaleFactorOfFirstSize;
    dataWriter << mScaledValueOfFirstSize;
    dataWriter << mScaleFactorOfSecondSize;
    dataWriter << mScaledValueOfSecondSize;
    dataWriter << mTypeOfGeneratingProcess;
    dataWriter << mBackgroundProcess;
    dataWriter << mGeneratingProcessIdentifier;
    dataWriter << mHoursAfterDataCutoff;
    dataWriter << mMinutesAfterDataCutoff;
    dataWriter << mIndicatorOfUnitOfTimeRange;
    dataWriter << mForecastTime;
  } catch (...) {
    throw SmartMet::Spine::Exception(BCP, exception_operation_failed, nullptr);
  }
}

/*! \brief The method is used for collecting the current class attributeList.

    \param prefix         The prefix of the each attributeList parameter.
    \param attributeList  The attributeList storage.
*/

void ParameterAerosolSettings::getAttributeList(std::string prefix, T::AttributeList &attributeList) const {
  try {
    char name[300];
    sprintf(name, "%sParameterAerosolSettings.ParameterCategory", prefix.c_str());
    attributeList.addAttribute(name, toString(mParameterCategory));
    sprintf(name, "%sParameterAerosolSettings.ParameterNumber", prefix.c_str());
    attributeList.addAttribute(name, toString(mParameterNumber));
    sprintf(name, "%sParameterAerosolSettings.AerosolType", prefix.c_str());
    attributeList.addAttribute(name, toString(mAerosolType));
    sprintf(name, "%sParameterAerosolSettings.TypeOfSizeInterval", prefix.c_str());
    attributeList.addAttribute(name, toString(mTypeOfSizeInterval));
    sprintf(name, "%sParameterAerosolSettings.ScaleFactorOfFirstSize", prefix.c_str());
    attributeList.addAttribute(name, toString(mScaleFactorOfFirstSize));
    sprintf(name, "%sParameterAerosolSettings.ScaledValueOfFirstSize", prefix.c_str());
    attributeList.addAttribute(name, toString(mScaledValueOfFirstSize));
    sprintf(name, "%sParameterAerosolSettings.ScaleFactorOfSecondSize", prefix.c_str());
    attributeList.addAttribute(name, toString(mScaleFactorOfSecondSize));
    sprintf(name, "%sParameterAerosolSettings.ScaledValueOfSecondSize", prefix.c_str());
    attributeList.addAttribute(name, toString(mScaledValueOfSecondSize));
    sprintf(name, "%sParameterAerosolSettings.TypeOfGeneratingProcess", prefix.c_str());
    attributeList.addAttribute(name, toString(mTypeOfGeneratingProcess));
    sprintf(name, "%sParameterAerosolSettings.BackgroundProcess", prefix.c_str());
    attributeList.addAttribute(name, toString(mBackgroundProcess));
    sprintf(name, "%sParameterAerosolSettings.GeneratingProcessIdentifier", prefix.c_str());
    attributeList.addAttribute(name, toString(mGeneratingProcessIdentifier));
    sprintf(name, "%sParameterAerosolSettings.HoursAfterDataCutoff", prefix.c_str());
    attributeList.addAttribute(name, toString(mHoursAfterDataCutoff));
    sprintf(name, "%sParameterAerosolSettings.MinutesAfterDataCutoff", prefix.c_str());
    attributeList.addAttribute(name, toString(mMinutesAfterDataCutoff));
    sprintf(name, "%sParameterAerosolSettings.IndicatorOfUnitOfTimeRange", prefix.c_str());
    attributeList.addAttribute(name, toString(mIndicatorOfUnitOfTimeRange));
    sprintf(name, "%sParameterAerosolSettings.ForecastTime", prefix.c_str());
    attributeList.addAttribute(name, toString(mForecastTime));
  } catch (...) {
    throw SmartMet::Spine::Exception(BCP, exception_operation_failed, nullptr);
  }
}

/*! \brief The method prints the content of the current object into the given stream.

    \param ostream      The output stream.
    \param level        The print level (used when printing multi-level structures).
    \param optionFlags  The printing options expressed in flag-bits.
*/

void ParameterAerosolSettings::print(std::ostream &stream, uint level, uint optionFlags) const {
  try {
    stream << space(level) << "ParameterAerosolSettings\n";
    stream << space(level) << "- ParameterCategory = " << toString(mParameterCategory) << "\n";
    stream << space(level) << "- ParameterNumber = " << toString(mParameterNumber) << "\n";
    stream << space(level) << "- AerosolType = " << toString(mAerosolType) << "\n";
    stream << space(level) << "- TypeOfSizeInterval = " << toString(mTypeOfSizeInterval) << "\n";
    stream << space(level) << "- ScaleFactorOfFirstSize = " << toString(mScaleFactorOfFirstSize) << "\n";
    stream << space(level) << "- ScaledValueOfFirstSize = " << toString(mScaledValueOfFirstSize) << "\n";
    stream << space(level) << "- ScaleFactorOfSecondSize = " << toString(mScaleFactorOfSecondSize) << "\n";
    stream << space(level) << "- ScaledValueOfSecondSize = " << toString(mScaledValueOfSecondSize) << "\n";
    stream << space(level) << "- TypeOfGeneratingProcess = " << toString(mTypeOfGeneratingProcess) << "\n";
    stream << space(level) << "- BackgroundProcess = " << toString(mBackgroundProcess) << "\n";
    stream << space(level) << "- GeneratingProcessIdentifier = " << toString(mGeneratingProcessIdentifier) << "\n";
    stream << space(level) << "- HoursAfterDataCutoff = " << toString(mHoursAfterDataCutoff) << "\n";
    stream << space(level) << "- MinutesAfterDataCutoff = " << toString(mMinutesAfterDataCutoff) << "\n";
    stream << space(level) << "- IndicatorOfUnitOfTimeRange = " << toString(mIndicatorOfUnitOfTimeRange) << "\n";
    stream << space(level) << "- ForecastTime = " << toString(mForecastTime) << "\n";
  } catch (...) {
    throw SmartMet::Spine::Exception(BCP, exception_operation_failed, nullptr);
  }
}

/*! \brief The method counts the hash value of the current object. */

T::Hash ParameterAerosolSettings::countHash() {
  try {
    std::size_t seed = 0;
    if (mParameterCategory)
      boost::hash_combine(seed, *mParameterCategory);
    if (mParameterNumber)
      boost::hash_combine(seed, *mParameterNumber);
    if (mAerosolType)
      boost::hash_combine(seed, *mAerosolType);
    if (mTypeOfSizeInterval)
      boost::hash_combine(seed, *mTypeOfSizeInterval);
    if (mScaleFactorOfFirstSize)
      boost::hash_combine(seed, *mScaleFactorOfFirstSize);
    if (mScaledValueOfFirstSize)
      boost::hash_combine(seed, *mScaledValueOfFirstSize);
    if (mScaleFactorOfSecondSize)
      boost::hash_combine(seed, *mScaleFactorOfSecondSize);
    if (mScaledValueOfSecondSize)
      boost::hash_combine(seed, *mScaledValueOfSecondSize);
    if (mTypeOfGeneratingProcess)
      boost::hash_combine(seed, *mTypeOfGeneratingProcess);
    if (mBackgroundProcess)
      boost::hash_combine(seed, *mBackgroundProcess);
    if (mGeneratingProcessIdentifier)
      boost::hash_combine(seed, *mGeneratingProcessIdentifier);
    if (mHoursAfterDataCutoff)
      boost::hash_combine(seed, *mHoursAfterDataCutoff);
    if (mMinutesAfterDataCutoff)
      boost::hash_combine(seed, *mMinutesAfterDataCutoff);
    if (mIndicatorOfUnitOfTimeRange)
      boost::hash_combine(seed, *mIndicatorOfUnitOfTimeRange);
    if (mForecastTime)
      boost::hash_combine(seed, *mForecastTime);
    return seed;
  } catch (...) {
    throw SmartMet::Spine::Exception(BCP, exception_operation_failed, nullptr);
  }
}

/*! \brief The method returns the value of the {@link mParameterCategory} attribute. */

const T::UInt8_opt &ParameterAerosolSettings::getParameterCategory() const {
  try {
    return mParameterCategory;
  } catch (...) {
    throw SmartMet::Spine::Exception(BCP, exception_operation_failed, nullptr);
  }
}

/*! \brief The method returns the value of the {@link mParameterNumber} attribute. */

const T::UInt8_opt &ParameterAerosolSettings::getParameterNumber() const {
  try {
    return mParameterNumber;
  } catch (...) {
    throw SmartMet::Spine::Exception(BCP, exception_operation_failed, nullptr);
  }
}

/*! \brief The method returns the value of the {@link mAerosolType} attribute. */

const T::UInt16_opt &ParameterAerosolSettings::getAerosolType() const {
  try {
    return mAerosolType;
  } catch (...) {
    throw SmartMet::Spine::Exception(BCP, exception_operation_failed, nullptr);
  }
}

/*! \brief The method returns the value of the {@link mTypeOfSizeInterval} attribute. */

const T::UInt8_opt &ParameterAerosolSettings::getTypeOfSizeInterval() const {
  try {
    return mTypeOfSizeInterval;
  } catch (...) {
    throw SmartMet::Spine::Exception(BCP, exception_operation_failed, nullptr);
  }
}

/*! \brief The method returns the value of the {@link mScaleFactorOfFirstSize} attribute. */

const T::Int8_opt &ParameterAerosolSettings::getScaleFactorOfFirstSize() const {
  try {
    return mScaleFactorOfFirstSize;
  } catch (...) {
    throw SmartMet::Spine::Exception(BCP, exception_operation_failed, nullptr);
  }
}

/*! \brief The method returns the value of the {@link mScaledValueOfFirstSize} attribute. */

const T::Int32_opt &ParameterAerosolSettings::getScaledValueOfFirstSize() const {
  try {
    return mScaledValueOfFirstSize;
  } catch (...) {
    throw SmartMet::Spine::Exception(BCP, exception_operation_failed, nullptr);
  }
}

/*! \brief The method returns the value of the {@link mScaleFactorOfSecondSize} attribute. */

const T::Int8_opt &ParameterAerosolSettings::getScaleFactorOfSecondSize() const {
  try {
    return mScaleFactorOfSecondSize;
  } catch (...) {
    throw SmartMet::Spine::Exception(BCP, exception_operation_failed, nullptr);
  }
}

/*! \brief The method returns the value of the {@link mScaledValueOfSecondSize} attribute. */

const T::Int32_opt &ParameterAerosolSettings::getScaledValueOfSecondSize() const {
  try {
    return mScaledValueOfSecondSize;
  } catch (...) {
    throw SmartMet::Spine::Exception(BCP, exception_operation_failed, nullptr);
  }
}

/*! \brief The method returns the value of the {@link mTypeOfGeneratingProcess} attribute. */

const T::UInt8_opt &ParameterAerosolSettings::getTypeOfGeneratingProcess() const {
  try {
    return mTypeOfGeneratingProcess;
  } catch (...) {
    throw SmartMet::Spine::Exception(BCP, exception_operation_failed, nullptr);
  }
}

/*! \brief The method returns the value of the {@link mBackgroundProcess} attribute. */

const T::UInt8_opt &ParameterAerosolSettings::getBackgroundProcess() const {
  try {
    return mBackgroundProcess;
  } catch (...) {
    throw SmartMet::Spine::Exception(BCP, exception_operation_failed, nullptr);
  }
}

/*! \brief The method returns the value of the {@link mGeneratingProcessIdentifier} attribute. */

const T::UInt8_opt &ParameterAerosolSettings::getGeneratingProcessIdentifier() const {
  try {
    return mGeneratingProcessIdentifier;
  } catch (...) {
    throw SmartMet::Spine::Exception(BCP, exception_operation_failed, nullptr);
  }
}

/*! \brief The method returns the value of the {@link mHoursAfterDataCutoff} attribute. */

const T::UInt16_opt &ParameterAerosolSettings::getHoursAfterDataCutoff() const {
  try {
    return mHoursAfterDataCutoff;
  } catch (...) {
    throw SmartMet::Spine::Exception(BCP, exception_operation_failed, nullptr);
  }
}

/*! \brief The method returns the value of the {@link mMinutesAfterDataCutoff} attribute. */

const T::UInt8_opt &ParameterAerosolSettings::getMinutesAfterDataCutoff() const {
  try {
    return mMinutesAfterDataCutoff;
  } catch (...) {
    throw SmartMet::Spine::Exception(BCP, exception_operation_failed, nullptr);
  }
}

/*! \brief The method returns the value of the {@link mIndicatorOfUnitOfTimeRange} attribute. */

const T::UInt8_opt &ParameterAerosolSettings::getIndicatorOfUnitOfTimeRange() const {
  try {
    return mIndicatorOfUnitOfTimeRange;
  } catch (...) {
    throw SmartMet::Spine::Exception(BCP, exception_operation_failed, nullptr);
  }
}

/*! \brief The method returns the value of the {@link mForecastTime} attribute. */

const T::UInt32_opt &ParameterAerosolSettings::getForecastTime() const {
  try {
    return mForecastTime;
  } catch (...) {
    throw SmartMet::Spine::Exception(BCP, exception_operation_failed, nullptr);
  }
}

void ParameterAerosolSettings::setParameterCategory(T::UInt8_opt parameterCategory) {
  try {
    mParameterCategory = parameterCategory;
  } catch (...) {
    throw SmartMet::Spine::Exception(BCP, exception_operation_failed, nullptr);
  }
}

void ParameterAerosolSettings::setParameterNumber(T::UInt8_opt parameterNumber) {
  try {
    mParameterNumber = parameterNumber;
  } catch (...) {
    throw SmartMet::Spine::Exception(BCP, exception_operation_failed, nullptr);
  }
}

void ParameterAerosolSettings::setAerosolType(T::UInt16_opt aerosolType) {
  try {
    mAerosolType = aerosolType;
  } catch (...) {
    throw SmartMet::Spine::Exception(BCP, exception_operation_failed, nullptr);
  }
}

void ParameterAerosolSettings::setTypeOfSizeInterval(T::UInt8_opt typeOfSizeInterval) {
  try {
    mTypeOfSizeInterval = typeOfSizeInterval;
  } catch (...) {
    throw SmartMet::Spine::Exception(BCP, exception_operation_failed, nullptr);
  }
}

void ParameterAerosolSettings::setScaleFactorOfFirstSize(T::Int8_opt scaleFactorOfFirstSize) {
  try {
    mScaleFactorOfFirstSize = scaleFactorOfFirstSize;
  } catch (...) {
    throw SmartMet::Spine::Exception(BCP, exception_operation_failed, nullptr);
  }
}

void ParameterAerosolSettings::setScaledValueOfFirstSize(T::Int32_opt scaledValueOfFirstSize) {
  try {
    mScaledValueOfFirstSize = scaledValueOfFirstSize;
  } catch (...) {
    throw SmartMet::Spine::Exception(BCP, exception_operation_failed, nullptr);
  }
}

void ParameterAerosolSettings::setScaleFactorOfSecondSize(T::Int8_opt scaleFactorOfSecondSize) {
  try {
    mScaleFactorOfSecondSize = scaleFactorOfSecondSize;
  } catch (...) {
    throw SmartMet::Spine::Exception(BCP, exception_operation_failed, nullptr);
  }
}

void ParameterAerosolSettings::setScaledValueOfSecondSize(T::Int32_opt scaledValueOfSecondSize) {
  try {
    mScaledValueOfSecondSize = scaledValueOfSecondSize;
  } catch (...) {
    throw SmartMet::Spine::Exception(BCP, exception_operation_failed, nullptr);
  }
}

void ParameterAerosolSettings::setTypeOfGeneratingProcess(T::UInt8_opt typeOfGeneratingProcess) {
  try {
    mTypeOfGeneratingProcess = typeOfGeneratingProcess;
  } catch (...) {
    throw SmartMet::Spine::Exception(BCP, exception_operation_failed, nullptr);
  }
}

void ParameterAerosolSettings::setBackgroundProcess(T::UInt8_opt backgroundProcess) {
  try {
    mBackgroundProcess = backgroundProcess;
  } catch (...) {
    throw SmartMet::Spine::Exception(BCP, exception_operation_failed, nullptr);
  }
}

void ParameterAerosolSettings::setGeneratingProcessIdentifier(T::UInt8_opt generatingProcessIdentifier) {
  try {
    mGeneratingProcessIdentifier = generatingProcessIdentifier;
  } catch (...) {
    throw SmartMet::Spine::Exception(BCP, exception_operation_failed, nullptr);
  }
}

void ParameterAerosolSettings::setHoursAfterDataCutoff(T::UInt16_opt hoursAfterDataCutoff) {
  try {
    mHoursAfterDataCutoff = hoursAfterDataCutoff;
  } catch (...) {
    throw SmartMet::Spine::Exception(BCP, exception_operation_failed, nullptr);
  }
}

void ParameterAerosolSettings::setMinutesAfterDataCutoff(T::UInt8_opt minutesAfterDataCutoff) {
  try {
    mMinutesAfterDataCutoff = minutesAfterDataCutoff;
  } catch (...) {
    throw SmartMet::Spine::Exception(BCP, exception_operation_failed, nullptr);
  }
}

void ParameterAerosolSettings::setIndicatorOfUnitOfTimeRange(T::UInt8_opt indicatorOfUnitOfTimeRange) {
  try {
    mIndicatorOfUnitOfTimeRange = indicatorOfUnitOfTimeRange;
  } catch (...) {
    throw SmartMet::Spine::Exception(BCP, exception_operation_failed, nullptr);
  }
}

void ParameterAerosolSettings::setForecastTime(T::UInt32_opt forecastTime) {
  try {
    mForecastTime = forecastTime;
  } catch (...) {
    throw SmartMet::Spine::Exception(BCP, exception_operation_failed, nullptr);
  }
}

} // namespace GRIB2
} // namespace SmartMet
