// ***********************************************************************
//                      DO NOT EDIT THIS FILE !!!
// ***********************************************************************
//   This file is automatically generated from the grib_api templates. All
//   changes will be overridden. If you want to do permanent changes then
//   you should write them into the 'PointInTimeSettingsImpl.*' files.
// ***********************************************************************

#pragma once
#include "../../common/AttributeList.h"
#include "../../common/DataWriter.h"
#include "../../common/MemoryReader.h"
#include "../../grid/Typedefs.h"

namespace SmartMet {
namespace GRIB2 {
/*! \brief The class is automatically created from the template (4.point_in_time).*/

class PointInTimeSettings {
public:
  PointInTimeSettings();
  PointInTimeSettings(const PointInTimeSettings &other);
  virtual ~PointInTimeSettings();

  virtual void read(MemoryReader &memoryReader);
  virtual void write(DataWriter &dataWriter);
  virtual void getAttributeList(std::string prefix, T::AttributeList &attributeList) const;
  virtual void print(std::ostream &stream, uint level, uint optionFlags) const;
  virtual T::Hash countHash();

protected:
  // # Copyright 2005-2015 ECMWF.
  // #
  // # This software is licensed under the terms of the Apache Licence Version 2.0
  // # which can be obtained at http://www.apache.org/licenses/LICENSE-2.0.
  // #
  // # In applying this licence, ECMWF does not waive the privileges and immunities granted to it by
  // # virtue of its status as an intergovernmental organisation nor does it submit to any jurisdiction.
  // #
  //
  // meta startStep step_in_units(forecastTime,indicatorOfUnitOfTimeRange,stepUnits): no_copy;
  // meta endStep g2end_step(startStep,stepUnits) : no_copy;
  //
  // alias step=startStep;
  // alias marsStep=startStep;
  //
  // alias mars.step=startStep;
  //
  // alias marsStartStep = startStep;
  // alias marsEndStep   = endStep;
  //
  // meta stepRange g2step_range(startStep): dump;
  // alias ls.stepRange=stepRange;
  // concept stepTypeInternal {
  //   "instant" = {dummy=1;}
  // }
  //
  // alias time.stepType=stepType;
  // alias time.stepRange=stepRange;
  // alias time.stepUnits=stepUnits;
  // alias time.dataDate=dataDate;
  // alias time.dataTime=dataTime;
  // alias time.startStep=startStep;
  // alias time.endStep=endStep;
  //
  // meta time.validityDate validity_date(dataDate,dataTime,step,stepUnits) : no_copy;
  // meta time.validityTime validity_time(dataDate,dataTime,step,stepUnits) : no_copy;
  //
};

} // namespace GRIB2
} // namespace SmartMet
