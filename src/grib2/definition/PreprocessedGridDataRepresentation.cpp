// ***********************************************************************
//                      DO NOT EDIT THIS FILE !!!
// ***********************************************************************
//   This file is automatically generated from the grib_api templates. All
//   changes will be overridden. If you want to do permanent changes then
//   you should write them into the 'PreprocessedGridDataRepresentationImpl.*' files.
// ***********************************************************************

#include "PreprocessedGridDataRepresentation.h"
#include "../../common/Exception.h"
#include "../../common/GeneralDefinitions.h"
#include "../../common/GeneralFunctions.h"
#include <boost/functional/hash.hpp>
#include <iostream>

namespace SmartMet {
namespace GRIB2 {

/*! \brief The constructor of the class. */

PreprocessedGridDataRepresentation::PreprocessedGridDataRepresentation() {
  try {
    mPreProcessingParameter = 0;
  } catch (...) {
    throw SmartMet::Spine::Exception(BCP, exception_operation_failed, NULL);
  }
}

/*! \brief The destructor of the class. */

PreprocessedGridDataRepresentation::~PreprocessedGridDataRepresentation() {
  try {
  } catch (...) {
    throw SmartMet::Spine::Exception(BCP, exception_operation_failed, NULL);
  }
}

/*! \brief The method reads and initializes all data related to the current object.

        \param memoryReader  This object controls the access to the memory mapped file.
*/

void PreprocessedGridDataRepresentation::read(MemoryReader &memoryReader) {
  try {
    mPacking.read(memoryReader);
    mTypeOfPreProcessing = memoryReader.read_UInt8_opt();
    mPreProcessingParameter = memoryReader.read_float();
  } catch (...) {
    throw SmartMet::Spine::Exception(BCP, exception_operation_failed, NULL);
  }
}

/*! \brief The method is used for collecting the current class attributeList.

    \param prefix         The prefix of the each attributeList parameter.
    \param attributeList  The attributeList storage.
*/

void PreprocessedGridDataRepresentation::getAttributeList(std::string prefix, T::AttributeList &attributeList) const {
  try {
    char name[300];
    sprintf(name, "%sPreprocessedGridDataRepresentation.", prefix.c_str());
    mPacking.getAttributeList(name, attributeList);
    sprintf(name, "%sPreprocessedGridDataRepresentation.TypeOfPreProcessing", prefix.c_str());
    attributeList.addAttribute(name, toString(mTypeOfPreProcessing));
    sprintf(name, "%sPreprocessedGridDataRepresentation.PreProcessingParameter", prefix.c_str());
    attributeList.addAttribute(name, toString(mPreProcessingParameter));
  } catch (...) {
    throw SmartMet::Spine::Exception(BCP, exception_operation_failed, NULL);
  }
}

/*! \brief The method prints the content of the current object into the given stream.

    \param ostream      The output stream.
    \param level        The print level (used when printing multi-level structures).
    \param optionFlags  The printing options expressed in flag-bits.
*/

void PreprocessedGridDataRepresentation::print(std::ostream &stream, uint level, uint optionFlags) const {
  try {
    stream << space(level) << "PreprocessedGridDataRepresentation\n";
    mPacking.print(stream, level + 1, optionFlags);
    stream << space(level) << "- TypeOfPreProcessing = " << toString(mTypeOfPreProcessing) << "\n";
    stream << space(level) << "- PreProcessingParameter = " << toString(mPreProcessingParameter) << "\n";
  } catch (...) {
    throw SmartMet::Spine::Exception(BCP, exception_operation_failed, NULL);
  }
}

/*! \brief The method counts the hash value of the current object. */

T::Hash PreprocessedGridDataRepresentation::countHash() {
  try {
    std::size_t seed = 0;
    if (mTypeOfPreProcessing)
      boost::hash_combine(seed, *mTypeOfPreProcessing);
    boost::hash_combine(seed, mPreProcessingParameter);
    boost::hash_combine(seed, mPacking.countHash());
    return seed;
  } catch (...) {
    throw SmartMet::Spine::Exception(BCP, exception_operation_failed, NULL);
  }
}

/*! \brief The method returns the pointer to the {@link mPacking} attribute. */

const PackingSettings *PreprocessedGridDataRepresentation::getPacking() const {
  try {
    return &mPacking;
  } catch (...) {
    throw SmartMet::Spine::Exception(BCP, exception_operation_failed, NULL);
  }
}

/*! \brief The method returns the value of the {@link mTypeOfPreProcessing} attribute. */

const T::UInt8_opt &PreprocessedGridDataRepresentation::getTypeOfPreProcessing() const {
  try {
    return mTypeOfPreProcessing;
  } catch (...) {
    throw SmartMet::Spine::Exception(BCP, exception_operation_failed, NULL);
  }
}

/*! \brief The method returns the value of the {@link mPreProcessingParameter} attribute. */

float PreprocessedGridDataRepresentation::getPreProcessingParameter() const {
  try {
    return mPreProcessingParameter;
  } catch (...) {
    throw SmartMet::Spine::Exception(BCP, exception_operation_failed, NULL);
  }
}

void PreprocessedGridDataRepresentation::setPacking(PackingSettings packing) {
  try {
    mPacking = packing;
  } catch (...) {
    throw SmartMet::Spine::Exception(BCP, exception_operation_failed, NULL);
  }
}

void PreprocessedGridDataRepresentation::setTypeOfPreProcessing(T::UInt8_opt typeOfPreProcessing) {
  try {
    mTypeOfPreProcessing = typeOfPreProcessing;
  } catch (...) {
    throw SmartMet::Spine::Exception(BCP, exception_operation_failed, NULL);
  }
}

void PreprocessedGridDataRepresentation::setPreProcessingParameter(float preProcessingParameter) {
  try {
    mPreProcessingParameter = preProcessingParameter;
  } catch (...) {
    throw SmartMet::Spine::Exception(BCP, exception_operation_failed, NULL);
  }
}

} // namespace GRIB2
} // namespace SmartMet
