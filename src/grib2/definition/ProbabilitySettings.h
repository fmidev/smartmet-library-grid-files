// ***********************************************************************
//                      DO NOT EDIT THIS FILE !!!
// ***********************************************************************
//   This file is automatically generated from the grib_api templates. All
//   changes will be overridden. If you want to do permanent changes then
//   you should write them into the 'ProbabilitySettingsImpl.*' files.
// ***********************************************************************

#pragma once
#include "../../common/AttributeList.h"
#include "../../common/DataWriter.h"
#include "../../common/MemoryReader.h"
#include "../../grid/Typedefs.h"

namespace SmartMet {
namespace GRIB2 {
/*! \brief The class is automatically created from the template (4.probability).*/

class ProbabilitySettings {
public:
  ProbabilitySettings();
  ProbabilitySettings(const ProbabilitySettings &other);
  virtual ~ProbabilitySettings();

  virtual void read(MemoryReader &memoryReader);
  virtual void write(DataWriter &dataWriter);
  virtual void getAttributeList(std::string prefix, T::AttributeList &attributeList) const;
  virtual void print(std::ostream &stream, uint level, uint optionFlags) const;
  virtual T::Hash countHash();

  const T::UInt8_opt &getForecastProbabilityNumber() const;
  void setForecastProbabilityNumber(T::UInt8_opt forecastProbabilityNumber);
  const T::UInt8_opt &getTotalNumberOfForecastProbabilities() const;
  void setTotalNumberOfForecastProbabilities(T::UInt8_opt totalNumberOfForecastProbabilities);
  const T::UInt8_opt &getProbabilityType() const;
  void setProbabilityType(T::UInt8_opt probabilityType);
  const T::Int8_opt &getScaleFactorOfLowerLimit() const;
  void setScaleFactorOfLowerLimit(T::Int8_opt scaleFactorOfLowerLimit);
  const T::Int32_opt &getScaledValueOfLowerLimit() const;
  void setScaledValueOfLowerLimit(T::Int32_opt scaledValueOfLowerLimit);
  const T::Int8_opt &getScaleFactorOfUpperLimit() const;
  void setScaleFactorOfUpperLimit(T::Int8_opt scaleFactorOfUpperLimit);
  const T::Int32_opt &getScaledValueOfUpperLimit() const;
  void setScaledValueOfUpperLimit(T::Int32_opt scaledValueOfUpperLimit);

protected:
  // # Copyright 2005-2017 ECMWF.
  // #
  // # This software is licensed under the terms of the Apache Licence Version 2.0
  // # which can be obtained at http://www.apache.org/licenses/LICENSE-2.0.
  // #
  // # In applying this licence, ECMWF does not waive the privileges and immunities granted to it by
  // # virtue of its status as an intergovernmental organisation nor does it submit to any jurisdiction.
  // #
  //
  // #  Forecast probability number
  // unsigned[1] forecastProbabilityNumber  : dump;

  T::UInt8_opt mForecastProbabilityNumber;

  //
  // #  Total number of forecast probabilities
  // unsigned[1] totalNumberOfForecastProbabilities  : dump;

  T::UInt8_opt mTotalNumberOfForecastProbabilities;

  //
  // #  Probability type
  // codetable[1] probabilityType ('4.9.table',masterDir,localDir) : dump;

  T::UInt8_opt mProbabilityType;

  // meta probabilityTypeName codetable_title(probabilityType): read_only;
  //
  //
  // #  Scale factor of lower limit
  // signed[1] scaleFactorOfLowerLimit : can_be_missing,dump ;

  T::Int8_opt mScaleFactorOfLowerLimit;

  //
  // #  Scaled value of lower limit
  // signed[4] scaledValueOfLowerLimit : can_be_missing,dump ;

  T::Int32_opt mScaledValueOfLowerLimit;

  //
  // meta lowerLimit from_scale_factor_scaled_value(
  //      scaleFactorOfLowerLimit, scaledValueOfLowerLimit);
  //
  //
  // #  Scale factor of upper limit
  // signed[1] scaleFactorOfUpperLimit : can_be_missing,dump;

  T::Int8_opt mScaleFactorOfUpperLimit;

  //
  // #  Scaled value of upper limit
  // signed[4] scaledValueOfUpperLimit : can_be_missing,dump;

  T::Int32_opt mScaledValueOfUpperLimit;

  //
  // meta upperLimit from_scale_factor_scaled_value(
  //      scaleFactorOfUpperLimit, scaledValueOfUpperLimit);
};

} // namespace GRIB2
} // namespace SmartMet
