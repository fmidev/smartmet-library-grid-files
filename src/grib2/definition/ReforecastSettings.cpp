// ***********************************************************************
//                      DO NOT EDIT THIS FILE !!!
// ***********************************************************************
//   This file is automatically generated from the grib_api templates. All
//   changes will be overridden. If you want to do permanent changes then
//   you should write them into the 'ReforecastSettingsImpl.*' files.
// ***********************************************************************

#include "ReforecastSettings.h"
#include "../../common/GeneralDefinitions.h"
#include "../../common/GeneralFunctions.h"
#include <macgyver/Hash.h>
#include <iostream>
#include <macgyver/Exception.h>

namespace SmartMet {
namespace GRIB2 {

/*! \brief The constructor of the class. */

ReforecastSettings::ReforecastSettings() {
  try {
  } catch (...) {
    throw Fmi::Exception(BCP, "Operation failed", nullptr);
  }
}

/*! \brief The destructor of the class. */

ReforecastSettings::~ReforecastSettings() {
}

/*! \brief The method reads and initializes all data related to the current object.

        \param memoryReader  This object controls the access to the memory mapped file.
*/

void ReforecastSettings::read(MemoryReader &memoryReader) {
  try {
    mYearOfModelVersion = memoryReader.read_UInt16_opt();
    mMonthOfModelVersion = memoryReader.read_UInt8_opt();
    mDayOfModelVersion = memoryReader.read_UInt8_opt();
    mHourOfModelVersion = memoryReader.read_UInt8_opt();
    mMinuteOfModelVersion = memoryReader.read_UInt8_opt();
    mSecondOfModelVersion = memoryReader.read_UInt8_opt();
  } catch (...) {
    throw Fmi::Exception(BCP, "Operation failed", nullptr);
  }
}

/*! \brief The method writes all data related to the current object.

        \param dataWriter  This object is used for writing the object data.
*/

void ReforecastSettings::write(DataWriter &dataWriter) {
  try {
    dataWriter << mYearOfModelVersion;
    dataWriter << mMonthOfModelVersion;
    dataWriter << mDayOfModelVersion;
    dataWriter << mHourOfModelVersion;
    dataWriter << mMinuteOfModelVersion;
    dataWriter << mSecondOfModelVersion;
  } catch (...) {
    throw Fmi::Exception(BCP, "Operation failed", nullptr);
  }
}

/*! \brief The method is used for collecting the current class attributeList.

    \param prefix         The prefix of the each attributeList parameter.
    \param attributeList  The attributeList storage.
*/

void ReforecastSettings::getAttributeList(const std::string &prefix, T::AttributeList &attributeList) const {
  try {
    char name[300];
    sprintf(name, "%sReforecastSettings.YearOfModelVersion", prefix.c_str());
    attributeList.addAttribute(name, toString(mYearOfModelVersion));
    sprintf(name, "%sReforecastSettings.MonthOfModelVersion", prefix.c_str());
    attributeList.addAttribute(name, toString(mMonthOfModelVersion));
    sprintf(name, "%sReforecastSettings.DayOfModelVersion", prefix.c_str());
    attributeList.addAttribute(name, toString(mDayOfModelVersion));
    sprintf(name, "%sReforecastSettings.HourOfModelVersion", prefix.c_str());
    attributeList.addAttribute(name, toString(mHourOfModelVersion));
    sprintf(name, "%sReforecastSettings.MinuteOfModelVersion", prefix.c_str());
    attributeList.addAttribute(name, toString(mMinuteOfModelVersion));
    sprintf(name, "%sReforecastSettings.SecondOfModelVersion", prefix.c_str());
    attributeList.addAttribute(name, toString(mSecondOfModelVersion));
  } catch (...) {
    throw Fmi::Exception(BCP, "Operation failed", nullptr);
  }
}

/*! \brief The method is used for getting attribute values by their names.

    \param attributeName  The name of the attribute.
    \param attributeValue The value of the attribute (string).
*/

bool ReforecastSettings::getAttributeValue(const char *attributeName, std::string &attributeValue) const {
  try {
    if (attributeName == nullptr)
      return false;
    if (strcasecmp(attributeName, "YearOfModelVersion") == 0) {
      attributeValue = toString(mYearOfModelVersion);
      return true;
    }
    if (strcasecmp(attributeName, "MonthOfModelVersion") == 0) {
      attributeValue = toString(mMonthOfModelVersion);
      return true;
    }
    if (strcasecmp(attributeName, "DayOfModelVersion") == 0) {
      attributeValue = toString(mDayOfModelVersion);
      return true;
    }
    if (strcasecmp(attributeName, "HourOfModelVersion") == 0) {
      attributeValue = toString(mHourOfModelVersion);
      return true;
    }
    if (strcasecmp(attributeName, "MinuteOfModelVersion") == 0) {
      attributeValue = toString(mMinuteOfModelVersion);
      return true;
    }
    if (strcasecmp(attributeName, "SecondOfModelVersion") == 0) {
      attributeValue = toString(mSecondOfModelVersion);
      return true;
    }
    return false;
  } catch (...) {
    throw Fmi::Exception(BCP, "Operation failed", nullptr);
  }
}

/*! \brief The method is used for checking if the attribute value matches to the given value.

    \param attributeName  The name of the attribute.
    \param attributeValue The value of the attribute (string).
*/

bool ReforecastSettings::hasAttributeValue(const char *attributeName, const char *attributeValue) const {
  try {
    if (attributeName == nullptr || attributeValue == nullptr)
      return false;
    if (strcasecmp(attributeName, "YearOfModelVersion") == 0 && strcasecmp(attributeValue, toString(mYearOfModelVersion).c_str()) == 0)
      return true;
    if (strcasecmp(attributeName, "MonthOfModelVersion") == 0 && strcasecmp(attributeValue, toString(mMonthOfModelVersion).c_str()) == 0)
      return true;
    if (strcasecmp(attributeName, "DayOfModelVersion") == 0 && strcasecmp(attributeValue, toString(mDayOfModelVersion).c_str()) == 0)
      return true;
    if (strcasecmp(attributeName, "HourOfModelVersion") == 0 && strcasecmp(attributeValue, toString(mHourOfModelVersion).c_str()) == 0)
      return true;
    if (strcasecmp(attributeName, "MinuteOfModelVersion") == 0 && strcasecmp(attributeValue, toString(mMinuteOfModelVersion).c_str()) == 0)
      return true;
    if (strcasecmp(attributeName, "SecondOfModelVersion") == 0 && strcasecmp(attributeValue, toString(mSecondOfModelVersion).c_str()) == 0)
      return true;
    return false;
  } catch (...) {
    throw Fmi::Exception(BCP, "Operation failed", nullptr);
  }
}

/*! \brief The method prints the content of the current object into the given stream.

    \param ostream      The output stream.
    \param level        The print level (used when printing multi-level structures).
    \param optionFlags  The printing options expressed in flag-bits.
*/

void ReforecastSettings::print(std::ostream &stream, uint level, uint optionFlags) const {
  try {
    stream << space(level) << "ReforecastSettings\n";
    stream << space(level) << "- YearOfModelVersion = " << toString(mYearOfModelVersion) << "\n";
    stream << space(level) << "- MonthOfModelVersion = " << toString(mMonthOfModelVersion) << "\n";
    stream << space(level) << "- DayOfModelVersion = " << toString(mDayOfModelVersion) << "\n";
    stream << space(level) << "- HourOfModelVersion = " << toString(mHourOfModelVersion) << "\n";
    stream << space(level) << "- MinuteOfModelVersion = " << toString(mMinuteOfModelVersion) << "\n";
    stream << space(level) << "- SecondOfModelVersion = " << toString(mSecondOfModelVersion) << "\n";
  } catch (...) {
    throw Fmi::Exception(BCP, "Operation failed", nullptr);
  }
}

/*! \brief The method counts the hash value of the current object. */

T::Hash ReforecastSettings::countHash() const {
  try {
    std::size_t seed = 0;
    if (mYearOfModelVersion)
      Fmi::hash_merge(seed, *mYearOfModelVersion);
    if (mMonthOfModelVersion)
      Fmi::hash_merge(seed, *mMonthOfModelVersion);
    if (mDayOfModelVersion)
      Fmi::hash_merge(seed, *mDayOfModelVersion);
    if (mHourOfModelVersion)
      Fmi::hash_merge(seed, *mHourOfModelVersion);
    if (mMinuteOfModelVersion)
      Fmi::hash_merge(seed, *mMinuteOfModelVersion);
    if (mSecondOfModelVersion)
      Fmi::hash_merge(seed, *mSecondOfModelVersion);
    return seed;
  } catch (...) {
    throw Fmi::Exception(BCP, "Operation failed", nullptr);
  }
}

/*! \brief The method returns the value of the {@link mYearOfModelVersion} attribute. */

const T::UInt16_opt &ReforecastSettings::getYearOfModelVersion() const {
  try {
    return mYearOfModelVersion;
  } catch (...) {
    throw Fmi::Exception(BCP, "Operation failed", nullptr);
  }
}

/*! \brief The method returns the value of the {@link mMonthOfModelVersion} attribute. */

const T::UInt8_opt &ReforecastSettings::getMonthOfModelVersion() const {
  try {
    return mMonthOfModelVersion;
  } catch (...) {
    throw Fmi::Exception(BCP, "Operation failed", nullptr);
  }
}

/*! \brief The method returns the value of the {@link mDayOfModelVersion} attribute. */

const T::UInt8_opt &ReforecastSettings::getDayOfModelVersion() const {
  try {
    return mDayOfModelVersion;
  } catch (...) {
    throw Fmi::Exception(BCP, "Operation failed", nullptr);
  }
}

/*! \brief The method returns the value of the {@link mHourOfModelVersion} attribute. */

const T::UInt8_opt &ReforecastSettings::getHourOfModelVersion() const {
  try {
    return mHourOfModelVersion;
  } catch (...) {
    throw Fmi::Exception(BCP, "Operation failed", nullptr);
  }
}

/*! \brief The method returns the value of the {@link mMinuteOfModelVersion} attribute. */

const T::UInt8_opt &ReforecastSettings::getMinuteOfModelVersion() const {
  try {
    return mMinuteOfModelVersion;
  } catch (...) {
    throw Fmi::Exception(BCP, "Operation failed", nullptr);
  }
}

/*! \brief The method returns the value of the {@link mSecondOfModelVersion} attribute. */

const T::UInt8_opt &ReforecastSettings::getSecondOfModelVersion() const {
  try {
    return mSecondOfModelVersion;
  } catch (...) {
    throw Fmi::Exception(BCP, "Operation failed", nullptr);
  }
}

void ReforecastSettings::setYearOfModelVersion(T::UInt16_opt yearOfModelVersion) {
  try {
    mYearOfModelVersion = yearOfModelVersion;
  } catch (...) {
    throw Fmi::Exception(BCP, "Operation failed", nullptr);
  }
}

void ReforecastSettings::setMonthOfModelVersion(T::UInt8_opt monthOfModelVersion) {
  try {
    mMonthOfModelVersion = monthOfModelVersion;
  } catch (...) {
    throw Fmi::Exception(BCP, "Operation failed", nullptr);
  }
}

void ReforecastSettings::setDayOfModelVersion(T::UInt8_opt dayOfModelVersion) {
  try {
    mDayOfModelVersion = dayOfModelVersion;
  } catch (...) {
    throw Fmi::Exception(BCP, "Operation failed", nullptr);
  }
}

void ReforecastSettings::setHourOfModelVersion(T::UInt8_opt hourOfModelVersion) {
  try {
    mHourOfModelVersion = hourOfModelVersion;
  } catch (...) {
    throw Fmi::Exception(BCP, "Operation failed", nullptr);
  }
}

void ReforecastSettings::setMinuteOfModelVersion(T::UInt8_opt minuteOfModelVersion) {
  try {
    mMinuteOfModelVersion = minuteOfModelVersion;
  } catch (...) {
    throw Fmi::Exception(BCP, "Operation failed", nullptr);
  }
}

void ReforecastSettings::setSecondOfModelVersion(T::UInt8_opt secondOfModelVersion) {
  try {
    mSecondOfModelVersion = secondOfModelVersion;
  } catch (...) {
    throw Fmi::Exception(BCP, "Operation failed", nullptr);
  }
}

} // namespace GRIB2
} // namespace SmartMet
