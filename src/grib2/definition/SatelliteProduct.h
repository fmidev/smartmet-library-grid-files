// ***********************************************************************
//                      DO NOT EDIT THIS FILE !!!
// ***********************************************************************
//   This file is automatically generated from the grib_api templates. All
//   changes will be overridden. If you want to do permanent changes then
//   you should write them into the 'SatelliteProductImpl.*' files.
// ***********************************************************************

#pragma once
#include "../../common/AttributeList.h"
#include "../../common/DataWriter.h"
#include "../../common/MemoryReader.h"
#include "../../grid/Typedefs.h"
#include "../ProductDefinition.h"

namespace SmartMet {
namespace GRIB2 {
/*! \brief The class is automatically created from the template (4.31).*/

class SatelliteProduct : public ProductDefinition {
public:
  SatelliteProduct();
  ~SatelliteProduct() override;

  uint getTemplateNumber() const override;
  ProductDefinition *createProductDefinition() const override;
  void read(MemoryReader &memoryReader) override;
  void write(DataWriter &dataWriter) override;
  void getAttributeList(const std::string &prefix, T::AttributeList &attributeList) const override;
  void print(std::ostream &stream, uint level, uint optionFlags) const override;
  virtual T::Hash countHash();

  const T::UInt8_opt &getParameterCategory() const;
  void setParameterCategory(T::UInt8_opt parameterCategory);
  const T::UInt8_opt &getParameterNumber() const;
  void setParameterNumber(T::UInt8_opt parameterNumber);
  const T::UInt8_opt &getTypeOfGeneratingProcess() const;
  void setTypeOfGeneratingProcess(T::UInt8_opt typeOfGeneratingProcess);
  const T::UInt8_opt &getObservationGeneratingProcessIdentifier() const;
  void setObservationGeneratingProcessIdentifier(T::UInt8_opt observationGeneratingProcessIdentifier);
  const T::UInt8_opt &getNB() const;
  void setNB(T::UInt8_opt nB);
  const T::UInt16_opt &getSatelliteSeries() const;
  void setSatelliteSeries(T::UInt16_opt satelliteSeries);
  const T::UInt16_opt &getSatelliteNumber() const;
  void setSatelliteNumber(T::UInt16_opt satelliteNumber);
  const T::UInt16_opt &getInstrumentType() const;
  void setInstrumentType(T::UInt16_opt instrumentType);
  const T::UInt8_opt &getScaleFactorOfCentralWaveNumber() const;
  void setScaleFactorOfCentralWaveNumber(T::UInt8_opt scaleFactorOfCentralWaveNumber);
  const T::UInt32_opt &getScaledValueOfCentralWaveNumber() const;
  void setScaledValueOfCentralWaveNumber(T::UInt32_opt scaledValueOfCentralWaveNumber);

protected:
  // # Copyright 2005-2019 ECMWF.
  //
  // # For grib2 to grib1 conversion
  // constant dataRepresentationType = 90;
  //
  // # TEMPLATE 4.31, Satellite Product
  // codetable[1] parameterCategory ('4.1.[discipline:l].table',masterDir,localDir)  : dump;

  T::UInt8_opt mParameterCategory;

  // codetable[1] parameterNumber ('4.2.[discipline:l].[parameterCategory:l].table',masterDir,localDir)  : dump;

  T::UInt8_opt mParameterNumber;

  // meta parameterUnits codetable_units(parameterNumber) : dump;
  // meta parameterName  codetable_title(parameterNumber) : dump;
  //
  // codetable[1] typeOfGeneratingProcess ('4.3.table',masterDir,localDir) : dump;

  T::UInt8_opt mTypeOfGeneratingProcess;

  //
  // #  Observation generating process identifier (defined by originating centre)
  // unsigned[1] observationGeneratingProcessIdentifier  : dump;

  T::UInt8_opt mObservationGeneratingProcessIdentifier;

  // alias generatingProcessIdentifier=observationGeneratingProcessIdentifier;
  //
  // unsigned[1] NB  : dump;

  T::UInt8_opt mNB;

  // alias numberOfContributingSpectralBands=NB;
  //
  // listOfContributingSpectralBands list(numberOfContributingSpectralBands){
  //       unsigned[2] satelliteSeries : dump;

  T::UInt16_opt mSatelliteSeries;

  //       unsigned[2] satelliteNumber : dump;

  T::UInt16_opt mSatelliteNumber;

  //       unsigned[2] instrumentType : dump;

  T::UInt16_opt mInstrumentType;

  //       unsigned[1] scaleFactorOfCentralWaveNumber = missing() : dump,can_be_missing ;

  T::UInt8_opt mScaleFactorOfCentralWaveNumber;

  //       unsigned[4] scaledValueOfCentralWaveNumber = missing() : dump,can_be_missing ;

  T::UInt32_opt mScaledValueOfCentralWaveNumber;

  // }
};

} // namespace GRIB2
} // namespace SmartMet
