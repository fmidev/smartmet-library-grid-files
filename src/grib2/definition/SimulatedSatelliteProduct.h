// ***********************************************************************
//                      DO NOT EDIT THIS FILE !!!
// ***********************************************************************
//   This file is automatically generated from the grib_api templates. All
//   changes will be overridden. If you want to do permanent changes then
//   you should write them into the 'SimulatedSatelliteProductImpl.*' files.
// ***********************************************************************

#pragma once
#include "../../common/AttributeList.h"
#include "../../common/DataWriter.h"
#include "../../common/MemoryReader.h"
#include "../../grid/Typedefs.h"
#include "../ProductDefinition.h"
#include "ParameterSettings.h"
#include "PointInTimeSettings.h"

namespace SmartMet {
namespace GRIB2 {
/*! \brief The class is automatically created from the template (4.32).*/

class SimulatedSatelliteProduct : public ProductDefinition {
public:
  SimulatedSatelliteProduct();
  SimulatedSatelliteProduct(const SimulatedSatelliteProduct &other);
  virtual ~SimulatedSatelliteProduct();

  virtual uint getTemplateNumber() const;
  virtual ProductDefinition *createProductDefinition() const;
  virtual void read(MemoryReader &memoryReader);
  virtual void write(DataWriter &dataWriter);
  virtual void getAttributeList(std::string prefix, T::AttributeList &attributeList) const;
  virtual void print(std::ostream &stream, uint level, uint optionFlags) const;
  virtual T::Hash countHash();

  ParameterSettings *getParameter() const;
  void setParameter(ParameterSettings &parameter);
  PointInTimeSettings *getPointInTime() const;
  void setPointInTime(PointInTimeSettings &pointInTime);
  const T::UInt8_opt &getNB() const;
  void setNB(T::UInt8_opt nB);
  const T::UInt16_opt &getSatelliteSeries() const;
  void setSatelliteSeries(T::UInt16_opt satelliteSeries);
  const T::UInt16_opt &getSatelliteNumber() const;
  void setSatelliteNumber(T::UInt16_opt satelliteNumber);
  const T::UInt16_opt &getInstrumentType() const;
  void setInstrumentType(T::UInt16_opt instrumentType);
  const T::UInt8_opt &getScaleFactorOfCentralWaveNumber() const;
  void setScaleFactorOfCentralWaveNumber(T::UInt8_opt scaleFactorOfCentralWaveNumber);
  const T::UInt32_opt &getScaledValueOfCentralWaveNumber() const;
  void setScaledValueOfCentralWaveNumber(T::UInt32_opt scaledValueOfCentralWaveNumber);

protected:
  // # Copyright 2005-2017 ECMWF.
  // #
  // # This software is licensed under the terms of the Apache Licence Version 2.0
  // # which can be obtained at http://www.apache.org/licenses/LICENSE-2.0.
  // #
  // # In applying this licence, ECMWF does not waive the privileges and immunities granted to it by
  // # virtue of its status as an intergovernmental organisation nor does it submit to any jurisdiction.
  // #
  //
  // # For grib2 to grib1 convertion
  // constant dataRepresentationType = 90;
  //
  //
  // # START template.4.32 ----------------------------------------------------------------------
  // # TEMPLATE 4.32, Analysis or forecast at a horizontal level or in a horizontal layer at a point in time for simulated (synthetic) satellite data
  //
  // include "grib2/template.4.parameter.def"

  mutable ParameterSettings mParameter;

  // include "grib2/template.4.point_in_time.def";

  mutable PointInTimeSettings mPointInTime;

  //
  // # Required for interpolation and MARS. The level type is used to decide whether to apply the Land Sea Mask
  // constant typeOfLevel="surface";
  // constant levelType="surface";
  // constant level=0;
  //
  //
  // #  Number of contributing spectral bands (NB)
  // unsigned[1] NB  : dump;

  T::UInt8_opt mNB;

  // alias numberOfContributingSpectralBands=NB;
  //
  // listOfContributingSpectralBands list(numberOfContributingSpectralBands){
  //       unsigned[2] satelliteSeries : dump;

  T::UInt16_opt mSatelliteSeries;

  //       unsigned[2] satelliteNumber : dump;

  T::UInt16_opt mSatelliteNumber;

  //       unsigned[2] instrumentType : dump;

  T::UInt16_opt mInstrumentType;

  //       unsigned[1] scaleFactorOfCentralWaveNumber = missing() : dump,can_be_missing ;

  T::UInt8_opt mScaleFactorOfCentralWaveNumber;

  //       unsigned[4] scaledValueOfCentralWaveNumber = missing() : dump,can_be_missing ;

  T::UInt32_opt mScaledValueOfCentralWaveNumber;

  // }
  //
  // # END template.4.32 ----------------------------------------------------------------------
  //
};

} // namespace GRIB2
} // namespace SmartMet
