// ***********************************************************************
//                      DO NOT EDIT THIS FILE !!!
// ***********************************************************************
//   This file is automatically generated from the grib_api templates. All
//   changes will be overridden. If you want to do permanent changes then
//   you should write them into the 'SpaceViewImpl.*' files.
// ***********************************************************************

#pragma once
#include "common/AttributeList.h"
#include "common/MemoryReader.h"
#include "grib2/GridDefinition.h"
#include "grib2/definition/EarthShapeSettings.h"
#include "grib2/definition/ResolutionSettings.h"
#include "grib2/definition/ScanningModeSettings.h"
#include "grid/Typedefs.h"

namespace SmartMet {
namespace GRIB2 {
/*! \brief The class is automatically created from the template (3.90).*/

class SpaceView : public GridDefinition {
public:
  SpaceView();
  virtual ~SpaceView();

  virtual void read(MemoryReader &memoryReader);
  virtual void getAttributeList(std::string prefix,
                                T::AttributeList &attributeList) const;
  virtual void print(std::ostream &stream, uint level, uint optionFlags) const;
  virtual T::Hash countHash();

  const EarthShapeSettings *getEarthShape() const;
  const T::UInt32_opt &getNx() const;
  const T::UInt32_opt &getNy() const;
  const T::Int32_opt &getLatitudeOfSubSatellitePoint() const;
  const T::Int32_opt &getLongitudeOfSubSatellitePoint() const;
  const ResolutionSettings *getResolution() const;
  const T::UInt32_opt &getDx() const;
  const T::UInt32_opt &getDy() const;
  const T::UInt32_opt &getXp() const;
  const T::UInt32_opt &getYp() const;
  const ScanningModeSettings *getScanningMode() const;
  const T::Int32_opt &getOrientationOfTheGrid() const;
  const T::UInt32_opt &getNr() const;
  const T::UInt32_opt &getXo() const;
  const T::UInt32_opt &getYo() const;

protected:
  // # Copyright 2005-2015 ECMWF.
  // #
  // # This software is licensed under the terms of the Apache Licence Version
  // 2.0
  // # which can be obtained at http://www.apache.org/licenses/LICENSE-2.0.
  // #
  // # In applying this licence, ECMWF does not waive the privileges and
  // immunities granted to it by
  // # virtue of its status as an intergovernmental organisation nor does it
  // submit to any jurisdiction.
  // #
  //
  //
  // # START 2/template.3.90
  // ----------------------------------------------------------------------
  // # TEMPLATE 3.90, Space view perspective or orthographic
  // include "template.3.shape_of_the_earth.def";

  EarthShapeSettings mEarthShape;

  //
  // unsigned[4] Nx  : dump;

  T::UInt32_opt mNx;

  // alias Ni  = Nx;
  // alias numberOfPointsAlongXAxis  = Nx;
  // alias geography.Nx=Nx;
  //
  // unsigned[4] Ny  : dump;

  T::UInt32_opt mNy;

  // alias Nj  = Ny;
  // alias numberOfPointsAlongYAxis  = Ny;
  // alias geography.Ny=Ny;
  //
  // #  Lap - latitude of sub-satellite point
  // signed[4] latitudeOfSubSatellitePoint ;

  T::Int32_opt mLatitudeOfSubSatellitePoint;

  //
  // #  Lop - longitude of sub-satellite point
  // signed[4] longitudeOfSubSatellitePoint ;

  T::Int32_opt mLongitudeOfSubSatellitePoint;

  //
  // meta  geography.latitudeOfSubSatellitePointInDegrees
  // scale(latitudeOfSubSatellitePoint,one,grib2divider,truncateDegrees) : dump;
  // meta  geography.longitudeOfSubSatellitePointInDegrees
  // scale(longitudeOfSubSatellitePoint,one,grib2divider,truncateDegrees) :
  // dump;
  //
  // include "template.3.resolution_flags.def";

  ResolutionSettings mResolution;

  //
  // #  dx - apparent diameter of Earth in grid lengths, in X-direction
  // unsigned[4]  dx : dump;

  T::UInt32_opt mDx;

  // alias geography.dx=dx;
  //
  // #  dy - apparent diameter of Earth in grid lengths, in Y-direction
  // unsigned[4] dy  : dump;

  T::UInt32_opt mDy;

  // alias geography.dy=dy;
  //
  // #  Xp - X-coordinate of sub-satellite point
  // # (in units of 10-3 grid length expressed as an integer)
  // unsigned[4] Xp  : no_copy;

  T::UInt32_opt mXp;

  // meta  geography.XpInGridLengths scale(Xp,one,thousand) : dump;
  // alias xCoordinateOfSubSatellitePoint=XpInGridLengths;
  //
  // #  Yp - Y-coordinate of sub-satellite point
  // # (in units of 10-3 grid length expressed as an integer)
  // unsigned[4] Yp  : no_copy;

  T::UInt32_opt mYp;

  // meta  geography.YpInGridLengths scale(Yp,one,thousand) : dump;
  // alias yCoordinateOfSubSatellitePoint=YpInGridLengths;
  //
  // include "template.3.scanning_mode.def";

  ScanningModeSettings mScanningMode;

  //
  // #  Orientation of the grid; i.e., the angle between the increasing Y-axis
  // and the meridian of the sub-satellite point in the direction of increasing
  // latitude
  // signed[4] orientationOfTheGrid : edition_specific;

  T::Int32_opt mOrientationOfTheGrid;

  // meta geography.orientationOfTheGridInDegrees
  //     scale(orientationOfTheGrid,oneConstant,grib2divider,truncateDegrees) :
  //     dump;
  //
  // #  Nr - altitude of the camera from the Earth's centre, measured in units
  // of the Earth's
  // # (equatorial)
  // unsigned[4] Nr : edition_specific,no_copy;

  T::UInt32_opt mNr;

  // alias altitudeOfTheCameraFromTheEarthSCenterMeasuredInUnitsOfTheEarth = Nr;
  // meta geography.NrInRadiusOfEarth
  // scale(Nr,oneConstant,oneMillionConstant,truncateDegrees) : dump;
  //
  // #  Xo - X-coordinate of origin of sector image
  // unsigned[4] Xo  : dump;

  T::UInt32_opt mXo;

  // alias xCoordinateOfOriginOfSectorImage=Xo;
  // alias geography.Xo=Xo;
  //
  // #  Yo - Y-coordinate of origin of sector image
  // unsigned[4] Yo  : dump;

  T::UInt32_opt mYo;

  // alias yCoordinateOfOriginOfSectorImage=Yo;
  // alias geography.Yo=Yo;
  //
};

} // namespace GRIB2
} // namespace SmartMet
