// ***********************************************************************
//                      DO NOT EDIT THIS FILE !!!
// ***********************************************************************
//   This file is automatically generated from the grib_api templates. All
//   changes will be overridden. If you want to do permanent changes then
//   you should write them into the 'SpectralGridDataRepresentationImpl.*' files.
// ***********************************************************************

#pragma once
#include "../../common/AttributeList.h"
#include "../../common/DataWriter.h"
#include "../../common/MemoryReader.h"
#include "../../grid/Typedefs.h"
#include "../RepresentationDefinition.h"
#include "OriginalValuesSettings.h"
#include "PackingSettings.h"

namespace SmartMet {
namespace GRIB2 {
/*! \brief The class is automatically created from the template (5.42).*/

class SpectralGridDataRepresentation : public RepresentationDefinition {
public:
  SpectralGridDataRepresentation();
  SpectralGridDataRepresentation(const SpectralGridDataRepresentation &other);
  virtual ~SpectralGridDataRepresentation();

  virtual uint getTemplateNumber() const;
  virtual RepresentationDefinition *createRepresentationDefinition() const;
  virtual void read(MemoryReader &memoryReader);
  virtual void write(DataWriter &dataWriter);
  virtual void getAttributeList(std::string prefix, T::AttributeList &attributeList) const;
  virtual void print(std::ostream &stream, uint level, uint optionFlags) const;
  virtual T::Hash countHash();

  PackingSettings *getPacking() const;
  void setPacking(PackingSettings &packing);
  OriginalValuesSettings *getOriginalValues() const;
  void setOriginalValues(OriginalValuesSettings &originalValues);
  const T::UInt8_opt &getCcsdsFlags() const;
  void setCcsdsFlags(T::UInt8_opt ccsdsFlags);
  const T::UInt8_opt &getCcsdsBlockSize() const;
  void setCcsdsBlockSize(T::UInt8_opt ccsdsBlockSize);
  const T::UInt16_opt &getCcsdsRsi() const;
  void setCcsdsRsi(T::UInt16_opt ccsdsRsi);

protected:
  // # Copyright 2005-2017 ECMWF.
  // #
  // # This software is licensed under the terms of the Apache Licence Version 2.0
  // # which can be obtained at http://www.apache.org/licenses/LICENSE-2.0.
  // #
  // # In applying this licence, ECMWF does not waive the privileges and immunities granted to it by
  // # virtue of its status as an intergovernmental organisation nor does it submit to any jurisdiction.
  // #
  //
  // # TEMPLATE 5.42, Grid point and spectral data - CCSDS recommended lossless compression
  //
  // include "grib2/template.5.packing.def";

  mutable PackingSettings mPacking;

  // include "grib2/template.5.original_values.def";

  mutable OriginalValuesSettings mOriginalValues;

  //
  // unsigned[1] ccsdsFlags : dump;

  T::UInt8_opt mCcsdsFlags;

  // alias ccsdsCompressionOptionsMask=ccsdsFlags;
  //
  // flagbit AEC_DATA_SIGNED_OPTION_MASK(ccsdsFlags,0)     = 0;
  //
  // # AEC_DATA_3BYTE_OPTION_MASK was switched on in order to allow data stored
  // # with 17 <=bitsPerValue<= 24 to be stored in 3 rather than 4 bytes.
  // # This eliminates discretization errors that were occuring when it was off.
  // flagbit AEC_DATA_3BYTE_OPTION_MASK(ccsdsFlags,1)      = 1;
  //
  // flagbit AEC_DATA_MSB_OPTION_MASK(ccsdsFlags,2)        = 1;
  // flagbit AEC_DATA_PREPROCESS_OPTION_MASK(ccsdsFlags,3) = 1;
  // flagbit AEC_RESTRICTED_OPTION_MASK(ccsdsFlags,4)      = 0;
  // flagbit AEC_PAD_RSI_OPTION_MASK(ccsdsFlags,5)         = 0;
  //
  // unsigned[1] ccsdsBlockSize = 32 : dump;

  T::UInt8_opt mCcsdsBlockSize;

  // unsigned[2] ccsdsRsi = 128      : dump;

  T::UInt16_opt mCcsdsRsi;

  // alias referenceSampleInterval=ccsdsRsi;
};

} // namespace GRIB2
} // namespace SmartMet
