// ***********************************************************************
//                      DO NOT EDIT THIS FILE !!!
// ***********************************************************************
//   This file is automatically generated from the grib_api templates. All
//   changes will be overridden. If you want to do permanent changes then
//   you should write them into the 'SphericalHarmonicSettingsImpl.*' files.
// ***********************************************************************

#pragma once
#include "../../common/AttributeList.h"
#include "../../common/DataWriter.h"
#include "../../common/MemoryReader.h"
#include "../../grid/Typedefs.h"

namespace SmartMet {
namespace GRIB2 {
/*! \brief The class is automatically created from the template (3.spherical_harmonics).*/

class SphericalHarmonicSettings {
public:
  SphericalHarmonicSettings();
  virtual ~SphericalHarmonicSettings();

  virtual void read(MemoryReader &memoryReader);
  virtual void write(DataWriter &dataWriter);
  virtual void getAttributeList(const std::string &prefix, T::AttributeList &attributeList) const;
  virtual bool getAttributeValue(const char *attributeName, std::string &attributeValue) const;
  virtual bool hasAttributeValue(const char *attributeName, const char *attributeValue) const;
  virtual void print(std::ostream &stream, uint level, uint optionFlags) const;
  virtual T::Hash countHash() const;

  const T::UInt32_opt &getJ() const;
  void setJ(T::UInt32_opt j);
  const T::UInt32_opt &getK() const;
  void setK(T::UInt32_opt k);
  const T::UInt32_opt &getM() const;
  void setM(T::UInt32_opt m);
  const T::UInt8_opt &getSpectralType() const;
  void setSpectralType(T::UInt8_opt spectralType);
  const T::UInt8_opt &getSpectralMode() const;
  void setSpectralMode(T::UInt8_opt spectralMode);

protected:
  // # Copyright 2005-2019 ECMWF.
  //
  // constant sphericalHarmonics=1;
  //
  // # constant dataRepresentationType  = 50;
  //
  // #  J - pentagonal resolution parameter
  // unsigned[4] J  : dump;

  T::UInt32_opt mJ;

  // alias pentagonalResolutionParameterJ=J ;
  // alias geography.J=J;
  //
  // #  K - pentagonal resolution parameter
  // unsigned[4] K   : dump;

  T::UInt32_opt mK;

  // alias pentagonalResolutionParameterK=K;
  // alias geography.K=K;
  //
  // #  M - pentagonal resolution parameter
  // unsigned[4] M   : dump;

  T::UInt32_opt mM;

  // alias pentagonalResolutionParameterM = M ;
  // alias geography.M=M;
  //
  // #  Representation type indicating the method used to define the norm
  // codetable[1]  spectralType ('3.6.table',masterDir,localDir) = 1 : no_copy;

  T::UInt8_opt mSpectralType;

  // alias spectralDataRepresentationType=spectralType;
  //
  // #  Representation mode indicating the order of the coefficients
  // codetable[1] spectralMode ('3.7.table',masterDir,localDir) = 1 : no_copy;

  T::UInt8_opt mSpectralMode;

  // alias spectralDataRepresentationMode=spectralMode;
};

} // namespace GRIB2
} // namespace SmartMet
