// ***********************************************************************
//                      DO NOT EDIT THIS FILE !!!
// ***********************************************************************
//   This file is automatically generated from the grib_api templates. All
//   changes will be overridden. If you want to do permanent changes then
//   you should write them into the 'SphericalHarmonicsDataRepresentationImpl.*' files.
// ***********************************************************************

#include "SphericalHarmonicsDataRepresentation.h"
#include "../../common/GeneralDefinitions.h"
#include "../../common/GeneralFunctions.h"
#include <boost/functional/hash.hpp>
#include <iostream>
#include <macgyver/Exception.h>

namespace SmartMet {
namespace GRIB2 {

/*! \brief The constructor of the class. */

SphericalHarmonicsDataRepresentation::SphericalHarmonicsDataRepresentation() {
  try {
  } catch (...) {
    throw Fmi::Exception(BCP, "Operation failed", nullptr);
  }
}

/*! \brief The destructor of the class. */

SphericalHarmonicsDataRepresentation::~SphericalHarmonicsDataRepresentation() {
}

/*! \brief The method reads and initializes all data related to the current object.

        \param memoryReader  This object controls the access to the memory mapped file.
*/

void SphericalHarmonicsDataRepresentation::read(MemoryReader &memoryReader) {
  try {
    mPacking.read(memoryReader);
    mLaplacianScalingFactor = memoryReader.read_Int32_opt();
    mJS = memoryReader.read_UInt16_opt();
    mKS = memoryReader.read_UInt16_opt();
    mMS = memoryReader.read_UInt16_opt();
    mTS = memoryReader.read_UInt32_opt();
    mUnpackedSubsetPrecision = memoryReader.read_UInt8_opt();
  } catch (...) {
    throw Fmi::Exception(BCP, "Operation failed", nullptr);
  }
}

/*! \brief The method writes all data related to the current object.

        \param dataWriter  This object is used for writing the object data.
*/

void SphericalHarmonicsDataRepresentation::write(DataWriter &dataWriter) {
  try {
    mPacking.write(dataWriter);
    dataWriter << mLaplacianScalingFactor;
    dataWriter << mJS;
    dataWriter << mKS;
    dataWriter << mMS;
    dataWriter << mTS;
    dataWriter << mUnpackedSubsetPrecision;
  } catch (...) {
    throw Fmi::Exception(BCP, "Operation failed", nullptr);
  }
}

/*! \brief The method is used for collecting the current class attributeList.

    \param prefix         The prefix of the each attributeList parameter.
    \param attributeList  The attributeList storage.
*/

void SphericalHarmonicsDataRepresentation::getAttributeList(std::string prefix, T::AttributeList &attributeList) const {
  try {
    char name[300];
    sprintf(name, "%sSphericalHarmonicsDataRepresentation.", prefix.c_str());
    mPacking.getAttributeList(name, attributeList);
    sprintf(name, "%sSphericalHarmonicsDataRepresentation.LaplacianScalingFactor", prefix.c_str());
    attributeList.addAttribute(name, toString(mLaplacianScalingFactor));
    sprintf(name, "%sSphericalHarmonicsDataRepresentation.JS", prefix.c_str());
    attributeList.addAttribute(name, toString(mJS));
    sprintf(name, "%sSphericalHarmonicsDataRepresentation.KS", prefix.c_str());
    attributeList.addAttribute(name, toString(mKS));
    sprintf(name, "%sSphericalHarmonicsDataRepresentation.MS", prefix.c_str());
    attributeList.addAttribute(name, toString(mMS));
    sprintf(name, "%sSphericalHarmonicsDataRepresentation.TS", prefix.c_str());
    attributeList.addAttribute(name, toString(mTS));
    sprintf(name, "%sSphericalHarmonicsDataRepresentation.UnpackedSubsetPrecision", prefix.c_str());
    attributeList.addAttribute(name, toString(mUnpackedSubsetPrecision));
  } catch (...) {
    throw Fmi::Exception(BCP, "Operation failed", nullptr);
  }
}

/*! \brief The method prints the content of the current object into the given stream.

    \param ostream      The output stream.
    \param level        The print level (used when printing multi-level structures).
    \param optionFlags  The printing options expressed in flag-bits.
*/

void SphericalHarmonicsDataRepresentation::print(std::ostream &stream, uint level, uint optionFlags) const {
  try {
    stream << space(level) << "SphericalHarmonicsDataRepresentation\n";
    mPacking.print(stream, level + 1, optionFlags);
    stream << space(level) << "- LaplacianScalingFactor = " << toString(mLaplacianScalingFactor) << "\n";
    stream << space(level) << "- JS = " << toString(mJS) << "\n";
    stream << space(level) << "- KS = " << toString(mKS) << "\n";
    stream << space(level) << "- MS = " << toString(mMS) << "\n";
    stream << space(level) << "- TS = " << toString(mTS) << "\n";
    stream << space(level) << "- UnpackedSubsetPrecision = " << toString(mUnpackedSubsetPrecision) << "\n";
  } catch (...) {
    throw Fmi::Exception(BCP, "Operation failed", nullptr);
  }
}

/*! \brief The method counts the hash value of the current object. */

T::Hash SphericalHarmonicsDataRepresentation::countHash() {
  try {
    std::size_t seed = 0;
    if (mLaplacianScalingFactor)
      boost::hash_combine(seed, *mLaplacianScalingFactor);
    if (mJS)
      boost::hash_combine(seed, *mJS);
    if (mKS)
      boost::hash_combine(seed, *mKS);
    if (mMS)
      boost::hash_combine(seed, *mMS);
    if (mTS)
      boost::hash_combine(seed, *mTS);
    if (mUnpackedSubsetPrecision)
      boost::hash_combine(seed, *mUnpackedSubsetPrecision);
    boost::hash_combine(seed, mPacking.countHash());
    return seed;
  } catch (...) {
    throw Fmi::Exception(BCP, "Operation failed", nullptr);
  }
}

/*! \brief The method return the template number of the current class. */

uint SphericalHarmonicsDataRepresentation::getTemplateNumber() const {
  return 51;
}

RepresentationDefinition *SphericalHarmonicsDataRepresentation::createRepresentationDefinition() const {
  try {
    return static_cast<RepresentationDefinition *>(new SphericalHarmonicsDataRepresentation(*this));
  } catch (...) {
    throw Fmi::Exception(BCP, "Operation failed", nullptr);
  }
}

/*! \brief The method returns the pointer to the {@link mPacking} attribute. */

PackingSettings *SphericalHarmonicsDataRepresentation::getPacking() const {
  try {
    return static_cast<PackingSettings *>(&mPacking);
  } catch (...) {
    throw Fmi::Exception(BCP, "Operation failed", nullptr);
  }
}

/*! \brief The method returns the value of the {@link mLaplacianScalingFactor} attribute. */

const T::Int32_opt &SphericalHarmonicsDataRepresentation::getLaplacianScalingFactor() const {
  try {
    return mLaplacianScalingFactor;
  } catch (...) {
    throw Fmi::Exception(BCP, "Operation failed", nullptr);
  }
}

/*! \brief The method returns the value of the {@link mJS} attribute. */

const T::UInt16_opt &SphericalHarmonicsDataRepresentation::getJS() const {
  try {
    return mJS;
  } catch (...) {
    throw Fmi::Exception(BCP, "Operation failed", nullptr);
  }
}

/*! \brief The method returns the value of the {@link mKS} attribute. */

const T::UInt16_opt &SphericalHarmonicsDataRepresentation::getKS() const {
  try {
    return mKS;
  } catch (...) {
    throw Fmi::Exception(BCP, "Operation failed", nullptr);
  }
}

/*! \brief The method returns the value of the {@link mMS} attribute. */

const T::UInt16_opt &SphericalHarmonicsDataRepresentation::getMS() const {
  try {
    return mMS;
  } catch (...) {
    throw Fmi::Exception(BCP, "Operation failed", nullptr);
  }
}

/*! \brief The method returns the value of the {@link mTS} attribute. */

const T::UInt32_opt &SphericalHarmonicsDataRepresentation::getTS() const {
  try {
    return mTS;
  } catch (...) {
    throw Fmi::Exception(BCP, "Operation failed", nullptr);
  }
}

/*! \brief The method returns the value of the {@link mUnpackedSubsetPrecision} attribute. */

const T::UInt8_opt &SphericalHarmonicsDataRepresentation::getUnpackedSubsetPrecision() const {
  try {
    return mUnpackedSubsetPrecision;
  } catch (...) {
    throw Fmi::Exception(BCP, "Operation failed", nullptr);
  }
}

void SphericalHarmonicsDataRepresentation::setPacking(PackingSettings &packing) {
  try {
    mPacking = packing;
  } catch (...) {
    throw Fmi::Exception(BCP, "Operation failed", nullptr);
  }
}

void SphericalHarmonicsDataRepresentation::setLaplacianScalingFactor(T::Int32_opt laplacianScalingFactor) {
  try {
    mLaplacianScalingFactor = laplacianScalingFactor;
  } catch (...) {
    throw Fmi::Exception(BCP, "Operation failed", nullptr);
  }
}

void SphericalHarmonicsDataRepresentation::setJS(T::UInt16_opt jS) {
  try {
    mJS = jS;
  } catch (...) {
    throw Fmi::Exception(BCP, "Operation failed", nullptr);
  }
}

void SphericalHarmonicsDataRepresentation::setKS(T::UInt16_opt kS) {
  try {
    mKS = kS;
  } catch (...) {
    throw Fmi::Exception(BCP, "Operation failed", nullptr);
  }
}

void SphericalHarmonicsDataRepresentation::setMS(T::UInt16_opt mS) {
  try {
    mMS = mS;
  } catch (...) {
    throw Fmi::Exception(BCP, "Operation failed", nullptr);
  }
}

void SphericalHarmonicsDataRepresentation::setTS(T::UInt32_opt tS) {
  try {
    mTS = tS;
  } catch (...) {
    throw Fmi::Exception(BCP, "Operation failed", nullptr);
  }
}

void SphericalHarmonicsDataRepresentation::setUnpackedSubsetPrecision(T::UInt8_opt unpackedSubsetPrecision) {
  try {
    mUnpackedSubsetPrecision = unpackedSubsetPrecision;
  } catch (...) {
    throw Fmi::Exception(BCP, "Operation failed", nullptr);
  }
}

} // namespace GRIB2
} // namespace SmartMet
