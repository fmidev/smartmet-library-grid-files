// ***********************************************************************
//                      DO NOT EDIT THIS FILE !!!
// ***********************************************************************
//   This file is automatically generated from the grib_api templates. All
//   changes will be overridden. If you want to do permanent changes then
//   you should write them into the 'TimeIntervalAggregateForecastImpl.*' files.
// ***********************************************************************

#pragma once
#include "../../common/AttributeList.h"
#include "../../common/DataWriter.h"
#include "../../common/MemoryReader.h"
#include "../../grid/Typedefs.h"
#include "../ProductDefinition.h"
#include "HorizontalSettings.h"
#include "ParameterSettings.h"
#include "PointInTimeSettings.h"

namespace SmartMet {
namespace GRIB2 {
/*! \brief The class is automatically created from the template (4.15).*/

class TimeIntervalAggregateForecast : public ProductDefinition {
public:
  TimeIntervalAggregateForecast();
  virtual ~TimeIntervalAggregateForecast();

  virtual uint getTemplateNumber() const;
  virtual ProductDefinition *createProductDefinition() const;
  virtual void read(MemoryReader &memoryReader);
  virtual void write(DataWriter &dataWriter);
  virtual void getAttributeList(const std::string &prefix, T::AttributeList &attributeList) const;
  virtual void print(std::ostream &stream, uint level, uint optionFlags) const;
  virtual T::Hash countHash();

  ParameterSettings *getParameter() const;
  void setParameter(ParameterSettings &parameter);
  PointInTimeSettings *getPointInTime() const;
  void setPointInTime(PointInTimeSettings &pointInTime);
  HorizontalSettings *getHorizontal() const;
  void setHorizontal(HorizontalSettings &horizontal);
  const T::UInt8_opt &getStatisticalProcess() const;
  void setStatisticalProcess(T::UInt8_opt statisticalProcess);
  const T::UInt8_opt &getSpatialProcessing() const;
  void setSpatialProcessing(T::UInt8_opt spatialProcessing);
  const T::UInt8_opt &getNumberOfPointsUsed() const;
  void setNumberOfPointsUsed(T::UInt8_opt numberOfPointsUsed);

protected:
  // # Copyright 2005-2019 ECMWF.
  //
  // # TEMPLATE 4.15, Average, accumulation, extreme values, or other statistically-processed values over a spatial area at a horizontal level or in a horizontal layer at a point
  // in time
  //
  // include "grib2/template.4.parameter.def";

  mutable ParameterSettings mParameter;

  // include "grib2/template.4.point_in_time.def";

  mutable PointInTimeSettings mPointInTime;

  // include "grib2/template.4.horizontal.def";

  mutable HorizontalSettings mHorizontal;

  // codetable[1] statisticalProcess 'grib2/tables/[tablesVersion]/4.10.table';

  T::UInt8_opt mStatisticalProcess;

  // codetable[1] spatialProcessing 'grib2/tables/[tablesVersion]/4.15.table';

  T::UInt8_opt mSpatialProcessing;

  // unsigned[1] numberOfPointsUsed;

  T::UInt8_opt mNumberOfPointsUsed;

  //
};

} // namespace GRIB2
} // namespace SmartMet
