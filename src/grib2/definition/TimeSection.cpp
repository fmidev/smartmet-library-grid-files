// ***********************************************************************
//                      DO NOT EDIT THIS FILE !!!
// ***********************************************************************
//   This file is automatically generated from the grib_api templates. All
//   changes will be overridden. If you want to do permanent changes then
//   you should write them into the 'TimeSectionImpl.*' files.
// ***********************************************************************

#include "TimeSection.h"
#include "../../common/GeneralDefinitions.h"
#include "../../common/GeneralFunctions.h"
#include <boost/functional/hash.hpp>
#include <iostream>
#include <macgyver/Exception.h>

namespace SmartMet {
namespace GRIB2 {

/*! \brief The constructor of the class. */

TimeSection::TimeSection() {
  try {
  } catch (...) {
    throw Fmi::Exception(BCP, "Operation failed", nullptr);
  }
}

/*! \brief The destructor of the class. */

TimeSection::~TimeSection() {
}

/*! \brief The method reads and initializes all data related to the current object.

        \param memoryReader  This object controls the access to the memory mapped file.
*/

void TimeSection::read(MemoryReader &memoryReader) {
  try {
    mNumberOfTimeSteps = memoryReader.read_UInt32_opt();
    mUnitOfOffsetFromReferenceTime = memoryReader.read_UInt8_opt();
    mOffsetFromReferenceOfFirstTime = memoryReader.read_UInt32_opt();
    mTypeOfTimeIncrement = memoryReader.read_UInt8_opt();
    mUnitOfTimeIncrement = memoryReader.read_UInt8_opt();
    mTimeIncrement = memoryReader.read_UInt32_opt();
    mYear = memoryReader.read_UInt16_opt();
    mMonth = memoryReader.read_UInt8_opt();
    mDay = memoryReader.read_UInt8_opt();
    mHour = memoryReader.read_UInt8_opt();
    mMinute = memoryReader.read_UInt8_opt();
    mSecond = memoryReader.read_UInt8_opt();
    mNumberOfVerticalPoints = memoryReader.read_UInt16_opt();
    mPhysicalMeaningOfVerticalCoordinate = memoryReader.read_UInt8_opt();
    mVerticalCoordinate = memoryReader.read_UInt8_opt();
    mNC = memoryReader.read_UInt16_opt();
  } catch (...) {
    throw Fmi::Exception(BCP, "Operation failed", nullptr);
  }
}

/*! \brief The method writes all data related to the current object.

        \param dataWriter  This object is used for writing the object data.
*/

void TimeSection::write(DataWriter &dataWriter) {
  try {
    dataWriter << mNumberOfTimeSteps;
    dataWriter << mUnitOfOffsetFromReferenceTime;
    dataWriter << mOffsetFromReferenceOfFirstTime;
    dataWriter << mTypeOfTimeIncrement;
    dataWriter << mUnitOfTimeIncrement;
    dataWriter << mTimeIncrement;
    dataWriter << mYear;
    dataWriter << mMonth;
    dataWriter << mDay;
    dataWriter << mHour;
    dataWriter << mMinute;
    dataWriter << mSecond;
    dataWriter << mNumberOfVerticalPoints;
    dataWriter << mPhysicalMeaningOfVerticalCoordinate;
    dataWriter << mVerticalCoordinate;
    dataWriter << mNC;
  } catch (...) {
    throw Fmi::Exception(BCP, "Operation failed", nullptr);
  }
}

/*! \brief The method is used for collecting the current class attributeList.

    \param prefix         The prefix of the each attributeList parameter.
    \param attributeList  The attributeList storage.
*/

void TimeSection::getAttributeList(const std::string &prefix, T::AttributeList &attributeList) const {
  try {
    char name[300];
    sprintf(name, "%sTimeSection.NumberOfTimeSteps", prefix.c_str());
    attributeList.addAttribute(name, toString(mNumberOfTimeSteps));
    sprintf(name, "%sTimeSection.UnitOfOffsetFromReferenceTime", prefix.c_str());
    attributeList.addAttribute(name, toString(mUnitOfOffsetFromReferenceTime));
    sprintf(name, "%sTimeSection.OffsetFromReferenceOfFirstTime", prefix.c_str());
    attributeList.addAttribute(name, toString(mOffsetFromReferenceOfFirstTime));
    sprintf(name, "%sTimeSection.TypeOfTimeIncrement", prefix.c_str());
    attributeList.addAttribute(name, toString(mTypeOfTimeIncrement));
    sprintf(name, "%sTimeSection.UnitOfTimeIncrement", prefix.c_str());
    attributeList.addAttribute(name, toString(mUnitOfTimeIncrement));
    sprintf(name, "%sTimeSection.TimeIncrement", prefix.c_str());
    attributeList.addAttribute(name, toString(mTimeIncrement));
    sprintf(name, "%sTimeSection.Year", prefix.c_str());
    attributeList.addAttribute(name, toString(mYear));
    sprintf(name, "%sTimeSection.Month", prefix.c_str());
    attributeList.addAttribute(name, toString(mMonth));
    sprintf(name, "%sTimeSection.Day", prefix.c_str());
    attributeList.addAttribute(name, toString(mDay));
    sprintf(name, "%sTimeSection.Hour", prefix.c_str());
    attributeList.addAttribute(name, toString(mHour));
    sprintf(name, "%sTimeSection.Minute", prefix.c_str());
    attributeList.addAttribute(name, toString(mMinute));
    sprintf(name, "%sTimeSection.Second", prefix.c_str());
    attributeList.addAttribute(name, toString(mSecond));
    sprintf(name, "%sTimeSection.NumberOfVerticalPoints", prefix.c_str());
    attributeList.addAttribute(name, toString(mNumberOfVerticalPoints));
    sprintf(name, "%sTimeSection.PhysicalMeaningOfVerticalCoordinate", prefix.c_str());
    attributeList.addAttribute(name, toString(mPhysicalMeaningOfVerticalCoordinate));
    sprintf(name, "%sTimeSection.VerticalCoordinate", prefix.c_str());
    attributeList.addAttribute(name, toString(mVerticalCoordinate));
    sprintf(name, "%sTimeSection.NC", prefix.c_str());
    attributeList.addAttribute(name, toString(mNC));
  } catch (...) {
    throw Fmi::Exception(BCP, "Operation failed", nullptr);
  }
}

/*! \brief The method is used for getting attribute values by their names.

    \param attributeName  The name of the attribute.
    \param attributeValue The value of the attribute (string).
*/

bool TimeSection::getAttributeValue(const char *attributeName, std::string &attributeValue) const {
  try {
    if (attributeName == nullptr)
      return false;
    if (strcasecmp(attributeName, "NumberOfTimeSteps") == 0) {
      attributeValue = toString(mNumberOfTimeSteps);
      return true;
    }
    if (strcasecmp(attributeName, "UnitOfOffsetFromReferenceTime") == 0) {
      attributeValue = toString(mUnitOfOffsetFromReferenceTime);
      return true;
    }
    if (strcasecmp(attributeName, "OffsetFromReferenceOfFirstTime") == 0) {
      attributeValue = toString(mOffsetFromReferenceOfFirstTime);
      return true;
    }
    if (strcasecmp(attributeName, "TypeOfTimeIncrement") == 0) {
      attributeValue = toString(mTypeOfTimeIncrement);
      return true;
    }
    if (strcasecmp(attributeName, "UnitOfTimeIncrement") == 0) {
      attributeValue = toString(mUnitOfTimeIncrement);
      return true;
    }
    if (strcasecmp(attributeName, "TimeIncrement") == 0) {
      attributeValue = toString(mTimeIncrement);
      return true;
    }
    if (strcasecmp(attributeName, "Year") == 0) {
      attributeValue = toString(mYear);
      return true;
    }
    if (strcasecmp(attributeName, "Month") == 0) {
      attributeValue = toString(mMonth);
      return true;
    }
    if (strcasecmp(attributeName, "Day") == 0) {
      attributeValue = toString(mDay);
      return true;
    }
    if (strcasecmp(attributeName, "Hour") == 0) {
      attributeValue = toString(mHour);
      return true;
    }
    if (strcasecmp(attributeName, "Minute") == 0) {
      attributeValue = toString(mMinute);
      return true;
    }
    if (strcasecmp(attributeName, "Second") == 0) {
      attributeValue = toString(mSecond);
      return true;
    }
    if (strcasecmp(attributeName, "NumberOfVerticalPoints") == 0) {
      attributeValue = toString(mNumberOfVerticalPoints);
      return true;
    }
    if (strcasecmp(attributeName, "PhysicalMeaningOfVerticalCoordinate") == 0) {
      attributeValue = toString(mPhysicalMeaningOfVerticalCoordinate);
      return true;
    }
    if (strcasecmp(attributeName, "VerticalCoordinate") == 0) {
      attributeValue = toString(mVerticalCoordinate);
      return true;
    }
    if (strcasecmp(attributeName, "NC") == 0) {
      attributeValue = toString(mNC);
      return true;
    }
    return false;
  } catch (...) {
    throw Fmi::Exception(BCP, "Operation failed", nullptr);
  }
}

/*! \brief The method is used for checking if the attribute value matches to the given value.

    \param attributeName  The name of the attribute.
    \param attributeValue The value of the attribute (string).
*/

bool TimeSection::hasAttributeValue(const char *attributeName, const char *attributeValue) const {
  try {
    if (attributeName == nullptr || attributeValue == nullptr)
      return false;
    if (strcasecmp(attributeName, "NumberOfTimeSteps") == 0 && strcasecmp(attributeValue, toString(mNumberOfTimeSteps).c_str()) == 0)
      return true;
    if (strcasecmp(attributeName, "UnitOfOffsetFromReferenceTime") == 0 && strcasecmp(attributeValue, toString(mUnitOfOffsetFromReferenceTime).c_str()) == 0)
      return true;
    if (strcasecmp(attributeName, "OffsetFromReferenceOfFirstTime") == 0 && strcasecmp(attributeValue, toString(mOffsetFromReferenceOfFirstTime).c_str()) == 0)
      return true;
    if (strcasecmp(attributeName, "TypeOfTimeIncrement") == 0 && strcasecmp(attributeValue, toString(mTypeOfTimeIncrement).c_str()) == 0)
      return true;
    if (strcasecmp(attributeName, "UnitOfTimeIncrement") == 0 && strcasecmp(attributeValue, toString(mUnitOfTimeIncrement).c_str()) == 0)
      return true;
    if (strcasecmp(attributeName, "TimeIncrement") == 0 && strcasecmp(attributeValue, toString(mTimeIncrement).c_str()) == 0)
      return true;
    if (strcasecmp(attributeName, "Year") == 0 && strcasecmp(attributeValue, toString(mYear).c_str()) == 0)
      return true;
    if (strcasecmp(attributeName, "Month") == 0 && strcasecmp(attributeValue, toString(mMonth).c_str()) == 0)
      return true;
    if (strcasecmp(attributeName, "Day") == 0 && strcasecmp(attributeValue, toString(mDay).c_str()) == 0)
      return true;
    if (strcasecmp(attributeName, "Hour") == 0 && strcasecmp(attributeValue, toString(mHour).c_str()) == 0)
      return true;
    if (strcasecmp(attributeName, "Minute") == 0 && strcasecmp(attributeValue, toString(mMinute).c_str()) == 0)
      return true;
    if (strcasecmp(attributeName, "Second") == 0 && strcasecmp(attributeValue, toString(mSecond).c_str()) == 0)
      return true;
    if (strcasecmp(attributeName, "NumberOfVerticalPoints") == 0 && strcasecmp(attributeValue, toString(mNumberOfVerticalPoints).c_str()) == 0)
      return true;
    if (strcasecmp(attributeName, "PhysicalMeaningOfVerticalCoordinate") == 0 && strcasecmp(attributeValue, toString(mPhysicalMeaningOfVerticalCoordinate).c_str()) == 0)
      return true;
    if (strcasecmp(attributeName, "VerticalCoordinate") == 0 && strcasecmp(attributeValue, toString(mVerticalCoordinate).c_str()) == 0)
      return true;
    if (strcasecmp(attributeName, "NC") == 0 && strcasecmp(attributeValue, toString(mNC).c_str()) == 0)
      return true;
    return false;
  } catch (...) {
    throw Fmi::Exception(BCP, "Operation failed", nullptr);
  }
}

/*! \brief The method prints the content of the current object into the given stream.

    \param ostream      The output stream.
    \param level        The print level (used when printing multi-level structures).
    \param optionFlags  The printing options expressed in flag-bits.
*/

void TimeSection::print(std::ostream &stream, uint level, uint optionFlags) const {
  try {
    stream << space(level) << "TimeSection\n";
    stream << space(level) << "- NumberOfTimeSteps = " << toString(mNumberOfTimeSteps) << "\n";
    stream << space(level) << "- UnitOfOffsetFromReferenceTime = " << toString(mUnitOfOffsetFromReferenceTime) << "\n";
    stream << space(level) << "- OffsetFromReferenceOfFirstTime = " << toString(mOffsetFromReferenceOfFirstTime) << "\n";
    stream << space(level) << "- TypeOfTimeIncrement = " << toString(mTypeOfTimeIncrement) << "\n";
    stream << space(level) << "- UnitOfTimeIncrement = " << toString(mUnitOfTimeIncrement) << "\n";
    stream << space(level) << "- TimeIncrement = " << toString(mTimeIncrement) << "\n";
    stream << space(level) << "- Year = " << toString(mYear) << "\n";
    stream << space(level) << "- Month = " << toString(mMonth) << "\n";
    stream << space(level) << "- Day = " << toString(mDay) << "\n";
    stream << space(level) << "- Hour = " << toString(mHour) << "\n";
    stream << space(level) << "- Minute = " << toString(mMinute) << "\n";
    stream << space(level) << "- Second = " << toString(mSecond) << "\n";
    stream << space(level) << "- NumberOfVerticalPoints = " << toString(mNumberOfVerticalPoints) << "\n";
    stream << space(level) << "- PhysicalMeaningOfVerticalCoordinate = " << toString(mPhysicalMeaningOfVerticalCoordinate) << "\n";
    stream << space(level) << "- VerticalCoordinate = " << toString(mVerticalCoordinate) << "\n";
    stream << space(level) << "- NC = " << toString(mNC) << "\n";
  } catch (...) {
    throw Fmi::Exception(BCP, "Operation failed", nullptr);
  }
}

/*! \brief The method counts the hash value of the current object. */

T::Hash TimeSection::countHash() {
  try {
    std::size_t seed = 0;
    if (mNumberOfTimeSteps)
      boost::hash_combine(seed, *mNumberOfTimeSteps);
    if (mUnitOfOffsetFromReferenceTime)
      boost::hash_combine(seed, *mUnitOfOffsetFromReferenceTime);
    if (mOffsetFromReferenceOfFirstTime)
      boost::hash_combine(seed, *mOffsetFromReferenceOfFirstTime);
    if (mTypeOfTimeIncrement)
      boost::hash_combine(seed, *mTypeOfTimeIncrement);
    if (mUnitOfTimeIncrement)
      boost::hash_combine(seed, *mUnitOfTimeIncrement);
    if (mTimeIncrement)
      boost::hash_combine(seed, *mTimeIncrement);
    if (mYear)
      boost::hash_combine(seed, *mYear);
    if (mMonth)
      boost::hash_combine(seed, *mMonth);
    if (mDay)
      boost::hash_combine(seed, *mDay);
    if (mHour)
      boost::hash_combine(seed, *mHour);
    if (mMinute)
      boost::hash_combine(seed, *mMinute);
    if (mSecond)
      boost::hash_combine(seed, *mSecond);
    if (mNumberOfVerticalPoints)
      boost::hash_combine(seed, *mNumberOfVerticalPoints);
    if (mPhysicalMeaningOfVerticalCoordinate)
      boost::hash_combine(seed, *mPhysicalMeaningOfVerticalCoordinate);
    if (mVerticalCoordinate)
      boost::hash_combine(seed, *mVerticalCoordinate);
    if (mNC)
      boost::hash_combine(seed, *mNC);
    return seed;
  } catch (...) {
    throw Fmi::Exception(BCP, "Operation failed", nullptr);
  }
}

/*! \brief The method return the template number of the current class. */

uint TimeSection::getTemplateNumber() const {
  return 1200;
}

GridDefinition *TimeSection::createGridDefinition() const {
  try {
    return static_cast<GridDefinition *>(new TimeSection(*this));
  } catch (...) {
    throw Fmi::Exception(BCP, "Operation failed", nullptr);
  }
}

/*! \brief The method returns the value of the {@link mNumberOfTimeSteps} attribute. */

const T::UInt32_opt &TimeSection::getNumberOfTimeSteps() const {
  try {
    return mNumberOfTimeSteps;
  } catch (...) {
    throw Fmi::Exception(BCP, "Operation failed", nullptr);
  }
}

/*! \brief The method returns the value of the {@link mUnitOfOffsetFromReferenceTime} attribute. */

const T::UInt8_opt &TimeSection::getUnitOfOffsetFromReferenceTime() const {
  try {
    return mUnitOfOffsetFromReferenceTime;
  } catch (...) {
    throw Fmi::Exception(BCP, "Operation failed", nullptr);
  }
}

/*! \brief The method returns the value of the {@link mOffsetFromReferenceOfFirstTime} attribute. */

const T::UInt32_opt &TimeSection::getOffsetFromReferenceOfFirstTime() const {
  try {
    return mOffsetFromReferenceOfFirstTime;
  } catch (...) {
    throw Fmi::Exception(BCP, "Operation failed", nullptr);
  }
}

/*! \brief The method returns the value of the {@link mTypeOfTimeIncrement} attribute. */

const T::UInt8_opt &TimeSection::getTypeOfTimeIncrement() const {
  try {
    return mTypeOfTimeIncrement;
  } catch (...) {
    throw Fmi::Exception(BCP, "Operation failed", nullptr);
  }
}

/*! \brief The method returns the value of the {@link mUnitOfTimeIncrement} attribute. */

const T::UInt8_opt &TimeSection::getUnitOfTimeIncrement() const {
  try {
    return mUnitOfTimeIncrement;
  } catch (...) {
    throw Fmi::Exception(BCP, "Operation failed", nullptr);
  }
}

/*! \brief The method returns the value of the {@link mTimeIncrement} attribute. */

const T::UInt32_opt &TimeSection::getTimeIncrement() const {
  try {
    return mTimeIncrement;
  } catch (...) {
    throw Fmi::Exception(BCP, "Operation failed", nullptr);
  }
}

/*! \brief The method returns the value of the {@link mYear} attribute. */

const T::UInt16_opt &TimeSection::getYear() const {
  try {
    return mYear;
  } catch (...) {
    throw Fmi::Exception(BCP, "Operation failed", nullptr);
  }
}

/*! \brief The method returns the value of the {@link mMonth} attribute. */

const T::UInt8_opt &TimeSection::getMonth() const {
  try {
    return mMonth;
  } catch (...) {
    throw Fmi::Exception(BCP, "Operation failed", nullptr);
  }
}

/*! \brief The method returns the value of the {@link mDay} attribute. */

const T::UInt8_opt &TimeSection::getDay() const {
  try {
    return mDay;
  } catch (...) {
    throw Fmi::Exception(BCP, "Operation failed", nullptr);
  }
}

/*! \brief The method returns the value of the {@link mHour} attribute. */

const T::UInt8_opt &TimeSection::getHour() const {
  try {
    return mHour;
  } catch (...) {
    throw Fmi::Exception(BCP, "Operation failed", nullptr);
  }
}

/*! \brief The method returns the value of the {@link mMinute} attribute. */

const T::UInt8_opt &TimeSection::getMinute() const {
  try {
    return mMinute;
  } catch (...) {
    throw Fmi::Exception(BCP, "Operation failed", nullptr);
  }
}

/*! \brief The method returns the value of the {@link mSecond} attribute. */

const T::UInt8_opt &TimeSection::getSecond() const {
  try {
    return mSecond;
  } catch (...) {
    throw Fmi::Exception(BCP, "Operation failed", nullptr);
  }
}

/*! \brief The method returns the value of the {@link mNumberOfVerticalPoints} attribute. */

const T::UInt16_opt &TimeSection::getNumberOfVerticalPoints() const {
  try {
    return mNumberOfVerticalPoints;
  } catch (...) {
    throw Fmi::Exception(BCP, "Operation failed", nullptr);
  }
}

/*! \brief The method returns the value of the {@link mPhysicalMeaningOfVerticalCoordinate} attribute. */

const T::UInt8_opt &TimeSection::getPhysicalMeaningOfVerticalCoordinate() const {
  try {
    return mPhysicalMeaningOfVerticalCoordinate;
  } catch (...) {
    throw Fmi::Exception(BCP, "Operation failed", nullptr);
  }
}

/*! \brief The method returns the value of the {@link mVerticalCoordinate} attribute. */

const T::UInt8_opt &TimeSection::getVerticalCoordinate() const {
  try {
    return mVerticalCoordinate;
  } catch (...) {
    throw Fmi::Exception(BCP, "Operation failed", nullptr);
  }
}

/*! \brief The method returns the value of the {@link mNC} attribute. */

const T::UInt16_opt &TimeSection::getNC() const {
  try {
    return mNC;
  } catch (...) {
    throw Fmi::Exception(BCP, "Operation failed", nullptr);
  }
}

void TimeSection::setNumberOfTimeSteps(T::UInt32_opt numberOfTimeSteps) {
  try {
    mNumberOfTimeSteps = numberOfTimeSteps;
  } catch (...) {
    throw Fmi::Exception(BCP, "Operation failed", nullptr);
  }
}

void TimeSection::setUnitOfOffsetFromReferenceTime(T::UInt8_opt unitOfOffsetFromReferenceTime) {
  try {
    mUnitOfOffsetFromReferenceTime = unitOfOffsetFromReferenceTime;
  } catch (...) {
    throw Fmi::Exception(BCP, "Operation failed", nullptr);
  }
}

void TimeSection::setOffsetFromReferenceOfFirstTime(T::UInt32_opt offsetFromReferenceOfFirstTime) {
  try {
    mOffsetFromReferenceOfFirstTime = offsetFromReferenceOfFirstTime;
  } catch (...) {
    throw Fmi::Exception(BCP, "Operation failed", nullptr);
  }
}

void TimeSection::setTypeOfTimeIncrement(T::UInt8_opt typeOfTimeIncrement) {
  try {
    mTypeOfTimeIncrement = typeOfTimeIncrement;
  } catch (...) {
    throw Fmi::Exception(BCP, "Operation failed", nullptr);
  }
}

void TimeSection::setUnitOfTimeIncrement(T::UInt8_opt unitOfTimeIncrement) {
  try {
    mUnitOfTimeIncrement = unitOfTimeIncrement;
  } catch (...) {
    throw Fmi::Exception(BCP, "Operation failed", nullptr);
  }
}

void TimeSection::setTimeIncrement(T::UInt32_opt timeIncrement) {
  try {
    mTimeIncrement = timeIncrement;
  } catch (...) {
    throw Fmi::Exception(BCP, "Operation failed", nullptr);
  }
}

void TimeSection::setYear(T::UInt16_opt year) {
  try {
    mYear = year;
  } catch (...) {
    throw Fmi::Exception(BCP, "Operation failed", nullptr);
  }
}

void TimeSection::setMonth(T::UInt8_opt month) {
  try {
    mMonth = month;
  } catch (...) {
    throw Fmi::Exception(BCP, "Operation failed", nullptr);
  }
}

void TimeSection::setDay(T::UInt8_opt day) {
  try {
    mDay = day;
  } catch (...) {
    throw Fmi::Exception(BCP, "Operation failed", nullptr);
  }
}

void TimeSection::setHour(T::UInt8_opt hour) {
  try {
    mHour = hour;
  } catch (...) {
    throw Fmi::Exception(BCP, "Operation failed", nullptr);
  }
}

void TimeSection::setMinute(T::UInt8_opt minute) {
  try {
    mMinute = minute;
  } catch (...) {
    throw Fmi::Exception(BCP, "Operation failed", nullptr);
  }
}

void TimeSection::setSecond(T::UInt8_opt second) {
  try {
    mSecond = second;
  } catch (...) {
    throw Fmi::Exception(BCP, "Operation failed", nullptr);
  }
}

void TimeSection::setNumberOfVerticalPoints(T::UInt16_opt numberOfVerticalPoints) {
  try {
    mNumberOfVerticalPoints = numberOfVerticalPoints;
  } catch (...) {
    throw Fmi::Exception(BCP, "Operation failed", nullptr);
  }
}

void TimeSection::setPhysicalMeaningOfVerticalCoordinate(T::UInt8_opt physicalMeaningOfVerticalCoordinate) {
  try {
    mPhysicalMeaningOfVerticalCoordinate = physicalMeaningOfVerticalCoordinate;
  } catch (...) {
    throw Fmi::Exception(BCP, "Operation failed", nullptr);
  }
}

void TimeSection::setVerticalCoordinate(T::UInt8_opt verticalCoordinate) {
  try {
    mVerticalCoordinate = verticalCoordinate;
  } catch (...) {
    throw Fmi::Exception(BCP, "Operation failed", nullptr);
  }
}

void TimeSection::setNC(T::UInt16_opt nC) {
  try {
    mNC = nC;
  } catch (...) {
    throw Fmi::Exception(BCP, "Operation failed", nullptr);
  }
}

} // namespace GRIB2
} // namespace SmartMet
