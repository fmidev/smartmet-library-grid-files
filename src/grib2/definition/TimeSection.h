// ***********************************************************************
//                      DO NOT EDIT THIS FILE !!!
// ***********************************************************************
//   This file is automatically generated from the grib_api templates. All
//   changes will be overridden. If you want to do permanent changes then
//   you should write them into the 'TimeSectionImpl.*' files.
// ***********************************************************************

#pragma once
#include "../../common/AttributeList.h"
#include "../../common/DataWriter.h"
#include "../../common/MemoryReader.h"
#include "../../grid/Typedefs.h"
#include "../GridDefinition.h"

namespace SmartMet {
namespace GRIB2 {
/*! \brief The class is automatically created from the template (3.1200).*/

class TimeSection : public GridDefinition {
public:
  TimeSection();
  virtual ~TimeSection();

  virtual uint getTemplateNumber() const;
  virtual GridDefinition *createGridDefinition() const;
  virtual void read(MemoryReader &memoryReader);
  virtual void write(DataWriter &dataWriter);
  virtual void getAttributeList(std::string prefix, T::AttributeList &attributeList) const;
  virtual void print(std::ostream &stream, uint level, uint optionFlags) const;
  virtual T::Hash countHash();

  const T::UInt32_opt &getNumberOfTimeSteps() const;
  void setNumberOfTimeSteps(T::UInt32_opt numberOfTimeSteps);
  const T::UInt8_opt &getUnitOfOffsetFromReferenceTime() const;
  void setUnitOfOffsetFromReferenceTime(T::UInt8_opt unitOfOffsetFromReferenceTime);
  const T::UInt32_opt &getOffsetFromReferenceOfFirstTime() const;
  void setOffsetFromReferenceOfFirstTime(T::UInt32_opt offsetFromReferenceOfFirstTime);
  const T::UInt8_opt &getTypeOfTimeIncrement() const;
  void setTypeOfTimeIncrement(T::UInt8_opt typeOfTimeIncrement);
  const T::UInt8_opt &getUnitOfTimeIncrement() const;
  void setUnitOfTimeIncrement(T::UInt8_opt unitOfTimeIncrement);
  const T::UInt32_opt &getTimeIncrement() const;
  void setTimeIncrement(T::UInt32_opt timeIncrement);
  const T::UInt16_opt &getYear() const;
  void setYear(T::UInt16_opt year);
  const T::UInt8_opt &getMonth() const;
  void setMonth(T::UInt8_opt month);
  const T::UInt8_opt &getDay() const;
  void setDay(T::UInt8_opt day);
  const T::UInt8_opt &getHour() const;
  void setHour(T::UInt8_opt hour);
  const T::UInt8_opt &getMinute() const;
  void setMinute(T::UInt8_opt minute);
  const T::UInt8_opt &getSecond() const;
  void setSecond(T::UInt8_opt second);
  const T::UInt16_opt &getNumberOfVerticalPoints() const;
  void setNumberOfVerticalPoints(T::UInt16_opt numberOfVerticalPoints);
  const T::UInt8_opt &getPhysicalMeaningOfVerticalCoordinate() const;
  void setPhysicalMeaningOfVerticalCoordinate(T::UInt8_opt physicalMeaningOfVerticalCoordinate);
  const T::UInt8_opt &getVerticalCoordinate() const;
  void setVerticalCoordinate(T::UInt8_opt verticalCoordinate);
  const T::UInt16_opt &getNC() const;
  void setNC(T::UInt16_opt nC);

protected:
  // # Copyright 2005-2019 ECMWF.
  //
  // # TEMPLATE 3.1200, Time section grid
  // #  NT - Number of time steps
  // unsigned[4] numberOfTimeSteps  : dump;

  T::UInt32_opt mNumberOfTimeSteps;

  //
  // alias NT =  numberOfTimeSteps;
  // #  Unit of offset from reference time
  // codetable[1] unitOfOffsetFromReferenceTime ('4.4.table',masterDir,localDir) : dump;

  T::UInt8_opt mUnitOfOffsetFromReferenceTime;

  //
  // #  Offset from reference of first time
  // # (negative value when first bit set)
  // unsigned[4] offsetFromReferenceOfFirstTime  : dump;

  T::UInt32_opt mOffsetFromReferenceOfFirstTime;

  //
  // #  Type of time increment
  // codetable[1] typeOfTimeIncrement ('4.11.table',masterDir,localDir) : dump;

  T::UInt8_opt mTypeOfTimeIncrement;

  //
  // #  Unit of time increment
  // codetable[1] unitOfTimeIncrement ('4.4.table',masterDir,localDir) : dump;

  T::UInt8_opt mUnitOfTimeIncrement;

  //
  // #  Time increment
  // # (negative value when first bit set)
  // unsigned[4] timeIncrement : dump;

  T::UInt32_opt mTimeIncrement;

  //
  // #  Year
  // unsigned[2] year  : dump;

  T::UInt16_opt mYear;

  //
  // #  Month
  // unsigned[1] month  : dump;

  T::UInt8_opt mMonth;

  //
  // #  Day
  // unsigned[1] day  : dump;

  T::UInt8_opt mDay;

  //
  // #  Hour
  // unsigned[1] hour  : dump;

  T::UInt8_opt mHour;

  //
  // #  Minute
  // unsigned[1] minute  : dump;

  T::UInt8_opt mMinute;

  //
  // #  Second
  // unsigned[1] second  : dump;

  T::UInt8_opt mSecond;

  //
  // #  Number of vertical points
  // unsigned[2] numberOfVerticalPoints  : dump;

  T::UInt16_opt mNumberOfVerticalPoints;

  //
  // #  Physical meaning of vertical coordinate
  // codetable[1] physicalMeaningOfVerticalCoordinate ('3.15.table',masterDir,localDir) : dump;

  T::UInt8_opt mPhysicalMeaningOfVerticalCoordinate;

  //
  // #  Vertical dimension coordinate values definition
  // codetable[1] verticalCoordinate ('3.21.table',masterDir,localDir) : dump;

  T::UInt8_opt mVerticalCoordinate;

  //
  // #  NC - Number of coefficients or values used to specify vertical coordinates
  // unsigned[2] NC  : dump;

  T::UInt16_opt mNC;

  //
  // # Octets 43-(42+NC*4) : Coefficients to define vertical dimension coordinate values in functional form, or the explicit coordinate values
  // # (IEEE 32-bit floating-point values)
  // # ????          coefficients_to_define_vertical_dimension;
};

} // namespace GRIB2
} // namespace SmartMet
