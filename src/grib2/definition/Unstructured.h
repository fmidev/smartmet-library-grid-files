// ***********************************************************************
//                      DO NOT EDIT THIS FILE !!!
// ***********************************************************************
//   This file is automatically generated from the grib_api templates. All
//   changes will be overridden. If you want to do permanent changes then
//   you should write them into the 'UnstructuredImpl.*' files.
// ***********************************************************************

#pragma once
#include "../../common/AttributeList.h"
#include "../../common/MemoryReader.h"
#include "../GridDefinition.h"
#include "../../grid/Typedefs.h"
#include <array>

namespace SmartMet {
namespace GRIB2 {
/*! \brief The class is automatically created from the template (3.101).*/

class Unstructured : public GridDefinition {
public:
  Unstructured();
  virtual ~Unstructured();

  virtual void read(MemoryReader &memoryReader);
  virtual void getAttributeList(std::string prefix, T::AttributeList &attributeList) const;
  virtual void print(std::ostream &stream, uint level, uint optionFlags) const;
  virtual T::Hash countHash();

  const T::UInt8_opt &getShapeOfTheEarth() const;
  void setShapeOfTheEarth(T::UInt8_opt shapeOfTheEarth);
  const T::UInt8_opt &getNumberOfGridInReference() const;
  void setNumberOfGridInReference(T::UInt8_opt numberOfGridInReference);
  const std::array<char, 16> &getUuidOfHGrid() const;
  void setUuidOfHGrid(std::array<char, 16> uuidOfHGrid);

protected:
  // # Copyright 2005-2015 ECMWF.
  // #
  // # This software is licensed under the terms of the Apache Licence Version 2.0
  // # which can be obtained at http://www.apache.org/licenses/LICENSE-2.0.
  // #
  // # In applying this licence, ECMWF does not waive the privileges and immunities granted to it by
  // # virtue of its status as an intergovernmental organisation nor does it submit to any jurisdiction.
  // #
  //
  // # TEMPLATE 3.101, General Unstructured Grid
  //
  // codetable[1] shapeOfTheEarth ('3.2.table',masterDir,localDir) : dump;

  T::UInt8_opt mShapeOfTheEarth;

  //
  // unsigned[3] numberOfGridUsed : dump;
  //
  // unsigned[1] numberOfGridInReference : dump;

  T::UInt8_opt mNumberOfGridInReference;

  //
  // # UUID of horizontal grid
  // byte[16] uuidOfHGrid : dump;

  std::array<char, 16> mUuidOfHGrid;
};

} // namespace GRIB2
} // namespace SmartMet
