// ***********************************************************************
//                      DO NOT EDIT THIS FILE !!!
// ***********************************************************************
//   This file is automatically generated from the grib_api templates. All
//   changes will be overridden. If you want to do permanent changes then
//   you should write them into the 'VariableLatLonSettingsImpl.*' files.
// ***********************************************************************

#include "grib2/definition/VariableLatLonSettings.h"
#include "common/Exception.h"
#include "common/GeneralFunctions.h"
#include "common/GeneralDefinitions.h"
#include <iostream>
#include <boost/functional/hash.hpp>

namespace SmartMet {
namespace GRIB2 {

/*! \brief The constructor of the class. */

VariableLatLonSettings::VariableLatLonSettings() {
  try {
  } catch (...) {
    throw SmartMet::Spine::Exception(BCP, "Operation failed!", NULL);
  }
}

/*! \brief The destructor of the class. */

VariableLatLonSettings::~VariableLatLonSettings() {
  try {
  } catch (...) {
    throw SmartMet::Spine::Exception(BCP, "Operation failed!", NULL);
  }
}

/*! \brief The method reads and initializes all data related to the current
   object.

        \param memoryReader  This object controls the access to the memory
   mapped file.
*/

void VariableLatLonSettings::read(MemoryReader &memoryReader) {
  try {
    mNi = memoryReader.read_UInt32_opt();
    mNj = memoryReader.read_UInt32_opt();
    mBasicAngleOfTheInitialProductionDomain = memoryReader.read_UInt32_opt();
    mSubdivisionsOfBasicAngle = memoryReader.read_UInt32_opt();
    mResolution.read(memoryReader);
    mScanningMode.read(memoryReader);
    mLongitudes = memoryReader.read_UInt32_opt();
    mLatitudes = memoryReader.read_Int32_opt();
  } catch (...) {
    throw SmartMet::Spine::Exception(BCP, "Operation failed!", NULL);
  }
}

/*! \brief The method is used for collecting the current class attributeList.

    \param prefix         The prefix of the each attributeList parameter.
    \param attributeList  The attributeList storage.
*/

void VariableLatLonSettings::getAttributeList(
    std::string prefix, T::AttributeList &attributeList) const {
  try {
    char name[300];
    sprintf(name, "%sVariableLatLonSettings.Ni", prefix.c_str());
    attributeList.addAttribute(name, toString(mNi));
    sprintf(name, "%sVariableLatLonSettings.Nj", prefix.c_str());
    attributeList.addAttribute(name, toString(mNj));
    sprintf(name,
            "%sVariableLatLonSettings.BasicAngleOfTheInitialProductionDomain",
            prefix.c_str());
    attributeList.addAttribute(
        name, toString(mBasicAngleOfTheInitialProductionDomain));
    sprintf(name, "%sVariableLatLonSettings.SubdivisionsOfBasicAngle",
            prefix.c_str());
    attributeList.addAttribute(name, toString(mSubdivisionsOfBasicAngle));
    sprintf(name, "%sVariableLatLonSettings.", prefix.c_str());
    mResolution.getAttributeList(name, attributeList);
    sprintf(name, "%sVariableLatLonSettings.", prefix.c_str());
    mScanningMode.getAttributeList(name, attributeList);
    sprintf(name, "%sVariableLatLonSettings.Longitudes", prefix.c_str());
    attributeList.addAttribute(name, toString(mLongitudes));
    sprintf(name, "%sVariableLatLonSettings.Latitudes", prefix.c_str());
    attributeList.addAttribute(name, toString(mLatitudes));
  } catch (...) {
    throw SmartMet::Spine::Exception(BCP, "Operation failed!", NULL);
  }
}

/*! \brief The method prints the content of the current object into the given
   stream.

    \param ostream      The output stream.
    \param level        The print level (used when printing multi-level
   structures).
    \param optionFlags  The printing options expressed in flag-bits.
*/

void VariableLatLonSettings::print(std::ostream &stream, uint level,
                                   uint optionFlags) const {
  try {
    stream << space(level) << "VariableLatLonSettings\n";
    stream << space(level) << "- Ni = " << toString(mNi) << "\n";
    stream << space(level) << "- Nj = " << toString(mNj) << "\n";
    stream << space(level) << "- BasicAngleOfTheInitialProductionDomain = "
           << toString(mBasicAngleOfTheInitialProductionDomain) << "\n";
    stream << space(level) << "- SubdivisionsOfBasicAngle = "
           << toString(mSubdivisionsOfBasicAngle) << "\n";
    mResolution.print(stream, level + 1, optionFlags);
    mScanningMode.print(stream, level + 1, optionFlags);
    stream << space(level) << "- Longitudes = " << toString(mLongitudes)
           << "\n";
    stream << space(level) << "- Latitudes = " << toString(mLatitudes) << "\n";
  } catch (...) {
    throw SmartMet::Spine::Exception(BCP, "Operation failed!", NULL);
  }
}

/*! \brief The method counts the hash value of the current object. */

T::Hash VariableLatLonSettings::countHash() {
  try {
    std::size_t seed = 0;
    if (mNi)
      boost::hash_combine(seed, *mNi);
    if (mNj)
      boost::hash_combine(seed, *mNj);
    if (mBasicAngleOfTheInitialProductionDomain)
      boost::hash_combine(seed, *mBasicAngleOfTheInitialProductionDomain);
    if (mSubdivisionsOfBasicAngle)
      boost::hash_combine(seed, *mSubdivisionsOfBasicAngle);
    if (mLongitudes)
      boost::hash_combine(seed, *mLongitudes);
    if (mLatitudes)
      boost::hash_combine(seed, *mLatitudes);
    boost::hash_combine(seed, mResolution.countHash());
    boost::hash_combine(seed, mScanningMode.countHash());
    return seed;
  } catch (...) {
    throw SmartMet::Spine::Exception(BCP, "Operation failed!", NULL);
  }
}

/*! \brief The method returns the value of the {@link mNi} attribute. */

const T::UInt32_opt &VariableLatLonSettings::getNi() const {
  try {
    return mNi;
  } catch (...) {
    throw SmartMet::Spine::Exception(BCP, "Operation failed!", NULL);
  }
}

/*! \brief The method returns the value of the {@link mNj} attribute. */

const T::UInt32_opt &VariableLatLonSettings::getNj() const {
  try {
    return mNj;
  } catch (...) {
    throw SmartMet::Spine::Exception(BCP, "Operation failed!", NULL);
  }
}

/*! \brief The method returns the value of the {@link
 * mBasicAngleOfTheInitialProductionDomain} attribute. */

const T::UInt32_opt &
VariableLatLonSettings::getBasicAngleOfTheInitialProductionDomain() const {
  try {
    return mBasicAngleOfTheInitialProductionDomain;
  } catch (...) {
    throw SmartMet::Spine::Exception(BCP, "Operation failed!", NULL);
  }
}

/*! \brief The method returns the value of the {@link mSubdivisionsOfBasicAngle}
 * attribute. */

const T::UInt32_opt &
VariableLatLonSettings::getSubdivisionsOfBasicAngle() const {
  try {
    return mSubdivisionsOfBasicAngle;
  } catch (...) {
    throw SmartMet::Spine::Exception(BCP, "Operation failed!", NULL);
  }
}

/*! \brief The method returns the pointer to the {@link mResolution} attribute.
 */

const ResolutionSettings *VariableLatLonSettings::getResolution() const {
  try {
    return &mResolution;
  } catch (...) {
    throw SmartMet::Spine::Exception(BCP, "Operation failed!", NULL);
  }
}

/*! \brief The method returns the pointer to the {@link mScanningMode}
 * attribute. */

const ScanningModeSettings *VariableLatLonSettings::getScanningMode() const {
  try {
    return &mScanningMode;
  } catch (...) {
    throw SmartMet::Spine::Exception(BCP, "Operation failed!", NULL);
  }
}

/*! \brief The method returns the value of the {@link mLongitudes} attribute. */

const T::UInt32_opt &VariableLatLonSettings::getLongitudes() const {
  try {
    return mLongitudes;
  } catch (...) {
    throw SmartMet::Spine::Exception(BCP, "Operation failed!", NULL);
  }
}

/*! \brief The method returns the value of the {@link mLatitudes} attribute. */

const T::Int32_opt &VariableLatLonSettings::getLatitudes() const {
  try {
    return mLatitudes;
  } catch (...) {
    throw SmartMet::Spine::Exception(BCP, "Operation failed!", NULL);
  }
}

} // namespace GRIB2
} // namespace SmartMet
