// ***********************************************************************
//                      DO NOT EDIT THIS FILE !!!
// ***********************************************************************
//   This file is automatically generated from the grib_api templates. All
//   changes will be overridden. If you want to do permanent changes then
//   you should write them into the 'VariableResolutionRotatedLatLonImpl.*' files.
// ***********************************************************************

#include "VariableResolutionRotatedLatLon.h"
#include "../../common/GeneralDefinitions.h"
#include "../../common/GeneralFunctions.h"
#include <boost/functional/hash.hpp>
#include <iostream>
#include <macgyver/Exception.h>

namespace SmartMet {
namespace GRIB2 {

/*! \brief The constructor of the class. */

VariableResolutionRotatedLatLon::VariableResolutionRotatedLatLon() {
  try {
  } catch (...) {
    throw Fmi::Exception(BCP, "Operation failed", nullptr);
  }
}

/*! \brief The destructor of the class. */

VariableResolutionRotatedLatLon::~VariableResolutionRotatedLatLon() {
}

/*! \brief The method reads and initializes all data related to the current object.

        \param memoryReader  This object controls the access to the memory mapped file.
*/

void VariableResolutionRotatedLatLon::read(MemoryReader &memoryReader) {
  try {
    mEarthShape.read(memoryReader);
    mVariableLatLon.read(memoryReader);
    mRotation.read(memoryReader);
  } catch (...) {
    throw Fmi::Exception(BCP, "Operation failed", nullptr);
  }
}

/*! \brief The method writes all data related to the current object.

        \param dataWriter  This object is used for writing the object data.
*/

void VariableResolutionRotatedLatLon::write(DataWriter &dataWriter) {
  try {
    mEarthShape.write(dataWriter);
    mVariableLatLon.write(dataWriter);
    mRotation.write(dataWriter);
  } catch (...) {
    throw Fmi::Exception(BCP, "Operation failed", nullptr);
  }
}

/*! \brief The method is used for collecting the current class attributeList.

    \param prefix         The prefix of the each attributeList parameter.
    \param attributeList  The attributeList storage.
*/

void VariableResolutionRotatedLatLon::getAttributeList(std::string prefix, T::AttributeList &attributeList) const {
  try {
    char name[300];
    sprintf(name, "%sVariableResolutionRotatedLatLon.", prefix.c_str());
    mEarthShape.getAttributeList(name, attributeList);
    sprintf(name, "%sVariableResolutionRotatedLatLon.", prefix.c_str());
    mVariableLatLon.getAttributeList(name, attributeList);
    sprintf(name, "%sVariableResolutionRotatedLatLon.", prefix.c_str());
    mRotation.getAttributeList(name, attributeList);
  } catch (...) {
    throw Fmi::Exception(BCP, "Operation failed", nullptr);
  }
}

/*! \brief The method prints the content of the current object into the given stream.

    \param ostream      The output stream.
    \param level        The print level (used when printing multi-level structures).
    \param optionFlags  The printing options expressed in flag-bits.
*/

void VariableResolutionRotatedLatLon::print(std::ostream &stream, uint level, uint optionFlags) const {
  try {
    stream << space(level) << "VariableResolutionRotatedLatLon\n";
    mEarthShape.print(stream, level + 1, optionFlags);
    mVariableLatLon.print(stream, level + 1, optionFlags);
    mRotation.print(stream, level + 1, optionFlags);
  } catch (...) {
    throw Fmi::Exception(BCP, "Operation failed", nullptr);
  }
}

/*! \brief The method counts the hash value of the current object. */

T::Hash VariableResolutionRotatedLatLon::countHash() {
  try {
    std::size_t seed = 0;
    // boost::hash_combine(seed,mEarthShape.countHash());
    boost::hash_combine(seed, mVariableLatLon.countHash());
    boost::hash_combine(seed, mRotation.countHash());
    return seed;
  } catch (...) {
    throw Fmi::Exception(BCP, "Operation failed", nullptr);
  }
}

/*! \brief The method return the template number of the current class. */

uint VariableResolutionRotatedLatLon::getTemplateNumber() const {
  return 5;
}

GridDefinition *VariableResolutionRotatedLatLon::createGridDefinition() const {
  try {
    return static_cast<GridDefinition *>(new VariableResolutionRotatedLatLon(*this));
  } catch (...) {
    throw Fmi::Exception(BCP, "Operation failed", nullptr);
  }
}

/*! \brief The method returns the pointer to the {@link mEarthShape} attribute. */

EarthShapeSettings *VariableResolutionRotatedLatLon::getEarthShape() const {
  try {
    return static_cast<EarthShapeSettings *>(&mEarthShape);
  } catch (...) {
    throw Fmi::Exception(BCP, "Operation failed", nullptr);
  }
}

/*! \brief The method returns the pointer to the {@link mVariableLatLon} attribute. */

VariableLatLonSettings *VariableResolutionRotatedLatLon::getVariableLatLon() const {
  try {
    return static_cast<VariableLatLonSettings *>(&mVariableLatLon);
  } catch (...) {
    throw Fmi::Exception(BCP, "Operation failed", nullptr);
  }
}

/*! \brief The method returns the pointer to the {@link mRotation} attribute. */

RotationSettings *VariableResolutionRotatedLatLon::getRotation() const {
  try {
    return static_cast<RotationSettings *>(&mRotation);
  } catch (...) {
    throw Fmi::Exception(BCP, "Operation failed", nullptr);
  }
}

void VariableResolutionRotatedLatLon::setEarthShape(EarthShapeSettings &earthShape) {
  try {
    mEarthShape = earthShape;
  } catch (...) {
    throw Fmi::Exception(BCP, "Operation failed", nullptr);
  }
}

void VariableResolutionRotatedLatLon::setVariableLatLon(VariableLatLonSettings &variableLatLon) {
  try {
    mVariableLatLon = variableLatLon;
  } catch (...) {
    throw Fmi::Exception(BCP, "Operation failed", nullptr);
  }
}

void VariableResolutionRotatedLatLon::setRotation(RotationSettings &rotation) {
  try {
    mRotation = rotation;
  } catch (...) {
    throw Fmi::Exception(BCP, "Operation failed", nullptr);
  }
}

} // namespace GRIB2
} // namespace SmartMet
